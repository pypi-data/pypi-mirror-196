# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IservercontractconidalgosParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'required': 'bool',
        'name': 'str',
        'value_class_name': 'str',
        'min_value': 'float',
        'max_value': 'float',
        'default_value': 'bool',
        'legal_strings': 'str',
        'description': 'str',
        'gui_rank': 'float',
        'price_market_rule': 'bool',
        'enabled_conditions': 'str'
    }

    attribute_map = {
        'id': 'id',
        'required': 'required',
        'name': 'name',
        'value_class_name': 'valueClassName',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'default_value': 'defaultValue',
        'legal_strings': 'legalStrings',
        'description': 'description',
        'gui_rank': 'guiRank',
        'price_market_rule': 'priceMarketRule',
        'enabled_conditions': 'enabledConditions'
    }

    def __init__(self, id=None, required=None, name=None, value_class_name=None, min_value=None, max_value=None, default_value=None, legal_strings=None, description=None, gui_rank=None, price_market_rule=None, enabled_conditions=None):  # noqa: E501
        """IservercontractconidalgosParameters - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._required = None
        self._name = None
        self._value_class_name = None
        self._min_value = None
        self._max_value = None
        self._default_value = None
        self._legal_strings = None
        self._description = None
        self._gui_rank = None
        self._price_market_rule = None
        self._enabled_conditions = None
        self.discriminator = None
        self.id = id
        if required is not None:
            self.required = required
        if name is not None:
            self.name = name
        self.value_class_name = value_class_name
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if default_value is not None:
            self.default_value = default_value
        if legal_strings is not None:
            self.legal_strings = legal_strings
        if description is not None:
            self.description = description
        if gui_rank is not None:
            self.gui_rank = gui_rank
        if price_market_rule is not None:
            self.price_market_rule = price_market_rule
        if enabled_conditions is not None:
            self.enabled_conditions = enabled_conditions

    @property
    def id(self):
        """Gets the id of this IservercontractconidalgosParameters.  # noqa: E501

        The algo parameter  # noqa: E501

        :return: The id of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IservercontractconidalgosParameters.

        The algo parameter  # noqa: E501

        :param id: The id of this IservercontractconidalgosParameters.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def required(self):
        """Gets the required of this IservercontractconidalgosParameters.  # noqa: E501

        If true a value must be entered.  # noqa: E501

        :return: The required of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this IservercontractconidalgosParameters.

        If true a value must be entered.  # noqa: E501

        :param required: The required of this IservercontractconidalgosParameters.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def name(self):
        """Gets the name of this IservercontractconidalgosParameters.  # noqa: E501

        Descriptive name of the parameter.  # noqa: E501

        :return: The name of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IservercontractconidalgosParameters.

        Descriptive name of the parameter.  # noqa: E501

        :param name: The name of this IservercontractconidalgosParameters.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value_class_name(self):
        """Gets the value_class_name of this IservercontractconidalgosParameters.  # noqa: E501

        Format of the parameter.  # noqa: E501

        :return: The value_class_name of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: str
        """
        return self._value_class_name

    @value_class_name.setter
    def value_class_name(self, value_class_name):
        """Sets the value_class_name of this IservercontractconidalgosParameters.

        Format of the parameter.  # noqa: E501

        :param value_class_name: The value_class_name of this IservercontractconidalgosParameters.  # noqa: E501
        :type: str
        """
        if value_class_name is None:
            raise ValueError("Invalid value for `value_class_name`, must not be `None`")  # noqa: E501
        allowed_values = ["double", "string", "time", "boolean"]  # noqa: E501
        if value_class_name not in allowed_values:
            raise ValueError(
                "Invalid value for `value_class_name` ({0}), must be one of {1}"  # noqa: E501
                .format(value_class_name, allowed_values)
            )

        self._value_class_name = value_class_name

    @property
    def min_value(self):
        """Gets the min_value of this IservercontractconidalgosParameters.  # noqa: E501

        Smallest value, only applies to parameters with valueClassName=Double.  # noqa: E501

        :return: The min_value of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this IservercontractconidalgosParameters.

        Smallest value, only applies to parameters with valueClassName=Double.  # noqa: E501

        :param min_value: The min_value of this IservercontractconidalgosParameters.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this IservercontractconidalgosParameters.  # noqa: E501

        Largest value, only applies to parameters with valueClassName=Double.  # noqa: E501

        :return: The max_value of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this IservercontractconidalgosParameters.

        Largest value, only applies to parameters with valueClassName=Double.  # noqa: E501

        :param max_value: The max_value of this IservercontractconidalgosParameters.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def default_value(self):
        """Gets the default_value of this IservercontractconidalgosParameters.  # noqa: E501

        User configured preset for this parameter.  # noqa: E501

        :return: The default_value of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: bool
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this IservercontractconidalgosParameters.

        User configured preset for this parameter.  # noqa: E501

        :param default_value: The default_value of this IservercontractconidalgosParameters.  # noqa: E501
        :type: bool
        """

        self._default_value = default_value

    @property
    def legal_strings(self):
        """Gets the legal_strings of this IservercontractconidalgosParameters.  # noqa: E501

        The list of choices  # noqa: E501

        :return: The legal_strings of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: str
        """
        return self._legal_strings

    @legal_strings.setter
    def legal_strings(self, legal_strings):
        """Sets the legal_strings of this IservercontractconidalgosParameters.

        The list of choices  # noqa: E501

        :param legal_strings: The legal_strings of this IservercontractconidalgosParameters.  # noqa: E501
        :type: str
        """

        self._legal_strings = legal_strings

    @property
    def description(self):
        """Gets the description of this IservercontractconidalgosParameters.  # noqa: E501

        Detailed description of the parameter.  # noqa: E501

        :return: The description of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IservercontractconidalgosParameters.

        Detailed description of the parameter.  # noqa: E501

        :param description: The description of this IservercontractconidalgosParameters.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def gui_rank(self):
        """Gets the gui_rank of this IservercontractconidalgosParameters.  # noqa: E501

        The order in UI, used when building dynamic UI so that more important parameters are presented first.  # noqa: E501

        :return: The gui_rank of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: float
        """
        return self._gui_rank

    @gui_rank.setter
    def gui_rank(self, gui_rank):
        """Sets the gui_rank of this IservercontractconidalgosParameters.

        The order in UI, used when building dynamic UI so that more important parameters are presented first.  # noqa: E501

        :param gui_rank: The gui_rank of this IservercontractconidalgosParameters.  # noqa: E501
        :type: float
        """

        self._gui_rank = gui_rank

    @property
    def price_market_rule(self):
        """Gets the price_market_rule of this IservercontractconidalgosParameters.  # noqa: E501

        If true, must specify parameter using market rule format. Only applies to parameters with valueClassName=Double.  # noqa: E501

        :return: The price_market_rule of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: bool
        """
        return self._price_market_rule

    @price_market_rule.setter
    def price_market_rule(self, price_market_rule):
        """Sets the price_market_rule of this IservercontractconidalgosParameters.

        If true, must specify parameter using market rule format. Only applies to parameters with valueClassName=Double.  # noqa: E501

        :param price_market_rule: The price_market_rule of this IservercontractconidalgosParameters.  # noqa: E501
        :type: bool
        """

        self._price_market_rule = price_market_rule

    @property
    def enabled_conditions(self):
        """Gets the enabled_conditions of this IservercontractconidalgosParameters.  # noqa: E501

        The rules that UI should apply to algo parameters depending on chosen order type:  * MKT:speedUp:=:no - hide SpeedUp param when MKT is chosen for order type.  * LMT:strategyType:<>:empty - strategyType param cannot be empty when LMT is chosen for order type.  * MKT:strategyType:=:Marketable - set strategyType param to Marketable and disable (no other choice) when MKT is chosen for order type.   # noqa: E501

        :return: The enabled_conditions of this IservercontractconidalgosParameters.  # noqa: E501
        :rtype: str
        """
        return self._enabled_conditions

    @enabled_conditions.setter
    def enabled_conditions(self, enabled_conditions):
        """Sets the enabled_conditions of this IservercontractconidalgosParameters.

        The rules that UI should apply to algo parameters depending on chosen order type:  * MKT:speedUp:=:no - hide SpeedUp param when MKT is chosen for order type.  * LMT:strategyType:<>:empty - strategyType param cannot be empty when LMT is chosen for order type.  * MKT:strategyType:=:Marketable - set strategyType param to Marketable and disable (no other choice) when MKT is chosen for order type.   # noqa: E501

        :param enabled_conditions: The enabled_conditions of this IservercontractconidalgosParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["MKT:speedUp:=:no", "LMT:strategyType:<>:empty", "MKT:strategyType:=:Marketable"]  # noqa: E501
        if enabled_conditions not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled_conditions` ({0}), must be one of {1}"  # noqa: E501
                .format(enabled_conditions, allowed_values)
            )

        self._enabled_conditions = enabled_conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IservercontractconidalgosParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IservercontractconidalgosParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
