# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaTransactionsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acct_ids': 'list[str]',
        'conids': 'list[float]',
        'currency': 'str',
        'days': 'float'
    }

    attribute_map = {
        'acct_ids': 'acctIds',
        'conids': 'conids',
        'currency': 'currency',
        'days': 'days'
    }

    def __init__(self, acct_ids=None, conids=None, currency=None, days=None):  # noqa: E501
        """PaTransactionsBody - a model defined in Swagger"""  # noqa: E501
        self._acct_ids = None
        self._conids = None
        self._currency = None
        self._days = None
        self.discriminator = None
        if acct_ids is not None:
            self.acct_ids = acct_ids
        if conids is not None:
            self.conids = conids
        if currency is not None:
            self.currency = currency
        if days is not None:
            self.days = days

    @property
    def acct_ids(self):
        """Gets the acct_ids of this PaTransactionsBody.  # noqa: E501


        :return: The acct_ids of this PaTransactionsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._acct_ids

    @acct_ids.setter
    def acct_ids(self, acct_ids):
        """Sets the acct_ids of this PaTransactionsBody.


        :param acct_ids: The acct_ids of this PaTransactionsBody.  # noqa: E501
        :type: list[str]
        """

        self._acct_ids = acct_ids

    @property
    def conids(self):
        """Gets the conids of this PaTransactionsBody.  # noqa: E501


        :return: The conids of this PaTransactionsBody.  # noqa: E501
        :rtype: list[float]
        """
        return self._conids

    @conids.setter
    def conids(self, conids):
        """Sets the conids of this PaTransactionsBody.


        :param conids: The conids of this PaTransactionsBody.  # noqa: E501
        :type: list[float]
        """

        self._conids = conids

    @property
    def currency(self):
        """Gets the currency of this PaTransactionsBody.  # noqa: E501

        optional defaults to USD.  # noqa: E501

        :return: The currency of this PaTransactionsBody.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaTransactionsBody.

        optional defaults to USD.  # noqa: E501

        :param currency: The currency of this PaTransactionsBody.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def days(self):
        """Gets the days of this PaTransactionsBody.  # noqa: E501

        optional, default value is 90  # noqa: E501

        :return: The days of this PaTransactionsBody.  # noqa: E501
        :rtype: float
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this PaTransactionsBody.

        optional, default value is 90  # noqa: E501

        :param days: The days of this PaTransactionsBody.  # noqa: E501
        :type: float
        """

        self._days = days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaTransactionsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaTransactionsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
