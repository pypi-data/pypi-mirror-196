# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistoryresultBars(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'open': 'float',
        'high': 'float',
        'low': 'float',
        'close': 'float',
        'volume': 'float',
        'time': 'str',
        'end_time': 'str',
        'weighted_avg': 'float',
        'count': 'float'
    }

    attribute_map = {
        'open': 'open',
        'high': 'high',
        'low': 'low',
        'close': 'close',
        'volume': 'volume',
        'time': 'time',
        'end_time': 'endTime',
        'weighted_avg': 'weightedAvg',
        'count': 'count'
    }

    def __init__(self, open=None, high=None, low=None, close=None, volume=None, time=None, end_time=None, weighted_avg=None, count=None):  # noqa: E501
        """HistoryresultBars - a model defined in Swagger"""  # noqa: E501
        self._open = None
        self._high = None
        self._low = None
        self._close = None
        self._volume = None
        self._time = None
        self._end_time = None
        self._weighted_avg = None
        self._count = None
        self.discriminator = None
        if open is not None:
            self.open = open
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if close is not None:
            self.close = close
        if volume is not None:
            self.volume = volume
        if time is not None:
            self.time = time
        if end_time is not None:
            self.end_time = end_time
        if weighted_avg is not None:
            self.weighted_avg = weighted_avg
        if count is not None:
            self.count = count

    @property
    def open(self):
        """Gets the open of this HistoryresultBars.  # noqa: E501


        :return: The open of this HistoryresultBars.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this HistoryresultBars.


        :param open: The open of this HistoryresultBars.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def high(self):
        """Gets the high of this HistoryresultBars.  # noqa: E501


        :return: The high of this HistoryresultBars.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this HistoryresultBars.


        :param high: The high of this HistoryresultBars.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this HistoryresultBars.  # noqa: E501


        :return: The low of this HistoryresultBars.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this HistoryresultBars.


        :param low: The low of this HistoryresultBars.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def close(self):
        """Gets the close of this HistoryresultBars.  # noqa: E501


        :return: The close of this HistoryresultBars.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this HistoryresultBars.


        :param close: The close of this HistoryresultBars.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def volume(self):
        """Gets the volume of this HistoryresultBars.  # noqa: E501


        :return: The volume of this HistoryresultBars.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this HistoryresultBars.


        :param volume: The volume of this HistoryresultBars.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def time(self):
        """Gets the time of this HistoryresultBars.  # noqa: E501


        :return: The time of this HistoryresultBars.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this HistoryresultBars.


        :param time: The time of this HistoryresultBars.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def end_time(self):
        """Gets the end_time of this HistoryresultBars.  # noqa: E501


        :return: The end_time of this HistoryresultBars.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this HistoryresultBars.


        :param end_time: The end_time of this HistoryresultBars.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def weighted_avg(self):
        """Gets the weighted_avg of this HistoryresultBars.  # noqa: E501


        :return: The weighted_avg of this HistoryresultBars.  # noqa: E501
        :rtype: float
        """
        return self._weighted_avg

    @weighted_avg.setter
    def weighted_avg(self, weighted_avg):
        """Sets the weighted_avg of this HistoryresultBars.


        :param weighted_avg: The weighted_avg of this HistoryresultBars.  # noqa: E501
        :type: float
        """

        self._weighted_avg = weighted_avg

    @property
    def count(self):
        """Gets the count of this HistoryresultBars.  # noqa: E501


        :return: The count of this HistoryresultBars.  # noqa: E501
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this HistoryresultBars.


        :param count: The count of this HistoryresultBars.  # noqa: E501
        :type: float
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryresultBars, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryresultBars):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
