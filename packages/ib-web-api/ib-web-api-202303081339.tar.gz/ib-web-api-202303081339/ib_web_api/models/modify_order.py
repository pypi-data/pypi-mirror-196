# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModifyOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acct_id': 'str',
        'conid': 'int',
        'order_type': 'str',
        'outside_rth': 'bool',
        'price': 'float',
        'aux_price': 'float',
        'side': 'str',
        'listing_exchange': 'str',
        'ticker': 'str',
        'tif': 'str',
        'quantity': 'float',
        'deactivated': 'bool'
    }

    attribute_map = {
        'acct_id': 'acctId',
        'conid': 'conid',
        'order_type': 'orderType',
        'outside_rth': 'outsideRTH',
        'price': 'price',
        'aux_price': 'auxPrice',
        'side': 'side',
        'listing_exchange': 'listingExchange',
        'ticker': 'ticker',
        'tif': 'tif',
        'quantity': 'quantity',
        'deactivated': 'deactivated'
    }

    def __init__(self, acct_id=None, conid=None, order_type=None, outside_rth=None, price=None, aux_price=None, side=None, listing_exchange=None, ticker=None, tif=None, quantity=None, deactivated=None):  # noqa: E501
        """ModifyOrder - a model defined in Swagger"""  # noqa: E501
        self._acct_id = None
        self._conid = None
        self._order_type = None
        self._outside_rth = None
        self._price = None
        self._aux_price = None
        self._side = None
        self._listing_exchange = None
        self._ticker = None
        self._tif = None
        self._quantity = None
        self._deactivated = None
        self.discriminator = None
        if acct_id is not None:
            self.acct_id = acct_id
        if conid is not None:
            self.conid = conid
        if order_type is not None:
            self.order_type = order_type
        if outside_rth is not None:
            self.outside_rth = outside_rth
        if price is not None:
            self.price = price
        if aux_price is not None:
            self.aux_price = aux_price
        if side is not None:
            self.side = side
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if ticker is not None:
            self.ticker = ticker
        if tif is not None:
            self.tif = tif
        if quantity is not None:
            self.quantity = quantity
        if deactivated is not None:
            self.deactivated = deactivated

    @property
    def acct_id(self):
        """Gets the acct_id of this ModifyOrder.  # noqa: E501


        :return: The acct_id of this ModifyOrder.  # noqa: E501
        :rtype: str
        """
        return self._acct_id

    @acct_id.setter
    def acct_id(self, acct_id):
        """Sets the acct_id of this ModifyOrder.


        :param acct_id: The acct_id of this ModifyOrder.  # noqa: E501
        :type: str
        """

        self._acct_id = acct_id

    @property
    def conid(self):
        """Gets the conid of this ModifyOrder.  # noqa: E501


        :return: The conid of this ModifyOrder.  # noqa: E501
        :rtype: int
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this ModifyOrder.


        :param conid: The conid of this ModifyOrder.  # noqa: E501
        :type: int
        """

        self._conid = conid

    @property
    def order_type(self):
        """Gets the order_type of this ModifyOrder.  # noqa: E501

        for example LMT  # noqa: E501

        :return: The order_type of this ModifyOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this ModifyOrder.

        for example LMT  # noqa: E501

        :param order_type: The order_type of this ModifyOrder.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def outside_rth(self):
        """Gets the outside_rth of this ModifyOrder.  # noqa: E501


        :return: The outside_rth of this ModifyOrder.  # noqa: E501
        :rtype: bool
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this ModifyOrder.


        :param outside_rth: The outside_rth of this ModifyOrder.  # noqa: E501
        :type: bool
        """

        self._outside_rth = outside_rth

    @property
    def price(self):
        """Gets the price of this ModifyOrder.  # noqa: E501


        :return: The price of this ModifyOrder.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ModifyOrder.


        :param price: The price of this ModifyOrder.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def aux_price(self):
        """Gets the aux_price of this ModifyOrder.  # noqa: E501


        :return: The aux_price of this ModifyOrder.  # noqa: E501
        :rtype: float
        """
        return self._aux_price

    @aux_price.setter
    def aux_price(self, aux_price):
        """Sets the aux_price of this ModifyOrder.


        :param aux_price: The aux_price of this ModifyOrder.  # noqa: E501
        :type: float
        """

        self._aux_price = aux_price

    @property
    def side(self):
        """Gets the side of this ModifyOrder.  # noqa: E501

        SELL or BUY  # noqa: E501

        :return: The side of this ModifyOrder.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this ModifyOrder.

        SELL or BUY  # noqa: E501

        :param side: The side of this ModifyOrder.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this ModifyOrder.  # noqa: E501

        optional, not required  # noqa: E501

        :return: The listing_exchange of this ModifyOrder.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this ModifyOrder.

        optional, not required  # noqa: E501

        :param listing_exchange: The listing_exchange of this ModifyOrder.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def ticker(self):
        """Gets the ticker of this ModifyOrder.  # noqa: E501

        The ticker symbol of the original place order  # noqa: E501

        :return: The ticker of this ModifyOrder.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this ModifyOrder.

        The ticker symbol of the original place order  # noqa: E501

        :param ticker: The ticker of this ModifyOrder.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def tif(self):
        """Gets the tif of this ModifyOrder.  # noqa: E501

        Specify a time in force to change how long your order will continue to work in the market  # noqa: E501

        :return: The tif of this ModifyOrder.  # noqa: E501
        :rtype: str
        """
        return self._tif

    @tif.setter
    def tif(self, tif):
        """Sets the tif of this ModifyOrder.

        Specify a time in force to change how long your order will continue to work in the market  # noqa: E501

        :param tif: The tif of this ModifyOrder.  # noqa: E501
        :type: str
        """

        self._tif = tif

    @property
    def quantity(self):
        """Gets the quantity of this ModifyOrder.  # noqa: E501

        usually integer, for some special cases can be float numbers  # noqa: E501

        :return: The quantity of this ModifyOrder.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ModifyOrder.

        usually integer, for some special cases can be float numbers  # noqa: E501

        :param quantity: The quantity of this ModifyOrder.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def deactivated(self):
        """Gets the deactivated of this ModifyOrder.  # noqa: E501

        Set to true if you want to pause a working order. For details refer to the [TWS Users' Guide:](https://guides.interactivebrokers.com/tws/twsguide.html#usersguidebook/getstarted/pause_execution.htm)   # noqa: E501

        :return: The deactivated of this ModifyOrder.  # noqa: E501
        :rtype: bool
        """
        return self._deactivated

    @deactivated.setter
    def deactivated(self, deactivated):
        """Sets the deactivated of this ModifyOrder.

        Set to true if you want to pause a working order. For details refer to the [TWS Users' Guide:](https://guides.interactivebrokers.com/tws/twsguide.html#usersguidebook/getstarted/pause_execution.htm)   # noqa: E501

        :param deactivated: The deactivated of this ModifyOrder.  # noqa: E501
        :type: bool
        """

        self._deactivated = deactivated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
