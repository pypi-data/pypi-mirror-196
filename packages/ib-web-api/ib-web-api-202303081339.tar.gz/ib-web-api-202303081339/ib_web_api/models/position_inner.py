# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PositionInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acct_id': 'str',
        'conid': 'int',
        'contract_desc': 'str',
        'asset_class': 'str',
        'position': 'float',
        'mkt_price': 'float',
        'mkt_value': 'float',
        'currency': 'str',
        'avg_cost': 'float',
        'avg_price': 'float',
        'realized_pnl': 'float',
        'unrealized_pnl': 'float',
        'exchs': 'str',
        'expiry': 'str',
        'put_or_call': 'str',
        'multiplier': 'float',
        'strike': 'float',
        'exercise_style': 'str',
        'und_conid': 'int',
        'con_exch_map': 'list[str]',
        'base_mkt_value': 'float',
        'base_mkt_price': 'float',
        'base_avg_cost': 'float',
        'base_avg_price': 'float',
        'base_realized_pnl': 'float',
        'base_unrealized_pnl': 'float',
        'name': 'str',
        'last_trading_day': 'str',
        'group': 'str',
        'sector': 'str',
        'sector_group': 'str',
        'ticker': 'str',
        'und_comp': 'str',
        'und_sym': 'str',
        'full_name': 'str',
        'page_size': 'int',
        'model': 'str'
    }

    attribute_map = {
        'acct_id': 'acctId',
        'conid': 'conid',
        'contract_desc': 'contractDesc',
        'asset_class': 'assetClass',
        'position': 'position',
        'mkt_price': 'mktPrice',
        'mkt_value': 'mktValue',
        'currency': 'currency',
        'avg_cost': 'avgCost',
        'avg_price': 'avgPrice',
        'realized_pnl': 'realizedPnl',
        'unrealized_pnl': 'unrealizedPnl',
        'exchs': 'exchs',
        'expiry': 'expiry',
        'put_or_call': 'putOrCall',
        'multiplier': 'multiplier',
        'strike': 'strike',
        'exercise_style': 'exerciseStyle',
        'und_conid': 'undConid',
        'con_exch_map': 'conExchMap',
        'base_mkt_value': 'baseMktValue',
        'base_mkt_price': 'baseMktPrice',
        'base_avg_cost': 'baseAvgCost',
        'base_avg_price': 'baseAvgPrice',
        'base_realized_pnl': 'baseRealizedPnl',
        'base_unrealized_pnl': 'baseUnrealizedPnl',
        'name': 'name',
        'last_trading_day': 'lastTradingDay',
        'group': 'group',
        'sector': 'sector',
        'sector_group': 'sectorGroup',
        'ticker': 'ticker',
        'und_comp': 'undComp',
        'und_sym': 'undSym',
        'full_name': 'fullName',
        'page_size': 'pageSize',
        'model': 'model'
    }

    def __init__(self, acct_id=None, conid=None, contract_desc=None, asset_class=None, position=None, mkt_price=None, mkt_value=None, currency=None, avg_cost=None, avg_price=None, realized_pnl=None, unrealized_pnl=None, exchs=None, expiry=None, put_or_call=None, multiplier=None, strike=None, exercise_style=None, und_conid=None, con_exch_map=None, base_mkt_value=None, base_mkt_price=None, base_avg_cost=None, base_avg_price=None, base_realized_pnl=None, base_unrealized_pnl=None, name=None, last_trading_day=None, group=None, sector=None, sector_group=None, ticker=None, und_comp=None, und_sym=None, full_name=None, page_size=None, model=None):  # noqa: E501
        """PositionInner - a model defined in Swagger"""  # noqa: E501
        self._acct_id = None
        self._conid = None
        self._contract_desc = None
        self._asset_class = None
        self._position = None
        self._mkt_price = None
        self._mkt_value = None
        self._currency = None
        self._avg_cost = None
        self._avg_price = None
        self._realized_pnl = None
        self._unrealized_pnl = None
        self._exchs = None
        self._expiry = None
        self._put_or_call = None
        self._multiplier = None
        self._strike = None
        self._exercise_style = None
        self._und_conid = None
        self._con_exch_map = None
        self._base_mkt_value = None
        self._base_mkt_price = None
        self._base_avg_cost = None
        self._base_avg_price = None
        self._base_realized_pnl = None
        self._base_unrealized_pnl = None
        self._name = None
        self._last_trading_day = None
        self._group = None
        self._sector = None
        self._sector_group = None
        self._ticker = None
        self._und_comp = None
        self._und_sym = None
        self._full_name = None
        self._page_size = None
        self._model = None
        self.discriminator = None
        if acct_id is not None:
            self.acct_id = acct_id
        if conid is not None:
            self.conid = conid
        if contract_desc is not None:
            self.contract_desc = contract_desc
        if asset_class is not None:
            self.asset_class = asset_class
        if position is not None:
            self.position = position
        if mkt_price is not None:
            self.mkt_price = mkt_price
        if mkt_value is not None:
            self.mkt_value = mkt_value
        if currency is not None:
            self.currency = currency
        if avg_cost is not None:
            self.avg_cost = avg_cost
        if avg_price is not None:
            self.avg_price = avg_price
        if realized_pnl is not None:
            self.realized_pnl = realized_pnl
        if unrealized_pnl is not None:
            self.unrealized_pnl = unrealized_pnl
        if exchs is not None:
            self.exchs = exchs
        if expiry is not None:
            self.expiry = expiry
        if put_or_call is not None:
            self.put_or_call = put_or_call
        if multiplier is not None:
            self.multiplier = multiplier
        if strike is not None:
            self.strike = strike
        if exercise_style is not None:
            self.exercise_style = exercise_style
        if und_conid is not None:
            self.und_conid = und_conid
        if con_exch_map is not None:
            self.con_exch_map = con_exch_map
        if base_mkt_value is not None:
            self.base_mkt_value = base_mkt_value
        if base_mkt_price is not None:
            self.base_mkt_price = base_mkt_price
        if base_avg_cost is not None:
            self.base_avg_cost = base_avg_cost
        if base_avg_price is not None:
            self.base_avg_price = base_avg_price
        if base_realized_pnl is not None:
            self.base_realized_pnl = base_realized_pnl
        if base_unrealized_pnl is not None:
            self.base_unrealized_pnl = base_unrealized_pnl
        if name is not None:
            self.name = name
        if last_trading_day is not None:
            self.last_trading_day = last_trading_day
        if group is not None:
            self.group = group
        if sector is not None:
            self.sector = sector
        if sector_group is not None:
            self.sector_group = sector_group
        if ticker is not None:
            self.ticker = ticker
        if und_comp is not None:
            self.und_comp = und_comp
        if und_sym is not None:
            self.und_sym = und_sym
        if full_name is not None:
            self.full_name = full_name
        if page_size is not None:
            self.page_size = page_size
        if model is not None:
            self.model = model

    @property
    def acct_id(self):
        """Gets the acct_id of this PositionInner.  # noqa: E501


        :return: The acct_id of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._acct_id

    @acct_id.setter
    def acct_id(self, acct_id):
        """Sets the acct_id of this PositionInner.


        :param acct_id: The acct_id of this PositionInner.  # noqa: E501
        :type: str
        """

        self._acct_id = acct_id

    @property
    def conid(self):
        """Gets the conid of this PositionInner.  # noqa: E501


        :return: The conid of this PositionInner.  # noqa: E501
        :rtype: int
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this PositionInner.


        :param conid: The conid of this PositionInner.  # noqa: E501
        :type: int
        """

        self._conid = conid

    @property
    def contract_desc(self):
        """Gets the contract_desc of this PositionInner.  # noqa: E501


        :return: The contract_desc of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._contract_desc

    @contract_desc.setter
    def contract_desc(self, contract_desc):
        """Sets the contract_desc of this PositionInner.


        :param contract_desc: The contract_desc of this PositionInner.  # noqa: E501
        :type: str
        """

        self._contract_desc = contract_desc

    @property
    def asset_class(self):
        """Gets the asset_class of this PositionInner.  # noqa: E501


        :return: The asset_class of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class):
        """Sets the asset_class of this PositionInner.


        :param asset_class: The asset_class of this PositionInner.  # noqa: E501
        :type: str
        """

        self._asset_class = asset_class

    @property
    def position(self):
        """Gets the position of this PositionInner.  # noqa: E501


        :return: The position of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PositionInner.


        :param position: The position of this PositionInner.  # noqa: E501
        :type: float
        """

        self._position = position

    @property
    def mkt_price(self):
        """Gets the mkt_price of this PositionInner.  # noqa: E501


        :return: The mkt_price of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._mkt_price

    @mkt_price.setter
    def mkt_price(self, mkt_price):
        """Sets the mkt_price of this PositionInner.


        :param mkt_price: The mkt_price of this PositionInner.  # noqa: E501
        :type: float
        """

        self._mkt_price = mkt_price

    @property
    def mkt_value(self):
        """Gets the mkt_value of this PositionInner.  # noqa: E501


        :return: The mkt_value of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._mkt_value

    @mkt_value.setter
    def mkt_value(self, mkt_value):
        """Sets the mkt_value of this PositionInner.


        :param mkt_value: The mkt_value of this PositionInner.  # noqa: E501
        :type: float
        """

        self._mkt_value = mkt_value

    @property
    def currency(self):
        """Gets the currency of this PositionInner.  # noqa: E501


        :return: The currency of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PositionInner.


        :param currency: The currency of this PositionInner.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def avg_cost(self):
        """Gets the avg_cost of this PositionInner.  # noqa: E501


        :return: The avg_cost of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._avg_cost

    @avg_cost.setter
    def avg_cost(self, avg_cost):
        """Sets the avg_cost of this PositionInner.


        :param avg_cost: The avg_cost of this PositionInner.  # noqa: E501
        :type: float
        """

        self._avg_cost = avg_cost

    @property
    def avg_price(self):
        """Gets the avg_price of this PositionInner.  # noqa: E501


        :return: The avg_price of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this PositionInner.


        :param avg_price: The avg_price of this PositionInner.  # noqa: E501
        :type: float
        """

        self._avg_price = avg_price

    @property
    def realized_pnl(self):
        """Gets the realized_pnl of this PositionInner.  # noqa: E501


        :return: The realized_pnl of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._realized_pnl

    @realized_pnl.setter
    def realized_pnl(self, realized_pnl):
        """Sets the realized_pnl of this PositionInner.


        :param realized_pnl: The realized_pnl of this PositionInner.  # noqa: E501
        :type: float
        """

        self._realized_pnl = realized_pnl

    @property
    def unrealized_pnl(self):
        """Gets the unrealized_pnl of this PositionInner.  # noqa: E501


        :return: The unrealized_pnl of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._unrealized_pnl

    @unrealized_pnl.setter
    def unrealized_pnl(self, unrealized_pnl):
        """Sets the unrealized_pnl of this PositionInner.


        :param unrealized_pnl: The unrealized_pnl of this PositionInner.  # noqa: E501
        :type: float
        """

        self._unrealized_pnl = unrealized_pnl

    @property
    def exchs(self):
        """Gets the exchs of this PositionInner.  # noqa: E501


        :return: The exchs of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._exchs

    @exchs.setter
    def exchs(self, exchs):
        """Sets the exchs of this PositionInner.


        :param exchs: The exchs of this PositionInner.  # noqa: E501
        :type: str
        """

        self._exchs = exchs

    @property
    def expiry(self):
        """Gets the expiry of this PositionInner.  # noqa: E501


        :return: The expiry of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this PositionInner.


        :param expiry: The expiry of this PositionInner.  # noqa: E501
        :type: str
        """

        self._expiry = expiry

    @property
    def put_or_call(self):
        """Gets the put_or_call of this PositionInner.  # noqa: E501


        :return: The put_or_call of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._put_or_call

    @put_or_call.setter
    def put_or_call(self, put_or_call):
        """Sets the put_or_call of this PositionInner.


        :param put_or_call: The put_or_call of this PositionInner.  # noqa: E501
        :type: str
        """

        self._put_or_call = put_or_call

    @property
    def multiplier(self):
        """Gets the multiplier of this PositionInner.  # noqa: E501


        :return: The multiplier of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this PositionInner.


        :param multiplier: The multiplier of this PositionInner.  # noqa: E501
        :type: float
        """

        self._multiplier = multiplier

    @property
    def strike(self):
        """Gets the strike of this PositionInner.  # noqa: E501


        :return: The strike of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this PositionInner.


        :param strike: The strike of this PositionInner.  # noqa: E501
        :type: float
        """

        self._strike = strike

    @property
    def exercise_style(self):
        """Gets the exercise_style of this PositionInner.  # noqa: E501


        :return: The exercise_style of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._exercise_style

    @exercise_style.setter
    def exercise_style(self, exercise_style):
        """Sets the exercise_style of this PositionInner.


        :param exercise_style: The exercise_style of this PositionInner.  # noqa: E501
        :type: str
        """

        self._exercise_style = exercise_style

    @property
    def und_conid(self):
        """Gets the und_conid of this PositionInner.  # noqa: E501


        :return: The und_conid of this PositionInner.  # noqa: E501
        :rtype: int
        """
        return self._und_conid

    @und_conid.setter
    def und_conid(self, und_conid):
        """Sets the und_conid of this PositionInner.


        :param und_conid: The und_conid of this PositionInner.  # noqa: E501
        :type: int
        """

        self._und_conid = und_conid

    @property
    def con_exch_map(self):
        """Gets the con_exch_map of this PositionInner.  # noqa: E501


        :return: The con_exch_map of this PositionInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._con_exch_map

    @con_exch_map.setter
    def con_exch_map(self, con_exch_map):
        """Sets the con_exch_map of this PositionInner.


        :param con_exch_map: The con_exch_map of this PositionInner.  # noqa: E501
        :type: list[str]
        """

        self._con_exch_map = con_exch_map

    @property
    def base_mkt_value(self):
        """Gets the base_mkt_value of this PositionInner.  # noqa: E501


        :return: The base_mkt_value of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._base_mkt_value

    @base_mkt_value.setter
    def base_mkt_value(self, base_mkt_value):
        """Sets the base_mkt_value of this PositionInner.


        :param base_mkt_value: The base_mkt_value of this PositionInner.  # noqa: E501
        :type: float
        """

        self._base_mkt_value = base_mkt_value

    @property
    def base_mkt_price(self):
        """Gets the base_mkt_price of this PositionInner.  # noqa: E501


        :return: The base_mkt_price of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._base_mkt_price

    @base_mkt_price.setter
    def base_mkt_price(self, base_mkt_price):
        """Sets the base_mkt_price of this PositionInner.


        :param base_mkt_price: The base_mkt_price of this PositionInner.  # noqa: E501
        :type: float
        """

        self._base_mkt_price = base_mkt_price

    @property
    def base_avg_cost(self):
        """Gets the base_avg_cost of this PositionInner.  # noqa: E501


        :return: The base_avg_cost of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._base_avg_cost

    @base_avg_cost.setter
    def base_avg_cost(self, base_avg_cost):
        """Sets the base_avg_cost of this PositionInner.


        :param base_avg_cost: The base_avg_cost of this PositionInner.  # noqa: E501
        :type: float
        """

        self._base_avg_cost = base_avg_cost

    @property
    def base_avg_price(self):
        """Gets the base_avg_price of this PositionInner.  # noqa: E501


        :return: The base_avg_price of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._base_avg_price

    @base_avg_price.setter
    def base_avg_price(self, base_avg_price):
        """Sets the base_avg_price of this PositionInner.


        :param base_avg_price: The base_avg_price of this PositionInner.  # noqa: E501
        :type: float
        """

        self._base_avg_price = base_avg_price

    @property
    def base_realized_pnl(self):
        """Gets the base_realized_pnl of this PositionInner.  # noqa: E501


        :return: The base_realized_pnl of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._base_realized_pnl

    @base_realized_pnl.setter
    def base_realized_pnl(self, base_realized_pnl):
        """Sets the base_realized_pnl of this PositionInner.


        :param base_realized_pnl: The base_realized_pnl of this PositionInner.  # noqa: E501
        :type: float
        """

        self._base_realized_pnl = base_realized_pnl

    @property
    def base_unrealized_pnl(self):
        """Gets the base_unrealized_pnl of this PositionInner.  # noqa: E501


        :return: The base_unrealized_pnl of this PositionInner.  # noqa: E501
        :rtype: float
        """
        return self._base_unrealized_pnl

    @base_unrealized_pnl.setter
    def base_unrealized_pnl(self, base_unrealized_pnl):
        """Sets the base_unrealized_pnl of this PositionInner.


        :param base_unrealized_pnl: The base_unrealized_pnl of this PositionInner.  # noqa: E501
        :type: float
        """

        self._base_unrealized_pnl = base_unrealized_pnl

    @property
    def name(self):
        """Gets the name of this PositionInner.  # noqa: E501


        :return: The name of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PositionInner.


        :param name: The name of this PositionInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def last_trading_day(self):
        """Gets the last_trading_day of this PositionInner.  # noqa: E501


        :return: The last_trading_day of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._last_trading_day

    @last_trading_day.setter
    def last_trading_day(self, last_trading_day):
        """Sets the last_trading_day of this PositionInner.


        :param last_trading_day: The last_trading_day of this PositionInner.  # noqa: E501
        :type: str
        """

        self._last_trading_day = last_trading_day

    @property
    def group(self):
        """Gets the group of this PositionInner.  # noqa: E501


        :return: The group of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this PositionInner.


        :param group: The group of this PositionInner.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def sector(self):
        """Gets the sector of this PositionInner.  # noqa: E501


        :return: The sector of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this PositionInner.


        :param sector: The sector of this PositionInner.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def sector_group(self):
        """Gets the sector_group of this PositionInner.  # noqa: E501


        :return: The sector_group of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._sector_group

    @sector_group.setter
    def sector_group(self, sector_group):
        """Sets the sector_group of this PositionInner.


        :param sector_group: The sector_group of this PositionInner.  # noqa: E501
        :type: str
        """

        self._sector_group = sector_group

    @property
    def ticker(self):
        """Gets the ticker of this PositionInner.  # noqa: E501


        :return: The ticker of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this PositionInner.


        :param ticker: The ticker of this PositionInner.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def und_comp(self):
        """Gets the und_comp of this PositionInner.  # noqa: E501


        :return: The und_comp of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._und_comp

    @und_comp.setter
    def und_comp(self, und_comp):
        """Sets the und_comp of this PositionInner.


        :param und_comp: The und_comp of this PositionInner.  # noqa: E501
        :type: str
        """

        self._und_comp = und_comp

    @property
    def und_sym(self):
        """Gets the und_sym of this PositionInner.  # noqa: E501


        :return: The und_sym of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._und_sym

    @und_sym.setter
    def und_sym(self, und_sym):
        """Sets the und_sym of this PositionInner.


        :param und_sym: The und_sym of this PositionInner.  # noqa: E501
        :type: str
        """

        self._und_sym = und_sym

    @property
    def full_name(self):
        """Gets the full_name of this PositionInner.  # noqa: E501


        :return: The full_name of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PositionInner.


        :param full_name: The full_name of this PositionInner.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def page_size(self):
        """Gets the page_size of this PositionInner.  # noqa: E501


        :return: The page_size of this PositionInner.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PositionInner.


        :param page_size: The page_size of this PositionInner.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def model(self):
        """Gets the model of this PositionInner.  # noqa: E501


        :return: The model of this PositionInner.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PositionInner.


        :param model: The model of this PositionInner.  # noqa: E501
        :type: str
        """

        self._model = model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PositionInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
