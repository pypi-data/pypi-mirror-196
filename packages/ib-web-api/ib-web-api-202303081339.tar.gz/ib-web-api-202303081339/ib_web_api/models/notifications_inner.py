# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'd': 'str',
        'id': 'str',
        'fc': 'str',
        'md': 'str',
        'ms': 'str',
        'r': 'str'
    }

    attribute_map = {
        'd': 'D',
        'id': 'ID',
        'fc': 'FC',
        'md': 'MD',
        'ms': 'MS',
        'r': 'R'
    }

    def __init__(self, d=None, id=None, fc=None, md=None, ms=None, r=None):  # noqa: E501
        """NotificationsInner - a model defined in Swagger"""  # noqa: E501
        self._d = None
        self._id = None
        self._fc = None
        self._md = None
        self._ms = None
        self._r = None
        self.discriminator = None
        if d is not None:
            self.d = d
        if id is not None:
            self.id = id
        if fc is not None:
            self.fc = fc
        if md is not None:
            self.md = md
        if ms is not None:
            self.ms = ms
        if r is not None:
            self.r = r

    @property
    def d(self):
        """Gets the d of this NotificationsInner.  # noqa: E501

        notification date  # noqa: E501

        :return: The d of this NotificationsInner.  # noqa: E501
        :rtype: str
        """
        return self._d

    @d.setter
    def d(self, d):
        """Sets the d of this NotificationsInner.

        notification date  # noqa: E501

        :param d: The d of this NotificationsInner.  # noqa: E501
        :type: str
        """

        self._d = d

    @property
    def id(self):
        """Gets the id of this NotificationsInner.  # noqa: E501

        unique way to reference this notification  # noqa: E501

        :return: The id of this NotificationsInner.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationsInner.

        unique way to reference this notification  # noqa: E501

        :param id: The id of this NotificationsInner.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def fc(self):
        """Gets the fc of this NotificationsInner.  # noqa: E501

        FYI code, we can use it to find whether the disclaimer is accepted or not in settings  # noqa: E501

        :return: The fc of this NotificationsInner.  # noqa: E501
        :rtype: str
        """
        return self._fc

    @fc.setter
    def fc(self, fc):
        """Sets the fc of this NotificationsInner.

        FYI code, we can use it to find whether the disclaimer is accepted or not in settings  # noqa: E501

        :param fc: The fc of this NotificationsInner.  # noqa: E501
        :type: str
        """

        self._fc = fc

    @property
    def md(self):
        """Gets the md of this NotificationsInner.  # noqa: E501

        content of notification  # noqa: E501

        :return: The md of this NotificationsInner.  # noqa: E501
        :rtype: str
        """
        return self._md

    @md.setter
    def md(self, md):
        """Sets the md of this NotificationsInner.

        content of notification  # noqa: E501

        :param md: The md of this NotificationsInner.  # noqa: E501
        :type: str
        """

        self._md = md

    @property
    def ms(self):
        """Gets the ms of this NotificationsInner.  # noqa: E501

        title of notification  # noqa: E501

        :return: The ms of this NotificationsInner.  # noqa: E501
        :rtype: str
        """
        return self._ms

    @ms.setter
    def ms(self, ms):
        """Sets the ms of this NotificationsInner.

        title of notification  # noqa: E501

        :param ms: The ms of this NotificationsInner.  # noqa: E501
        :type: str
        """

        self._ms = ms

    @property
    def r(self):
        """Gets the r of this NotificationsInner.  # noqa: E501

        0-unread, 1-read  # noqa: E501

        :return: The r of this NotificationsInner.  # noqa: E501
        :rtype: str
        """
        return self._r

    @r.setter
    def r(self, r):
        """Sets the r of this NotificationsInner.

        0-unread, 1-read  # noqa: E501

        :param r: The r of this NotificationsInner.  # noqa: E501
        :type: str
        """

        self._r = r

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
