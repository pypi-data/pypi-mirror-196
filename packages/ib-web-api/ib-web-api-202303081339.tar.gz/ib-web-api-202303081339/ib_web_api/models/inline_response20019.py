# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20019(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'InlineResponse20019Amount',
        'equity': 'InlineResponse20019Equity',
        'initial': 'InlineResponse20019Equity',
        'maintenance': 'InlineResponse20019Equity',
        'warn': 'str',
        'error': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'equity': 'equity',
        'initial': 'initial',
        'maintenance': 'maintenance',
        'warn': 'warn',
        'error': 'error'
    }

    def __init__(self, amount=None, equity=None, initial=None, maintenance=None, warn=None, error=None):  # noqa: E501
        """InlineResponse20019 - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._equity = None
        self._initial = None
        self._maintenance = None
        self._warn = None
        self._error = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if equity is not None:
            self.equity = equity
        if initial is not None:
            self.initial = initial
        if maintenance is not None:
            self.maintenance = maintenance
        if warn is not None:
            self.warn = warn
        if error is not None:
            self.error = error

    @property
    def amount(self):
        """Gets the amount of this InlineResponse20019.  # noqa: E501


        :return: The amount of this InlineResponse20019.  # noqa: E501
        :rtype: InlineResponse20019Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse20019.


        :param amount: The amount of this InlineResponse20019.  # noqa: E501
        :type: InlineResponse20019Amount
        """

        self._amount = amount

    @property
    def equity(self):
        """Gets the equity of this InlineResponse20019.  # noqa: E501


        :return: The equity of this InlineResponse20019.  # noqa: E501
        :rtype: InlineResponse20019Equity
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this InlineResponse20019.


        :param equity: The equity of this InlineResponse20019.  # noqa: E501
        :type: InlineResponse20019Equity
        """

        self._equity = equity

    @property
    def initial(self):
        """Gets the initial of this InlineResponse20019.  # noqa: E501


        :return: The initial of this InlineResponse20019.  # noqa: E501
        :rtype: InlineResponse20019Equity
        """
        return self._initial

    @initial.setter
    def initial(self, initial):
        """Sets the initial of this InlineResponse20019.


        :param initial: The initial of this InlineResponse20019.  # noqa: E501
        :type: InlineResponse20019Equity
        """

        self._initial = initial

    @property
    def maintenance(self):
        """Gets the maintenance of this InlineResponse20019.  # noqa: E501


        :return: The maintenance of this InlineResponse20019.  # noqa: E501
        :rtype: InlineResponse20019Equity
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this InlineResponse20019.


        :param maintenance: The maintenance of this InlineResponse20019.  # noqa: E501
        :type: InlineResponse20019Equity
        """

        self._maintenance = maintenance

    @property
    def warn(self):
        """Gets the warn of this InlineResponse20019.  # noqa: E501


        :return: The warn of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._warn

    @warn.setter
    def warn(self, warn):
        """Sets the warn of this InlineResponse20019.


        :param warn: The warn of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._warn = warn

    @property
    def error(self):
        """Gets the error of this InlineResponse20019.  # noqa: E501


        :return: The error of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse20019.


        :param error: The error of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
