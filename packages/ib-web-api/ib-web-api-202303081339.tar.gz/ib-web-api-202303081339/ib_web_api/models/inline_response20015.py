# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20015(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'int',
        'order_id': 'int',
        'success': 'bool',
        'text': 'str',
        'order_status': 'str',
        'failure_list': 'str'
    }

    attribute_map = {
        'request_id': 'request_id',
        'order_id': 'order_id',
        'success': 'success',
        'text': 'text',
        'order_status': 'order_status',
        'failure_list': 'failure_list'
    }

    def __init__(self, request_id=None, order_id=None, success=None, text=None, order_status=None, failure_list=None):  # noqa: E501
        """InlineResponse20015 - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._order_id = None
        self._success = None
        self._text = None
        self._order_status = None
        self._failure_list = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if order_id is not None:
            self.order_id = order_id
        if success is not None:
            self.success = success
        if text is not None:
            self.text = text
        if order_status is not None:
            self.order_status = order_status
        if failure_list is not None:
            self.failure_list = failure_list

    @property
    def request_id(self):
        """Gets the request_id of this InlineResponse20015.  # noqa: E501


        :return: The request_id of this InlineResponse20015.  # noqa: E501
        :rtype: int
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this InlineResponse20015.


        :param request_id: The request_id of this InlineResponse20015.  # noqa: E501
        :type: int
        """

        self._request_id = request_id

    @property
    def order_id(self):
        """Gets the order_id of this InlineResponse20015.  # noqa: E501


        :return: The order_id of this InlineResponse20015.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this InlineResponse20015.


        :param order_id: The order_id of this InlineResponse20015.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def success(self):
        """Gets the success of this InlineResponse20015.  # noqa: E501


        :return: The success of this InlineResponse20015.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this InlineResponse20015.


        :param success: The success of this InlineResponse20015.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def text(self):
        """Gets the text of this InlineResponse20015.  # noqa: E501


        :return: The text of this InlineResponse20015.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InlineResponse20015.


        :param text: The text of this InlineResponse20015.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def order_status(self):
        """Gets the order_status of this InlineResponse20015.  # noqa: E501


        :return: The order_status of this InlineResponse20015.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this InlineResponse20015.


        :param order_status: The order_status of this InlineResponse20015.  # noqa: E501
        :type: str
        """

        self._order_status = order_status

    @property
    def failure_list(self):
        """Gets the failure_list of this InlineResponse20015.  # noqa: E501


        :return: The failure_list of this InlineResponse20015.  # noqa: E501
        :rtype: str
        """
        return self._failure_list

    @failure_list.setter
    def failure_list(self, failure_list):
        """Sets the failure_list of this InlineResponse20015.


        :param failure_list: The failure_list of this InlineResponse20015.  # noqa: E501
        :type: str
        """

        self._failure_list = failure_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
