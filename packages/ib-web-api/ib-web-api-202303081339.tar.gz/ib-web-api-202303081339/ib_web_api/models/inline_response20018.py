# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20018(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'order_status': 'str',
        'local_order_id': 'str'
    }

    attribute_map = {
        'order_id': 'order_id',
        'order_status': 'order_status',
        'local_order_id': 'local_order_id'
    }

    def __init__(self, order_id=None, order_status=None, local_order_id=None):  # noqa: E501
        """InlineResponse20018 - a model defined in Swagger"""  # noqa: E501
        self._order_id = None
        self._order_status = None
        self._local_order_id = None
        self.discriminator = None
        if order_id is not None:
            self.order_id = order_id
        if order_status is not None:
            self.order_status = order_status
        if local_order_id is not None:
            self.local_order_id = local_order_id

    @property
    def order_id(self):
        """Gets the order_id of this InlineResponse20018.  # noqa: E501


        :return: The order_id of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this InlineResponse20018.


        :param order_id: The order_id of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def order_status(self):
        """Gets the order_status of this InlineResponse20018.  # noqa: E501


        :return: The order_status of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this InlineResponse20018.


        :param order_status: The order_status of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._order_status = order_status

    @property
    def local_order_id(self):
        """Gets the local_order_id of this InlineResponse20018.  # noqa: E501


        :return: The local_order_id of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._local_order_id

    @local_order_id.setter
    def local_order_id(self, local_order_id):
        """Sets the local_order_id of this InlineResponse20018.


        :param local_order_id: The local_order_id of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._local_order_id = local_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20018, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20018):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
