# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HmdsScannerBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instrument': 'str',
        'locations': 'str',
        'scan_code': 'str',
        'sec_type': 'str',
        'filters': 'list[HmdsscannerFilters]'
    }

    attribute_map = {
        'instrument': 'instrument',
        'locations': 'locations',
        'scan_code': 'scanCode',
        'sec_type': 'secType',
        'filters': 'filters'
    }

    def __init__(self, instrument=None, locations=None, scan_code=None, sec_type=None, filters=None):  # noqa: E501
        """HmdsScannerBody - a model defined in Swagger"""  # noqa: E501
        self._instrument = None
        self._locations = None
        self._scan_code = None
        self._sec_type = None
        self._filters = None
        self.discriminator = None
        if instrument is not None:
            self.instrument = instrument
        if locations is not None:
            self.locations = locations
        if scan_code is not None:
            self.scan_code = scan_code
        if sec_type is not None:
            self.sec_type = sec_type
        if filters is not None:
            self.filters = filters

    @property
    def instrument(self):
        """Gets the instrument of this HmdsScannerBody.  # noqa: E501


        :return: The instrument of this HmdsScannerBody.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this HmdsScannerBody.


        :param instrument: The instrument of this HmdsScannerBody.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def locations(self):
        """Gets the locations of this HmdsScannerBody.  # noqa: E501


        :return: The locations of this HmdsScannerBody.  # noqa: E501
        :rtype: str
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this HmdsScannerBody.


        :param locations: The locations of this HmdsScannerBody.  # noqa: E501
        :type: str
        """

        self._locations = locations

    @property
    def scan_code(self):
        """Gets the scan_code of this HmdsScannerBody.  # noqa: E501


        :return: The scan_code of this HmdsScannerBody.  # noqa: E501
        :rtype: str
        """
        return self._scan_code

    @scan_code.setter
    def scan_code(self, scan_code):
        """Sets the scan_code of this HmdsScannerBody.


        :param scan_code: The scan_code of this HmdsScannerBody.  # noqa: E501
        :type: str
        """

        self._scan_code = scan_code

    @property
    def sec_type(self):
        """Gets the sec_type of this HmdsScannerBody.  # noqa: E501


        :return: The sec_type of this HmdsScannerBody.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this HmdsScannerBody.


        :param sec_type: The sec_type of this HmdsScannerBody.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    @property
    def filters(self):
        """Gets the filters of this HmdsScannerBody.  # noqa: E501


        :return: The filters of this HmdsScannerBody.  # noqa: E501
        :rtype: list[HmdsscannerFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this HmdsScannerBody.


        :param filters: The filters of this HmdsScannerBody.  # noqa: E501
        :type: list[HmdsscannerFilters]
        """

        self._filters = filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HmdsScannerBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HmdsScannerBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
