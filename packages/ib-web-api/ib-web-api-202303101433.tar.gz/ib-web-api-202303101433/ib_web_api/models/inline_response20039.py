# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20039(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_id': 'str',
        'column_name': 'str',
        'symbol': 'str',
        'conidex': 'str',
        'con_id': 'float',
        'available_chart_periods': 'str',
        'company_name': 'str',
        'contract_description_1': 'str',
        'listing_exchange': 'str',
        'sec_type': 'str'
    }

    attribute_map = {
        'server_id': 'server_id',
        'column_name': 'column_name',
        'symbol': 'symbol',
        'conidex': 'conidex',
        'con_id': 'con_id',
        'available_chart_periods': 'available_chart_periods',
        'company_name': 'company_name',
        'contract_description_1': 'contract_description_1',
        'listing_exchange': 'listing_exchange',
        'sec_type': 'sec_type'
    }

    def __init__(self, server_id=None, column_name=None, symbol=None, conidex=None, con_id=None, available_chart_periods=None, company_name=None, contract_description_1=None, listing_exchange=None, sec_type=None):  # noqa: E501
        """InlineResponse20039 - a model defined in Swagger"""  # noqa: E501
        self._server_id = None
        self._column_name = None
        self._symbol = None
        self._conidex = None
        self._con_id = None
        self._available_chart_periods = None
        self._company_name = None
        self._contract_description_1 = None
        self._listing_exchange = None
        self._sec_type = None
        self.discriminator = None
        if server_id is not None:
            self.server_id = server_id
        if column_name is not None:
            self.column_name = column_name
        if symbol is not None:
            self.symbol = symbol
        if conidex is not None:
            self.conidex = conidex
        if con_id is not None:
            self.con_id = con_id
        if available_chart_periods is not None:
            self.available_chart_periods = available_chart_periods
        if company_name is not None:
            self.company_name = company_name
        if contract_description_1 is not None:
            self.contract_description_1 = contract_description_1
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if sec_type is not None:
            self.sec_type = sec_type

    @property
    def server_id(self):
        """Gets the server_id of this InlineResponse20039.  # noqa: E501


        :return: The server_id of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this InlineResponse20039.


        :param server_id: The server_id of this InlineResponse20039.  # noqa: E501
        :type: str
        """

        self._server_id = server_id

    @property
    def column_name(self):
        """Gets the column_name of this InlineResponse20039.  # noqa: E501


        :return: The column_name of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this InlineResponse20039.


        :param column_name: The column_name of this InlineResponse20039.  # noqa: E501
        :type: str
        """

        self._column_name = column_name

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse20039.  # noqa: E501

        Underlying symbol  # noqa: E501

        :return: The symbol of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse20039.

        Underlying symbol  # noqa: E501

        :param symbol: The symbol of this InlineResponse20039.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def conidex(self):
        """Gets the conidex of this InlineResponse20039.  # noqa: E501

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :return: The conidex of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._conidex

    @conidex.setter
    def conidex(self, conidex):
        """Sets the conidex of this InlineResponse20039.

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :param conidex: The conidex of this InlineResponse20039.  # noqa: E501
        :type: str
        """

        self._conidex = conidex

    @property
    def con_id(self):
        """Gets the con_id of this InlineResponse20039.  # noqa: E501


        :return: The con_id of this InlineResponse20039.  # noqa: E501
        :rtype: float
        """
        return self._con_id

    @con_id.setter
    def con_id(self, con_id):
        """Sets the con_id of this InlineResponse20039.


        :param con_id: The con_id of this InlineResponse20039.  # noqa: E501
        :type: float
        """

        self._con_id = con_id

    @property
    def available_chart_periods(self):
        """Gets the available_chart_periods of this InlineResponse20039.  # noqa: E501

        List of available chart periods  # noqa: E501

        :return: The available_chart_periods of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._available_chart_periods

    @available_chart_periods.setter
    def available_chart_periods(self, available_chart_periods):
        """Sets the available_chart_periods of this InlineResponse20039.

        List of available chart periods  # noqa: E501

        :param available_chart_periods: The available_chart_periods of this InlineResponse20039.  # noqa: E501
        :type: str
        """

        self._available_chart_periods = available_chart_periods

    @property
    def company_name(self):
        """Gets the company_name of this InlineResponse20039.  # noqa: E501

        Contracts company name  # noqa: E501

        :return: The company_name of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this InlineResponse20039.

        Contracts company name  # noqa: E501

        :param company_name: The company_name of this InlineResponse20039.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def contract_description_1(self):
        """Gets the contract_description_1 of this InlineResponse20039.  # noqa: E501

        Format contract name  # noqa: E501

        :return: The contract_description_1 of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._contract_description_1

    @contract_description_1.setter
    def contract_description_1(self, contract_description_1):
        """Sets the contract_description_1 of this InlineResponse20039.

        Format contract name  # noqa: E501

        :param contract_description_1: The contract_description_1 of this InlineResponse20039.  # noqa: E501
        :type: str
        """

        self._contract_description_1 = contract_description_1

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this InlineResponse20039.  # noqa: E501


        :return: The listing_exchange of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this InlineResponse20039.


        :param listing_exchange: The listing_exchange of this InlineResponse20039.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def sec_type(self):
        """Gets the sec_type of this InlineResponse20039.  # noqa: E501


        :return: The sec_type of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this InlineResponse20039.


        :param sec_type: The sec_type of this InlineResponse20039.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20039, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20039):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
