# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecdefSearchBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'name': 'bool',
        'sec_type': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'name': 'name',
        'sec_type': 'secType'
    }

    def __init__(self, symbol=None, name=None, sec_type=None):  # noqa: E501
        """SecdefSearchBody - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._name = None
        self._sec_type = None
        self.discriminator = None
        self.symbol = symbol
        if name is not None:
            self.name = name
        if sec_type is not None:
            self.sec_type = sec_type

    @property
    def symbol(self):
        """Gets the symbol of this SecdefSearchBody.  # noqa: E501

        symbol or name to be searched  # noqa: E501

        :return: The symbol of this SecdefSearchBody.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this SecdefSearchBody.

        symbol or name to be searched  # noqa: E501

        :param symbol: The symbol of this SecdefSearchBody.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def name(self):
        """Gets the name of this SecdefSearchBody.  # noqa: E501

        should be true if the search is to be performed by name. false by default.  # noqa: E501

        :return: The name of this SecdefSearchBody.  # noqa: E501
        :rtype: bool
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecdefSearchBody.

        should be true if the search is to be performed by name. false by default.  # noqa: E501

        :param name: The name of this SecdefSearchBody.  # noqa: E501
        :type: bool
        """

        self._name = name

    @property
    def sec_type(self):
        """Gets the sec_type of this SecdefSearchBody.  # noqa: E501

        If search is done by name, only the assets provided in this field will be returned. Currently, only STK is supported.  # noqa: E501

        :return: The sec_type of this SecdefSearchBody.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this SecdefSearchBody.

        If search is done by name, only the assets provided in this field will be returned. Currently, only STK is supported.  # noqa: E501

        :param sec_type: The sec_type of this SecdefSearchBody.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecdefSearchBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecdefSearchBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
