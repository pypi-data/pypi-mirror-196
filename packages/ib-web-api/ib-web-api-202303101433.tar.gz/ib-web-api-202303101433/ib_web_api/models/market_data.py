# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarketData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_31': 'str',
        '_70': 'float',
        '_71': 'float',
        '_82': 'str',
        '_83': 'float',
        '_84': 'str',
        '_85': 'str',
        '_86': 'str',
        '_87': 'str',
        '_88': 'str',
        '_6509': 'str',
        '_7057': 'str',
        '_7058': 'str',
        '_7059': 'float',
        '_7068': 'str',
        '_7195': 'str',
        '_7196': 'str',
        '_7197': 'str',
        '_7198': 'str',
        '_7199': 'str',
        '_7200': 'str',
        '_7201': 'str',
        '_7202': 'str',
        '_7203': 'str',
        '_7204': 'str',
        '_7205': 'str',
        '_7206': 'str',
        '_7207': 'str',
        '_7208': 'str',
        '_7209': 'str',
        '_7210': 'str',
        '_7211': 'str',
        '_7212': 'str',
        '_7245': 'str',
        '_7246': 'str',
        '_7247': 'str',
        '_7248': 'str',
        '_7249': 'str',
        '_7263': 'str',
        '_7264': 'str',
        '_7265': 'str',
        '_7266': 'str',
        '_7267': 'str',
        '_7268': 'str',
        '_7269': 'str',
        '_7271': 'str',
        '_7272': 'str',
        '_7273': 'str',
        '_7274': 'str',
        '_7275': 'str',
        '_7276': 'str',
        '_7277': 'str',
        '_7282': 'str',
        '_7283': 'str',
        '_7284': 'str',
        '_7286': 'float',
        '_7287': 'str',
        '_7288': 'str',
        '_7289': 'str',
        '_7290': 'str',
        '_7293': 'str',
        '_7294': 'str',
        '_7295': 'float',
        '_7296': 'float',
        '_7331': 'str',
        '_7370': 'str',
        '_7371': 'str',
        '_7372': 'str',
        '_7635': 'str',
        '_7636': 'float',
        '_7637': 'str',
        '_7644': 'str',
        '_7674': 'str',
        '_7675': 'str',
        '_7676': 'str',
        '_7677': 'str',
        '_7681': 'str',
        '_7698': 'str',
        '_7699': 'str',
        '_7718': 'str',
        '_7720': 'str',
        '_7743': 'str',
        '_7761': 'str',
        '_7992': 'str',
        '_7993': 'str',
        '_7994': 'str',
        '_7995': 'str',
        'conid': 'int',
        'min_tick': 'float',
        'bbo_exchange': 'str',
        'has_delayed': 'bool',
        'size_min_tick': 'int',
        'best_eligible': 'int',
        'best_bid_exch': 'int',
        'best_ask_exch': 'int',
        'pre_open_bid': 'int',
        'last_attribs': 'int',
        'timestamp_base': 'int',
        'timestamp_delta': 'int',
        'last_exch': 'int',
        'close_attribs': 'int'
    }

    attribute_map = {
        '_31': '31',
        '_70': '70',
        '_71': '71',
        '_82': '82',
        '_83': '83',
        '_84': '84',
        '_85': '85',
        '_86': '86',
        '_87': '87',
        '_88': '88',
        '_6509': '6509',
        '_7057': '7057',
        '_7058': '7058',
        '_7059': '7059',
        '_7068': '7068',
        '_7195': '7195',
        '_7196': '7196',
        '_7197': '7197',
        '_7198': '7198',
        '_7199': '7199',
        '_7200': '7200',
        '_7201': '7201',
        '_7202': '7202',
        '_7203': '7203',
        '_7204': '7204',
        '_7205': '7205',
        '_7206': '7206',
        '_7207': '7207',
        '_7208': '7208',
        '_7209': '7209',
        '_7210': '7210',
        '_7211': '7211',
        '_7212': '7212',
        '_7245': '7245',
        '_7246': '7246',
        '_7247': '7247',
        '_7248': '7248',
        '_7249': '7249',
        '_7263': '7263',
        '_7264': '7264',
        '_7265': '7265',
        '_7266': '7266',
        '_7267': '7267',
        '_7268': '7268',
        '_7269': '7269',
        '_7271': '7271',
        '_7272': '7272',
        '_7273': '7273',
        '_7274': '7274',
        '_7275': '7275',
        '_7276': '7276',
        '_7277': '7277',
        '_7282': '7282',
        '_7283': '7283',
        '_7284': '7284',
        '_7286': '7286',
        '_7287': '7287',
        '_7288': '7288',
        '_7289': '7289',
        '_7290': '7290',
        '_7293': '7293',
        '_7294': '7294',
        '_7295': '7295',
        '_7296': '7296',
        '_7331': '7331',
        '_7370': '7370',
        '_7371': '7371',
        '_7372': '7372',
        '_7635': '7635',
        '_7636': '7636',
        '_7637': '7637',
        '_7644': '7644',
        '_7674': '7674',
        '_7675': '7675',
        '_7676': '7676',
        '_7677': '7677',
        '_7681': '7681',
        '_7698': '7698',
        '_7699': '7699',
        '_7718': '7718',
        '_7720': '7720',
        '_7743': '7743',
        '_7761': '7761',
        '_7992': '7992',
        '_7993': '7993',
        '_7994': '7994',
        '_7995': '7995',
        'conid': 'conid',
        'min_tick': 'minTick',
        'bbo_exchange': 'BboExchange',
        'has_delayed': 'HasDelayed',
        'size_min_tick': 'sizeMinTick',
        'best_eligible': 'BestEligible',
        'best_bid_exch': 'BestBidExch',
        'best_ask_exch': 'BestAskExch',
        'pre_open_bid': 'PreOpenBid',
        'last_attribs': 'LastAttribs',
        'timestamp_base': 'TimestampBase',
        'timestamp_delta': 'TimestampDelta',
        'last_exch': 'LastExch',
        'close_attribs': 'CloseAttribs'
    }

    def __init__(self, _31=None, _70=None, _71=None, _82=None, _83=None, _84=None, _85=None, _86=None, _87=None, _88=None, _6509=None, _7057=None, _7058=None, _7059=None, _7068=None, _7195=None, _7196=None, _7197=None, _7198=None, _7199=None, _7200=None, _7201=None, _7202=None, _7203=None, _7204=None, _7205=None, _7206=None, _7207=None, _7208=None, _7209=None, _7210=None, _7211=None, _7212=None, _7245=None, _7246=None, _7247=None, _7248=None, _7249=None, _7263=None, _7264=None, _7265=None, _7266=None, _7267=None, _7268=None, _7269=None, _7271=None, _7272=None, _7273=None, _7274=None, _7275=None, _7276=None, _7277=None, _7282=None, _7283=None, _7284=None, _7286=None, _7287=None, _7288=None, _7289=None, _7290=None, _7293=None, _7294=None, _7295=None, _7296=None, _7331=None, _7370=None, _7371=None, _7372=None, _7635=None, _7636=None, _7637=None, _7644=None, _7674=None, _7675=None, _7676=None, _7677=None, _7681=None, _7698=None, _7699=None, _7718=None, _7720=None, _7743=None, _7761=None, _7992=None, _7993=None, _7994=None, _7995=None, conid=None, min_tick=None, bbo_exchange=None, has_delayed=None, size_min_tick=None, best_eligible=None, best_bid_exch=None, best_ask_exch=None, pre_open_bid=None, last_attribs=None, timestamp_base=None, timestamp_delta=None, last_exch=None, close_attribs=None):  # noqa: E501
        """MarketData - a model defined in Swagger"""  # noqa: E501
        self.__31 = None
        self.__70 = None
        self.__71 = None
        self.__82 = None
        self.__83 = None
        self.__84 = None
        self.__85 = None
        self.__86 = None
        self.__87 = None
        self.__88 = None
        self.__6509 = None
        self.__7057 = None
        self.__7058 = None
        self.__7059 = None
        self.__7068 = None
        self.__7195 = None
        self.__7196 = None
        self.__7197 = None
        self.__7198 = None
        self.__7199 = None
        self.__7200 = None
        self.__7201 = None
        self.__7202 = None
        self.__7203 = None
        self.__7204 = None
        self.__7205 = None
        self.__7206 = None
        self.__7207 = None
        self.__7208 = None
        self.__7209 = None
        self.__7210 = None
        self.__7211 = None
        self.__7212 = None
        self.__7245 = None
        self.__7246 = None
        self.__7247 = None
        self.__7248 = None
        self.__7249 = None
        self.__7263 = None
        self.__7264 = None
        self.__7265 = None
        self.__7266 = None
        self.__7267 = None
        self.__7268 = None
        self.__7269 = None
        self.__7271 = None
        self.__7272 = None
        self.__7273 = None
        self.__7274 = None
        self.__7275 = None
        self.__7276 = None
        self.__7277 = None
        self.__7282 = None
        self.__7283 = None
        self.__7284 = None
        self.__7286 = None
        self.__7287 = None
        self.__7288 = None
        self.__7289 = None
        self.__7290 = None
        self.__7293 = None
        self.__7294 = None
        self.__7295 = None
        self.__7296 = None
        self.__7331 = None
        self.__7370 = None
        self.__7371 = None
        self.__7372 = None
        self.__7635 = None
        self.__7636 = None
        self.__7637 = None
        self.__7644 = None
        self.__7674 = None
        self.__7675 = None
        self.__7676 = None
        self.__7677 = None
        self.__7681 = None
        self.__7698 = None
        self.__7699 = None
        self.__7718 = None
        self.__7720 = None
        self.__7743 = None
        self.__7761 = None
        self.__7992 = None
        self.__7993 = None
        self.__7994 = None
        self.__7995 = None
        self._conid = None
        self._min_tick = None
        self._bbo_exchange = None
        self._has_delayed = None
        self._size_min_tick = None
        self._best_eligible = None
        self._best_bid_exch = None
        self._best_ask_exch = None
        self._pre_open_bid = None
        self._last_attribs = None
        self._timestamp_base = None
        self._timestamp_delta = None
        self._last_exch = None
        self._close_attribs = None
        self.discriminator = None
        if _31 is not None:
            self._31 = _31
        if _70 is not None:
            self._70 = _70
        if _71 is not None:
            self._71 = _71
        if _82 is not None:
            self._82 = _82
        if _83 is not None:
            self._83 = _83
        if _84 is not None:
            self._84 = _84
        if _85 is not None:
            self._85 = _85
        if _86 is not None:
            self._86 = _86
        if _87 is not None:
            self._87 = _87
        if _88 is not None:
            self._88 = _88
        if _6509 is not None:
            self._6509 = _6509
        if _7057 is not None:
            self._7057 = _7057
        if _7058 is not None:
            self._7058 = _7058
        if _7059 is not None:
            self._7059 = _7059
        if _7068 is not None:
            self._7068 = _7068
        if _7195 is not None:
            self._7195 = _7195
        if _7196 is not None:
            self._7196 = _7196
        if _7197 is not None:
            self._7197 = _7197
        if _7198 is not None:
            self._7198 = _7198
        if _7199 is not None:
            self._7199 = _7199
        if _7200 is not None:
            self._7200 = _7200
        if _7201 is not None:
            self._7201 = _7201
        if _7202 is not None:
            self._7202 = _7202
        if _7203 is not None:
            self._7203 = _7203
        if _7204 is not None:
            self._7204 = _7204
        if _7205 is not None:
            self._7205 = _7205
        if _7206 is not None:
            self._7206 = _7206
        if _7207 is not None:
            self._7207 = _7207
        if _7208 is not None:
            self._7208 = _7208
        if _7209 is not None:
            self._7209 = _7209
        if _7210 is not None:
            self._7210 = _7210
        if _7211 is not None:
            self._7211 = _7211
        if _7212 is not None:
            self._7212 = _7212
        if _7245 is not None:
            self._7245 = _7245
        if _7246 is not None:
            self._7246 = _7246
        if _7247 is not None:
            self._7247 = _7247
        if _7248 is not None:
            self._7248 = _7248
        if _7249 is not None:
            self._7249 = _7249
        if _7263 is not None:
            self._7263 = _7263
        if _7264 is not None:
            self._7264 = _7264
        if _7265 is not None:
            self._7265 = _7265
        if _7266 is not None:
            self._7266 = _7266
        if _7267 is not None:
            self._7267 = _7267
        if _7268 is not None:
            self._7268 = _7268
        if _7269 is not None:
            self._7269 = _7269
        if _7271 is not None:
            self._7271 = _7271
        if _7272 is not None:
            self._7272 = _7272
        if _7273 is not None:
            self._7273 = _7273
        if _7274 is not None:
            self._7274 = _7274
        if _7275 is not None:
            self._7275 = _7275
        if _7276 is not None:
            self._7276 = _7276
        if _7277 is not None:
            self._7277 = _7277
        if _7282 is not None:
            self._7282 = _7282
        if _7283 is not None:
            self._7283 = _7283
        if _7284 is not None:
            self._7284 = _7284
        if _7286 is not None:
            self._7286 = _7286
        if _7287 is not None:
            self._7287 = _7287
        if _7288 is not None:
            self._7288 = _7288
        if _7289 is not None:
            self._7289 = _7289
        if _7290 is not None:
            self._7290 = _7290
        if _7293 is not None:
            self._7293 = _7293
        if _7294 is not None:
            self._7294 = _7294
        if _7295 is not None:
            self._7295 = _7295
        if _7296 is not None:
            self._7296 = _7296
        if _7331 is not None:
            self._7331 = _7331
        if _7370 is not None:
            self._7370 = _7370
        if _7371 is not None:
            self._7371 = _7371
        if _7372 is not None:
            self._7372 = _7372
        if _7635 is not None:
            self._7635 = _7635
        if _7636 is not None:
            self._7636 = _7636
        if _7637 is not None:
            self._7637 = _7637
        if _7644 is not None:
            self._7644 = _7644
        if _7674 is not None:
            self._7674 = _7674
        if _7675 is not None:
            self._7675 = _7675
        if _7676 is not None:
            self._7676 = _7676
        if _7677 is not None:
            self._7677 = _7677
        if _7681 is not None:
            self._7681 = _7681
        if _7698 is not None:
            self._7698 = _7698
        if _7699 is not None:
            self._7699 = _7699
        if _7718 is not None:
            self._7718 = _7718
        if _7720 is not None:
            self._7720 = _7720
        if _7743 is not None:
            self._7743 = _7743
        if _7761 is not None:
            self._7761 = _7761
        if _7992 is not None:
            self._7992 = _7992
        if _7993 is not None:
            self._7993 = _7993
        if _7994 is not None:
            self._7994 = _7994
        if _7995 is not None:
            self._7995 = _7995
        if conid is not None:
            self.conid = conid
        if min_tick is not None:
            self.min_tick = min_tick
        if bbo_exchange is not None:
            self.bbo_exchange = bbo_exchange
        if has_delayed is not None:
            self.has_delayed = has_delayed
        if size_min_tick is not None:
            self.size_min_tick = size_min_tick
        if best_eligible is not None:
            self.best_eligible = best_eligible
        if best_bid_exch is not None:
            self.best_bid_exch = best_bid_exch
        if best_ask_exch is not None:
            self.best_ask_exch = best_ask_exch
        if pre_open_bid is not None:
            self.pre_open_bid = pre_open_bid
        if last_attribs is not None:
            self.last_attribs = last_attribs
        if timestamp_base is not None:
            self.timestamp_base = timestamp_base
        if timestamp_delta is not None:
            self.timestamp_delta = timestamp_delta
        if last_exch is not None:
            self.last_exch = last_exch
        if close_attribs is not None:
            self.close_attribs = close_attribs

    @property
    def _31(self):
        """Gets the _31 of this MarketData.  # noqa: E501

        Last Price - The last price at which the contract traded. May contain one of the following prefixes:   * C - Previous day's closing price.   * H - Trading has halted.   # noqa: E501

        :return: The _31 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__31

    @_31.setter
    def _31(self, _31):
        """Sets the _31 of this MarketData.

        Last Price - The last price at which the contract traded. May contain one of the following prefixes:   * C - Previous day's closing price.   * H - Trading has halted.   # noqa: E501

        :param _31: The _31 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__31 = _31

    @property
    def _70(self):
        """Gets the _70 of this MarketData.  # noqa: E501

        High - Current day high price  # noqa: E501

        :return: The _70 of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self.__70

    @_70.setter
    def _70(self, _70):
        """Sets the _70 of this MarketData.

        High - Current day high price  # noqa: E501

        :param _70: The _70 of this MarketData.  # noqa: E501
        :type: float
        """

        self.__70 = _70

    @property
    def _71(self):
        """Gets the _71 of this MarketData.  # noqa: E501

        Low - Current day low price  # noqa: E501

        :return: The _71 of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self.__71

    @_71.setter
    def _71(self, _71):
        """Sets the _71 of this MarketData.

        Low - Current day low price  # noqa: E501

        :param _71: The _71 of this MarketData.  # noqa: E501
        :type: float
        """

        self.__71 = _71

    @property
    def _82(self):
        """Gets the _82 of this MarketData.  # noqa: E501

        Change - The difference between the last price and the close on the previous trading day  # noqa: E501

        :return: The _82 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__82

    @_82.setter
    def _82(self, _82):
        """Sets the _82 of this MarketData.

        Change - The difference between the last price and the close on the previous trading day  # noqa: E501

        :param _82: The _82 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__82 = _82

    @property
    def _83(self):
        """Gets the _83 of this MarketData.  # noqa: E501

        Change % - The difference between the last price and the close on the previous trading day in percentage.  # noqa: E501

        :return: The _83 of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self.__83

    @_83.setter
    def _83(self, _83):
        """Sets the _83 of this MarketData.

        Change % - The difference between the last price and the close on the previous trading day in percentage.  # noqa: E501

        :param _83: The _83 of this MarketData.  # noqa: E501
        :type: float
        """

        self.__83 = _83

    @property
    def _84(self):
        """Gets the _84 of this MarketData.  # noqa: E501

        Bid Price - The highest-priced bid on the contract.  # noqa: E501

        :return: The _84 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__84

    @_84.setter
    def _84(self, _84):
        """Sets the _84 of this MarketData.

        Bid Price - The highest-priced bid on the contract.  # noqa: E501

        :param _84: The _84 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__84 = _84

    @property
    def _85(self):
        """Gets the _85 of this MarketData.  # noqa: E501

        Ask Size - The number of contracts or shares offered at the ask price. For US stocks, the number displayed is divided by 100.  # noqa: E501

        :return: The _85 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__85

    @_85.setter
    def _85(self, _85):
        """Sets the _85 of this MarketData.

        Ask Size - The number of contracts or shares offered at the ask price. For US stocks, the number displayed is divided by 100.  # noqa: E501

        :param _85: The _85 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__85 = _85

    @property
    def _86(self):
        """Gets the _86 of this MarketData.  # noqa: E501

        Ask Price - The lowest-priced offer on the contract.  # noqa: E501

        :return: The _86 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__86

    @_86.setter
    def _86(self, _86):
        """Sets the _86 of this MarketData.

        Ask Price - The lowest-priced offer on the contract.  # noqa: E501

        :param _86: The _86 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__86 = _86

    @property
    def _87(self):
        """Gets the _87 of this MarketData.  # noqa: E501

        Volume - Volume for the day, formatted with 'K' for thousands or 'M' for millions. For higher precision volume refer to field 7762.  # noqa: E501

        :return: The _87 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__87

    @_87.setter
    def _87(self, _87):
        """Sets the _87 of this MarketData.

        Volume - Volume for the day, formatted with 'K' for thousands or 'M' for millions. For higher precision volume refer to field 7762.  # noqa: E501

        :param _87: The _87 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__87 = _87

    @property
    def _88(self):
        """Gets the _88 of this MarketData.  # noqa: E501

        Bid Size - The number of contracts or shares bid for at the bid price. For US stocks, the number displayed is divided by 100.  # noqa: E501

        :return: The _88 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__88

    @_88.setter
    def _88(self, _88):
        """Sets the _88 of this MarketData.

        Bid Size - The number of contracts or shares bid for at the bid price. For US stocks, the number displayed is divided by 100.  # noqa: E501

        :param _88: The _88 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__88 = _88

    @property
    def _6509(self):
        """Gets the _6509 of this MarketData.  # noqa: E501

        Market Data Availability. The field may contain three chars. First char defines: R = RealTime, D = Delayed, Z = Frozen, Y = Frozen Delayed, N = Not Subscribed. Second char defines: P = Snapshot, p = Consolidated. Third char defines: B = Book   * RealTime - Data is relayed back in real time without delay, market data subscription(s) are required.   * Delayed - Data is relayed back 15-20 min delayed.   * Frozen - Last recorded data at market close, relayed back in real time.   * Frozen Delayed - Last recorded data at market close, relayed back delayed.   * Not Subscribed - User does not have the required market data subscription(s) to relay back either real time or delayed data.   * Snapshot - Snapshot request is available for contract.   * Consolidated - Market data is aggregated across multiple exchanges or venues.   * Book - Top of the book data is available for contract.   # noqa: E501

        :return: The _6509 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__6509

    @_6509.setter
    def _6509(self, _6509):
        """Sets the _6509 of this MarketData.

        Market Data Availability. The field may contain three chars. First char defines: R = RealTime, D = Delayed, Z = Frozen, Y = Frozen Delayed, N = Not Subscribed. Second char defines: P = Snapshot, p = Consolidated. Third char defines: B = Book   * RealTime - Data is relayed back in real time without delay, market data subscription(s) are required.   * Delayed - Data is relayed back 15-20 min delayed.   * Frozen - Last recorded data at market close, relayed back in real time.   * Frozen Delayed - Last recorded data at market close, relayed back delayed.   * Not Subscribed - User does not have the required market data subscription(s) to relay back either real time or delayed data.   * Snapshot - Snapshot request is available for contract.   * Consolidated - Market data is aggregated across multiple exchanges or venues.   * Book - Top of the book data is available for contract.   # noqa: E501

        :param _6509: The _6509 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__6509 = _6509

    @property
    def _7057(self):
        """Gets the _7057 of this MarketData.  # noqa: E501

        Ask Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY  # noqa: E501

        :return: The _7057 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7057

    @_7057.setter
    def _7057(self, _7057):
        """Sets the _7057 of this MarketData.

        Ask Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY  # noqa: E501

        :param _7057: The _7057 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7057 = _7057

    @property
    def _7058(self):
        """Gets the _7058 of this MarketData.  # noqa: E501

        Last Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY  # noqa: E501

        :return: The _7058 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7058

    @_7058.setter
    def _7058(self, _7058):
        """Sets the _7058 of this MarketData.

        Last Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY  # noqa: E501

        :param _7058: The _7058 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7058 = _7058

    @property
    def _7059(self):
        """Gets the _7059 of this MarketData.  # noqa: E501

        Last Size - The number of unites traded at the last price  # noqa: E501

        :return: The _7059 of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self.__7059

    @_7059.setter
    def _7059(self, _7059):
        """Sets the _7059 of this MarketData.

        Last Size - The number of unites traded at the last price  # noqa: E501

        :param _7059: The _7059 of this MarketData.  # noqa: E501
        :type: float
        """

        self.__7059 = _7059

    @property
    def _7068(self):
        """Gets the _7068 of this MarketData.  # noqa: E501

        Bid Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY  # noqa: E501

        :return: The _7068 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7068

    @_7068.setter
    def _7068(self, _7068):
        """Sets the _7068 of this MarketData.

        Bid Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY  # noqa: E501

        :param _7068: The _7068 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7068 = _7068

    @property
    def _7195(self):
        """Gets the _7195 of this MarketData.  # noqa: E501

        IV Rank  # noqa: E501

        :return: The _7195 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7195

    @_7195.setter
    def _7195(self, _7195):
        """Sets the _7195 of this MarketData.

        IV Rank  # noqa: E501

        :param _7195: The _7195 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7195 = _7195

    @property
    def _7196(self):
        """Gets the _7196 of this MarketData.  # noqa: E501

        IV Rank  # noqa: E501

        :return: The _7196 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7196

    @_7196.setter
    def _7196(self, _7196):
        """Sets the _7196 of this MarketData.

        IV Rank  # noqa: E501

        :param _7196: The _7196 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7196 = _7196

    @property
    def _7197(self):
        """Gets the _7197 of this MarketData.  # noqa: E501

        IV Rank  # noqa: E501

        :return: The _7197 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7197

    @_7197.setter
    def _7197(self, _7197):
        """Sets the _7197 of this MarketData.

        IV Rank  # noqa: E501

        :param _7197: The _7197 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7197 = _7197

    @property
    def _7198(self):
        """Gets the _7198 of this MarketData.  # noqa: E501

        IV Percentile  # noqa: E501

        :return: The _7198 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7198

    @_7198.setter
    def _7198(self, _7198):
        """Sets the _7198 of this MarketData.

        IV Percentile  # noqa: E501

        :param _7198: The _7198 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7198 = _7198

    @property
    def _7199(self):
        """Gets the _7199 of this MarketData.  # noqa: E501

        IV Percentile  # noqa: E501

        :return: The _7199 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7199

    @_7199.setter
    def _7199(self, _7199):
        """Sets the _7199 of this MarketData.

        IV Percentile  # noqa: E501

        :param _7199: The _7199 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7199 = _7199

    @property
    def _7200(self):
        """Gets the _7200 of this MarketData.  # noqa: E501

        IV Percentile  # noqa: E501

        :return: The _7200 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7200

    @_7200.setter
    def _7200(self, _7200):
        """Sets the _7200 of this MarketData.

        IV Percentile  # noqa: E501

        :param _7200: The _7200 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7200 = _7200

    @property
    def _7201(self):
        """Gets the _7201 of this MarketData.  # noqa: E501

        IV High Low  # noqa: E501

        :return: The _7201 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7201

    @_7201.setter
    def _7201(self, _7201):
        """Sets the _7201 of this MarketData.

        IV High Low  # noqa: E501

        :param _7201: The _7201 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7201 = _7201

    @property
    def _7202(self):
        """Gets the _7202 of this MarketData.  # noqa: E501

        IV High Low  # noqa: E501

        :return: The _7202 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7202

    @_7202.setter
    def _7202(self, _7202):
        """Sets the _7202 of this MarketData.

        IV High Low  # noqa: E501

        :param _7202: The _7202 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7202 = _7202

    @property
    def _7203(self):
        """Gets the _7203 of this MarketData.  # noqa: E501

        IV High Low  # noqa: E501

        :return: The _7203 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7203

    @_7203.setter
    def _7203(self, _7203):
        """Sets the _7203 of this MarketData.

        IV High Low  # noqa: E501

        :param _7203: The _7203 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7203 = _7203

    @property
    def _7204(self):
        """Gets the _7204 of this MarketData.  # noqa: E501

        IV High Low  # noqa: E501

        :return: The _7204 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7204

    @_7204.setter
    def _7204(self, _7204):
        """Sets the _7204 of this MarketData.

        IV High Low  # noqa: E501

        :param _7204: The _7204 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7204 = _7204

    @property
    def _7205(self):
        """Gets the _7205 of this MarketData.  # noqa: E501

        IV High Low  # noqa: E501

        :return: The _7205 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7205

    @_7205.setter
    def _7205(self, _7205):
        """Sets the _7205 of this MarketData.

        IV High Low  # noqa: E501

        :param _7205: The _7205 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7205 = _7205

    @property
    def _7206(self):
        """Gets the _7206 of this MarketData.  # noqa: E501

        IV High Low  # noqa: E501

        :return: The _7206 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7206

    @_7206.setter
    def _7206(self, _7206):
        """Sets the _7206 of this MarketData.

        IV High Low  # noqa: E501

        :param _7206: The _7206 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7206 = _7206

    @property
    def _7207(self):
        """Gets the _7207 of this MarketData.  # noqa: E501

        HV Rank  # noqa: E501

        :return: The _7207 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7207

    @_7207.setter
    def _7207(self, _7207):
        """Sets the _7207 of this MarketData.

        HV Rank  # noqa: E501

        :param _7207: The _7207 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7207 = _7207

    @property
    def _7208(self):
        """Gets the _7208 of this MarketData.  # noqa: E501

        HV Rank  # noqa: E501

        :return: The _7208 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7208

    @_7208.setter
    def _7208(self, _7208):
        """Sets the _7208 of this MarketData.

        HV Rank  # noqa: E501

        :param _7208: The _7208 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7208 = _7208

    @property
    def _7209(self):
        """Gets the _7209 of this MarketData.  # noqa: E501

        HV Rank  # noqa: E501

        :return: The _7209 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7209

    @_7209.setter
    def _7209(self, _7209):
        """Sets the _7209 of this MarketData.

        HV Rank  # noqa: E501

        :param _7209: The _7209 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7209 = _7209

    @property
    def _7210(self):
        """Gets the _7210 of this MarketData.  # noqa: E501

        HV Percentile  # noqa: E501

        :return: The _7210 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7210

    @_7210.setter
    def _7210(self, _7210):
        """Sets the _7210 of this MarketData.

        HV Percentile  # noqa: E501

        :param _7210: The _7210 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7210 = _7210

    @property
    def _7211(self):
        """Gets the _7211 of this MarketData.  # noqa: E501

        HV Percentile  # noqa: E501

        :return: The _7211 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7211

    @_7211.setter
    def _7211(self, _7211):
        """Sets the _7211 of this MarketData.

        HV Percentile  # noqa: E501

        :param _7211: The _7211 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7211 = _7211

    @property
    def _7212(self):
        """Gets the _7212 of this MarketData.  # noqa: E501

        HV Percentile  # noqa: E501

        :return: The _7212 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7212

    @_7212.setter
    def _7212(self, _7212):
        """Sets the _7212 of this MarketData.

        HV Percentile  # noqa: E501

        :param _7212: The _7212 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7212 = _7212

    @property
    def _7245(self):
        """Gets the _7245 of this MarketData.  # noqa: E501

        HV High Low  # noqa: E501

        :return: The _7245 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7245

    @_7245.setter
    def _7245(self, _7245):
        """Sets the _7245 of this MarketData.

        HV High Low  # noqa: E501

        :param _7245: The _7245 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7245 = _7245

    @property
    def _7246(self):
        """Gets the _7246 of this MarketData.  # noqa: E501

        HV High Low  # noqa: E501

        :return: The _7246 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7246

    @_7246.setter
    def _7246(self, _7246):
        """Sets the _7246 of this MarketData.

        HV High Low  # noqa: E501

        :param _7246: The _7246 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7246 = _7246

    @property
    def _7247(self):
        """Gets the _7247 of this MarketData.  # noqa: E501

        HV High Low  # noqa: E501

        :return: The _7247 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7247

    @_7247.setter
    def _7247(self, _7247):
        """Sets the _7247 of this MarketData.

        HV High Low  # noqa: E501

        :param _7247: The _7247 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7247 = _7247

    @property
    def _7248(self):
        """Gets the _7248 of this MarketData.  # noqa: E501

        HV High Low  # noqa: E501

        :return: The _7248 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7248

    @_7248.setter
    def _7248(self, _7248):
        """Sets the _7248 of this MarketData.

        HV High Low  # noqa: E501

        :param _7248: The _7248 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7248 = _7248

    @property
    def _7249(self):
        """Gets the _7249 of this MarketData.  # noqa: E501

        HV High Low  # noqa: E501

        :return: The _7249 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7249

    @_7249.setter
    def _7249(self, _7249):
        """Sets the _7249 of this MarketData.

        HV High Low  # noqa: E501

        :param _7249: The _7249 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7249 = _7249

    @property
    def _7263(self):
        """Gets the _7263 of this MarketData.  # noqa: E501

        HV High Low  # noqa: E501

        :return: The _7263 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7263

    @_7263.setter
    def _7263(self, _7263):
        """Sets the _7263 of this MarketData.

        HV High Low  # noqa: E501

        :param _7263: The _7263 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7263 = _7263

    @property
    def _7264(self):
        """Gets the _7264 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7264 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7264

    @_7264.setter
    def _7264(self, _7264):
        """Sets the _7264 of this MarketData.

        ESG  # noqa: E501

        :param _7264: The _7264 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7264 = _7264

    @property
    def _7265(self):
        """Gets the _7265 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7265 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7265

    @_7265.setter
    def _7265(self, _7265):
        """Sets the _7265 of this MarketData.

        ESG  # noqa: E501

        :param _7265: The _7265 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7265 = _7265

    @property
    def _7266(self):
        """Gets the _7266 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7266 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7266

    @_7266.setter
    def _7266(self, _7266):
        """Sets the _7266 of this MarketData.

        ESG  # noqa: E501

        :param _7266: The _7266 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7266 = _7266

    @property
    def _7267(self):
        """Gets the _7267 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7267 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7267

    @_7267.setter
    def _7267(self, _7267):
        """Sets the _7267 of this MarketData.

        ESG  # noqa: E501

        :param _7267: The _7267 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7267 = _7267

    @property
    def _7268(self):
        """Gets the _7268 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7268 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7268

    @_7268.setter
    def _7268(self, _7268):
        """Sets the _7268 of this MarketData.

        ESG  # noqa: E501

        :param _7268: The _7268 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7268 = _7268

    @property
    def _7269(self):
        """Gets the _7269 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7269 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7269

    @_7269.setter
    def _7269(self, _7269):
        """Sets the _7269 of this MarketData.

        ESG  # noqa: E501

        :param _7269: The _7269 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7269 = _7269

    @property
    def _7271(self):
        """Gets the _7271 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7271 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7271

    @_7271.setter
    def _7271(self, _7271):
        """Sets the _7271 of this MarketData.

        ESG  # noqa: E501

        :param _7271: The _7271 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7271 = _7271

    @property
    def _7272(self):
        """Gets the _7272 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7272 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7272

    @_7272.setter
    def _7272(self, _7272):
        """Sets the _7272 of this MarketData.

        ESG  # noqa: E501

        :param _7272: The _7272 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7272 = _7272

    @property
    def _7273(self):
        """Gets the _7273 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7273 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7273

    @_7273.setter
    def _7273(self, _7273):
        """Sets the _7273 of this MarketData.

        ESG  # noqa: E501

        :param _7273: The _7273 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7273 = _7273

    @property
    def _7274(self):
        """Gets the _7274 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7274 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7274

    @_7274.setter
    def _7274(self, _7274):
        """Sets the _7274 of this MarketData.

        ESG  # noqa: E501

        :param _7274: The _7274 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7274 = _7274

    @property
    def _7275(self):
        """Gets the _7275 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7275 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7275

    @_7275.setter
    def _7275(self, _7275):
        """Sets the _7275 of this MarketData.

        ESG  # noqa: E501

        :param _7275: The _7275 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7275 = _7275

    @property
    def _7276(self):
        """Gets the _7276 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7276 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7276

    @_7276.setter
    def _7276(self, _7276):
        """Sets the _7276 of this MarketData.

        ESG  # noqa: E501

        :param _7276: The _7276 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7276 = _7276

    @property
    def _7277(self):
        """Gets the _7277 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7277 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7277

    @_7277.setter
    def _7277(self, _7277):
        """Sets the _7277 of this MarketData.

        ESG  # noqa: E501

        :param _7277: The _7277 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7277 = _7277

    @property
    def _7282(self):
        """Gets the _7282 of this MarketData.  # noqa: E501

        Average Volume - The average daily trading volume over 90 days.  # noqa: E501

        :return: The _7282 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7282

    @_7282.setter
    def _7282(self, _7282):
        """Sets the _7282 of this MarketData.

        Average Volume - The average daily trading volume over 90 days.  # noqa: E501

        :param _7282: The _7282 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7282 = _7282

    @property
    def _7283(self):
        """Gets the _7283 of this MarketData.  # noqa: E501

        Option Implied Vol. % - A prediction of how volatile an underlying will be in the future. At the market volatility estimated for a maturity thirty calendar days forward of the current trading day, and based on option prices from two consecutive expiration months.        # noqa: E501

        :return: The _7283 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7283

    @_7283.setter
    def _7283(self, _7283):
        """Sets the _7283 of this MarketData.

        Option Implied Vol. % - A prediction of how volatile an underlying will be in the future. At the market volatility estimated for a maturity thirty calendar days forward of the current trading day, and based on option prices from two consecutive expiration months.        # noqa: E501

        :param _7283: The _7283 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7283 = _7283

    @property
    def _7284(self):
        """Gets the _7284 of this MarketData.  # noqa: E501

        Historic Volume (30d)  # noqa: E501

        :return: The _7284 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7284

    @_7284.setter
    def _7284(self, _7284):
        """Sets the _7284 of this MarketData.

        Historic Volume (30d)  # noqa: E501

        :param _7284: The _7284 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7284 = _7284

    @property
    def _7286(self):
        """Gets the _7286 of this MarketData.  # noqa: E501

        Dividend Amount - Displays the amount of the next dividend.  # noqa: E501

        :return: The _7286 of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self.__7286

    @_7286.setter
    def _7286(self, _7286):
        """Sets the _7286 of this MarketData.

        Dividend Amount - Displays the amount of the next dividend.  # noqa: E501

        :param _7286: The _7286 of this MarketData.  # noqa: E501
        :type: float
        """

        self.__7286 = _7286

    @property
    def _7287(self):
        """Gets the _7287 of this MarketData.  # noqa: E501

        Dividend Yield % - This value is the toal of the expected dividend payments over the next twelve months per share divided by the Current Price and is expressed as a percentage. For derivatives, this displays the total of the expected dividend payments over the expiry date.   # noqa: E501

        :return: The _7287 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7287

    @_7287.setter
    def _7287(self, _7287):
        """Sets the _7287 of this MarketData.

        Dividend Yield % - This value is the toal of the expected dividend payments over the next twelve months per share divided by the Current Price and is expressed as a percentage. For derivatives, this displays the total of the expected dividend payments over the expiry date.   # noqa: E501

        :param _7287: The _7287 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7287 = _7287

    @property
    def _7288(self):
        """Gets the _7288 of this MarketData.  # noqa: E501

        Ex-date of the dividend  # noqa: E501

        :return: The _7288 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7288

    @_7288.setter
    def _7288(self, _7288):
        """Sets the _7288 of this MarketData.

        Ex-date of the dividend  # noqa: E501

        :param _7288: The _7288 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7288 = _7288

    @property
    def _7289(self):
        """Gets the _7289 of this MarketData.  # noqa: E501

        Market Cap  # noqa: E501

        :return: The _7289 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7289

    @_7289.setter
    def _7289(self, _7289):
        """Sets the _7289 of this MarketData.

        Market Cap  # noqa: E501

        :param _7289: The _7289 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7289 = _7289

    @property
    def _7290(self):
        """Gets the _7290 of this MarketData.  # noqa: E501

        P/E  # noqa: E501

        :return: The _7290 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7290

    @_7290.setter
    def _7290(self, _7290):
        """Sets the _7290 of this MarketData.

        P/E  # noqa: E501

        :param _7290: The _7290 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7290 = _7290

    @property
    def _7293(self):
        """Gets the _7293 of this MarketData.  # noqa: E501

        52 Week High - The highest price for the past 52 weeks.  # noqa: E501

        :return: The _7293 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7293

    @_7293.setter
    def _7293(self, _7293):
        """Sets the _7293 of this MarketData.

        52 Week High - The highest price for the past 52 weeks.  # noqa: E501

        :param _7293: The _7293 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7293 = _7293

    @property
    def _7294(self):
        """Gets the _7294 of this MarketData.  # noqa: E501

        52 Week Low - The lowest price for the past 52 weeks.  # noqa: E501

        :return: The _7294 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7294

    @_7294.setter
    def _7294(self, _7294):
        """Sets the _7294 of this MarketData.

        52 Week Low - The lowest price for the past 52 weeks.  # noqa: E501

        :param _7294: The _7294 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7294 = _7294

    @property
    def _7295(self):
        """Gets the _7295 of this MarketData.  # noqa: E501

        Open - Today's opening price.  # noqa: E501

        :return: The _7295 of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self.__7295

    @_7295.setter
    def _7295(self, _7295):
        """Sets the _7295 of this MarketData.

        Open - Today's opening price.  # noqa: E501

        :param _7295: The _7295 of this MarketData.  # noqa: E501
        :type: float
        """

        self.__7295 = _7295

    @property
    def _7296(self):
        """Gets the _7296 of this MarketData.  # noqa: E501

        Close - Today's closing price.  # noqa: E501

        :return: The _7296 of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self.__7296

    @_7296.setter
    def _7296(self, _7296):
        """Sets the _7296 of this MarketData.

        Close - Today's closing price.  # noqa: E501

        :param _7296: The _7296 of this MarketData.  # noqa: E501
        :type: float
        """

        self.__7296 = _7296

    @property
    def _7331(self):
        """Gets the _7331 of this MarketData.  # noqa: E501

        Reuters Fundamentals  # noqa: E501

        :return: The _7331 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7331

    @_7331.setter
    def _7331(self, _7331):
        """Sets the _7331 of this MarketData.

        Reuters Fundamentals  # noqa: E501

        :param _7331: The _7331 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7331 = _7331

    @property
    def _7370(self):
        """Gets the _7370 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7370 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7370

    @_7370.setter
    def _7370(self, _7370):
        """Sets the _7370 of this MarketData.

        ESG  # noqa: E501

        :param _7370: The _7370 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7370 = _7370

    @property
    def _7371(self):
        """Gets the _7371 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7371 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7371

    @_7371.setter
    def _7371(self, _7371):
        """Sets the _7371 of this MarketData.

        ESG  # noqa: E501

        :param _7371: The _7371 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7371 = _7371

    @property
    def _7372(self):
        """Gets the _7372 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7372 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7372

    @_7372.setter
    def _7372(self, _7372):
        """Sets the _7372 of this MarketData.

        ESG  # noqa: E501

        :param _7372: The _7372 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7372 = _7372

    @property
    def _7635(self):
        """Gets the _7635 of this MarketData.  # noqa: E501

        Mark - The mark price is, the ask price if ask is less than last price, the bid price if bid is more than the last price, otherwise it's equal to last price  # noqa: E501

        :return: The _7635 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7635

    @_7635.setter
    def _7635(self, _7635):
        """Sets the _7635 of this MarketData.

        Mark - The mark price is, the ask price if ask is less than last price, the bid price if bid is more than the last price, otherwise it's equal to last price  # noqa: E501

        :param _7635: The _7635 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7635 = _7635

    @property
    def _7636(self):
        """Gets the _7636 of this MarketData.  # noqa: E501

        shortable invetory  # noqa: E501

        :return: The _7636 of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self.__7636

    @_7636.setter
    def _7636(self, _7636):
        """Sets the _7636 of this MarketData.

        shortable invetory  # noqa: E501

        :param _7636: The _7636 of this MarketData.  # noqa: E501
        :type: float
        """

        self.__7636 = _7636

    @property
    def _7637(self):
        """Gets the _7637 of this MarketData.  # noqa: E501

        Fee rebate rate  # noqa: E501

        :return: The _7637 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7637

    @_7637.setter
    def _7637(self, _7637):
        """Sets the _7637 of this MarketData.

        Fee rebate rate  # noqa: E501

        :param _7637: The _7637 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7637 = _7637

    @property
    def _7644(self):
        """Gets the _7644 of this MarketData.  # noqa: E501

        Shortable - Describes the level of difficulty with which the security can be sold short.  # noqa: E501

        :return: The _7644 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7644

    @_7644.setter
    def _7644(self, _7644):
        """Sets the _7644 of this MarketData.

        Shortable - Describes the level of difficulty with which the security can be sold short.  # noqa: E501

        :param _7644: The _7644 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7644 = _7644

    @property
    def _7674(self):
        """Gets the _7674 of this MarketData.  # noqa: E501

        EMA(200) - Exponential moving average (N=200).  # noqa: E501

        :return: The _7674 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7674

    @_7674.setter
    def _7674(self, _7674):
        """Sets the _7674 of this MarketData.

        EMA(200) - Exponential moving average (N=200).  # noqa: E501

        :param _7674: The _7674 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7674 = _7674

    @property
    def _7675(self):
        """Gets the _7675 of this MarketData.  # noqa: E501

        EMA(100) - Exponential moving average (N=100).  # noqa: E501

        :return: The _7675 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7675

    @_7675.setter
    def _7675(self, _7675):
        """Sets the _7675 of this MarketData.

        EMA(100) - Exponential moving average (N=100).  # noqa: E501

        :param _7675: The _7675 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7675 = _7675

    @property
    def _7676(self):
        """Gets the _7676 of this MarketData.  # noqa: E501

        EMA(50) - Exponential moving average (N=50).  # noqa: E501

        :return: The _7676 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7676

    @_7676.setter
    def _7676(self, _7676):
        """Sets the _7676 of this MarketData.

        EMA(50) - Exponential moving average (N=50).  # noqa: E501

        :param _7676: The _7676 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7676 = _7676

    @property
    def _7677(self):
        """Gets the _7677 of this MarketData.  # noqa: E501

        EMA(20) - Exponential moving average (N=20).  # noqa: E501

        :return: The _7677 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7677

    @_7677.setter
    def _7677(self, _7677):
        """Sets the _7677 of this MarketData.

        EMA(20) - Exponential moving average (N=20).  # noqa: E501

        :param _7677: The _7677 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7677 = _7677

    @property
    def _7681(self):
        """Gets the _7681 of this MarketData.  # noqa: E501

        Price/EMA(20) - Price to Exponential moving average (N=20) ratio -1, displayed in percents.  # noqa: E501

        :return: The _7681 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7681

    @_7681.setter
    def _7681(self, _7681):
        """Sets the _7681 of this MarketData.

        Price/EMA(20) - Price to Exponential moving average (N=20) ratio -1, displayed in percents.  # noqa: E501

        :param _7681: The _7681 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7681 = _7681

    @property
    def _7698(self):
        """Gets the _7698 of this MarketData.  # noqa: E501

        Last Yield - Implied yield of the bond if it is purchased at the current last price. Last yield is calculated using the Last price on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.   # noqa: E501

        :return: The _7698 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7698

    @_7698.setter
    def _7698(self, _7698):
        """Sets the _7698 of this MarketData.

        Last Yield - Implied yield of the bond if it is purchased at the current last price. Last yield is calculated using the Last price on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.   # noqa: E501

        :param _7698: The _7698 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7698 = _7698

    @property
    def _7699(self):
        """Gets the _7699 of this MarketData.  # noqa: E501

        Bid Yield - Implied yield of the bond if it is purchased at the current bid price. Bid yield is calculated using the Ask on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.   # noqa: E501

        :return: The _7699 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7699

    @_7699.setter
    def _7699(self, _7699):
        """Sets the _7699 of this MarketData.

        Bid Yield - Implied yield of the bond if it is purchased at the current bid price. Bid yield is calculated using the Ask on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.   # noqa: E501

        :param _7699: The _7699 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7699 = _7699

    @property
    def _7718(self):
        """Gets the _7718 of this MarketData.  # noqa: E501

        Beta - Beta is against standard index.  # noqa: E501

        :return: The _7718 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7718

    @_7718.setter
    def _7718(self, _7718):
        """Sets the _7718 of this MarketData.

        Beta - Beta is against standard index.  # noqa: E501

        :param _7718: The _7718 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7718 = _7718

    @property
    def _7720(self):
        """Gets the _7720 of this MarketData.  # noqa: E501

        Ask Yield - Implied yield of the bond if it is purchased at the current offer. Ask yield is calculated using the Bid on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.   # noqa: E501

        :return: The _7720 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7720

    @_7720.setter
    def _7720(self, _7720):
        """Sets the _7720 of this MarketData.

        Ask Yield - Implied yield of the bond if it is purchased at the current offer. Ask yield is calculated using the Bid on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.   # noqa: E501

        :param _7720: The _7720 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7720 = _7720

    @property
    def _7743(self):
        """Gets the _7743 of this MarketData.  # noqa: E501

        Reuters Fundamentals  # noqa: E501

        :return: The _7743 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7743

    @_7743.setter
    def _7743(self, _7743):
        """Sets the _7743 of this MarketData.

        Reuters Fundamentals  # noqa: E501

        :param _7743: The _7743 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7743 = _7743

    @property
    def _7761(self):
        """Gets the _7761 of this MarketData.  # noqa: E501

        ESG  # noqa: E501

        :return: The _7761 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7761

    @_7761.setter
    def _7761(self, _7761):
        """Sets the _7761 of this MarketData.

        ESG  # noqa: E501

        :param _7761: The _7761 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7761 = _7761

    @property
    def _7992(self):
        """Gets the _7992 of this MarketData.  # noqa: E501

        26 Week High - The highest price for the past 26 weeks.  # noqa: E501

        :return: The _7992 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7992

    @_7992.setter
    def _7992(self, _7992):
        """Sets the _7992 of this MarketData.

        26 Week High - The highest price for the past 26 weeks.  # noqa: E501

        :param _7992: The _7992 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7992 = _7992

    @property
    def _7993(self):
        """Gets the _7993 of this MarketData.  # noqa: E501

        26 Week Low - The lowest price for the past 26 weeks.  # noqa: E501

        :return: The _7993 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7993

    @_7993.setter
    def _7993(self, _7993):
        """Sets the _7993 of this MarketData.

        26 Week Low - The lowest price for the past 26 weeks.  # noqa: E501

        :param _7993: The _7993 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7993 = _7993

    @property
    def _7994(self):
        """Gets the _7994 of this MarketData.  # noqa: E501

        13 Week High - The highest price for the past 13 weeks.  # noqa: E501

        :return: The _7994 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7994

    @_7994.setter
    def _7994(self, _7994):
        """Sets the _7994 of this MarketData.

        13 Week High - The highest price for the past 13 weeks.  # noqa: E501

        :param _7994: The _7994 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7994 = _7994

    @property
    def _7995(self):
        """Gets the _7995 of this MarketData.  # noqa: E501

        13 Week Low - The lowest price for the past 13 weeks.  # noqa: E501

        :return: The _7995 of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self.__7995

    @_7995.setter
    def _7995(self, _7995):
        """Sets the _7995 of this MarketData.

        13 Week Low - The lowest price for the past 13 weeks.  # noqa: E501

        :param _7995: The _7995 of this MarketData.  # noqa: E501
        :type: str
        """

        self.__7995 = _7995

    @property
    def conid(self):
        """Gets the conid of this MarketData.  # noqa: E501

        IBKR Contract identifier  # noqa: E501

        :return: The conid of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this MarketData.

        IBKR Contract identifier  # noqa: E501

        :param conid: The conid of this MarketData.  # noqa: E501
        :type: int
        """

        self._conid = conid

    @property
    def min_tick(self):
        """Gets the min_tick of this MarketData.  # noqa: E501

        minimum price increment  # noqa: E501

        :return: The min_tick of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._min_tick

    @min_tick.setter
    def min_tick(self, min_tick):
        """Sets the min_tick of this MarketData.

        minimum price increment  # noqa: E501

        :param min_tick: The min_tick of this MarketData.  # noqa: E501
        :type: float
        """

        self._min_tick = min_tick

    @property
    def bbo_exchange(self):
        """Gets the bbo_exchange of this MarketData.  # noqa: E501

        Color for Best Bid/Offer Exchange in hex code  # noqa: E501

        :return: The bbo_exchange of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self._bbo_exchange

    @bbo_exchange.setter
    def bbo_exchange(self, bbo_exchange):
        """Sets the bbo_exchange of this MarketData.

        Color for Best Bid/Offer Exchange in hex code  # noqa: E501

        :param bbo_exchange: The bbo_exchange of this MarketData.  # noqa: E501
        :type: str
        """

        self._bbo_exchange = bbo_exchange

    @property
    def has_delayed(self):
        """Gets the has_delayed of this MarketData.  # noqa: E501

        If market data field values return delayed  # noqa: E501

        :return: The has_delayed of this MarketData.  # noqa: E501
        :rtype: bool
        """
        return self._has_delayed

    @has_delayed.setter
    def has_delayed(self, has_delayed):
        """Sets the has_delayed of this MarketData.

        If market data field values return delayed  # noqa: E501

        :param has_delayed: The has_delayed of this MarketData.  # noqa: E501
        :type: bool
        """

        self._has_delayed = has_delayed

    @property
    def size_min_tick(self):
        """Gets the size_min_tick of this MarketData.  # noqa: E501

        minimum size increment  # noqa: E501

        :return: The size_min_tick of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._size_min_tick

    @size_min_tick.setter
    def size_min_tick(self, size_min_tick):
        """Sets the size_min_tick of this MarketData.

        minimum size increment  # noqa: E501

        :param size_min_tick: The size_min_tick of this MarketData.  # noqa: E501
        :type: int
        """

        self._size_min_tick = size_min_tick

    @property
    def best_eligible(self):
        """Gets the best_eligible of this MarketData.  # noqa: E501


        :return: The best_eligible of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._best_eligible

    @best_eligible.setter
    def best_eligible(self, best_eligible):
        """Sets the best_eligible of this MarketData.


        :param best_eligible: The best_eligible of this MarketData.  # noqa: E501
        :type: int
        """

        self._best_eligible = best_eligible

    @property
    def best_bid_exch(self):
        """Gets the best_bid_exch of this MarketData.  # noqa: E501


        :return: The best_bid_exch of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._best_bid_exch

    @best_bid_exch.setter
    def best_bid_exch(self, best_bid_exch):
        """Sets the best_bid_exch of this MarketData.


        :param best_bid_exch: The best_bid_exch of this MarketData.  # noqa: E501
        :type: int
        """

        self._best_bid_exch = best_bid_exch

    @property
    def best_ask_exch(self):
        """Gets the best_ask_exch of this MarketData.  # noqa: E501


        :return: The best_ask_exch of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._best_ask_exch

    @best_ask_exch.setter
    def best_ask_exch(self, best_ask_exch):
        """Sets the best_ask_exch of this MarketData.


        :param best_ask_exch: The best_ask_exch of this MarketData.  # noqa: E501
        :type: int
        """

        self._best_ask_exch = best_ask_exch

    @property
    def pre_open_bid(self):
        """Gets the pre_open_bid of this MarketData.  # noqa: E501


        :return: The pre_open_bid of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._pre_open_bid

    @pre_open_bid.setter
    def pre_open_bid(self, pre_open_bid):
        """Sets the pre_open_bid of this MarketData.


        :param pre_open_bid: The pre_open_bid of this MarketData.  # noqa: E501
        :type: int
        """

        self._pre_open_bid = pre_open_bid

    @property
    def last_attribs(self):
        """Gets the last_attribs of this MarketData.  # noqa: E501


        :return: The last_attribs of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._last_attribs

    @last_attribs.setter
    def last_attribs(self, last_attribs):
        """Sets the last_attribs of this MarketData.


        :param last_attribs: The last_attribs of this MarketData.  # noqa: E501
        :type: int
        """

        self._last_attribs = last_attribs

    @property
    def timestamp_base(self):
        """Gets the timestamp_base of this MarketData.  # noqa: E501

        Base time stamp for last update in format YYYYMMDD  # noqa: E501

        :return: The timestamp_base of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._timestamp_base

    @timestamp_base.setter
    def timestamp_base(self, timestamp_base):
        """Sets the timestamp_base of this MarketData.

        Base time stamp for last update in format YYYYMMDD  # noqa: E501

        :param timestamp_base: The timestamp_base of this MarketData.  # noqa: E501
        :type: int
        """

        self._timestamp_base = timestamp_base

    @property
    def timestamp_delta(self):
        """Gets the timestamp_delta of this MarketData.  # noqa: E501


        :return: The timestamp_delta of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._timestamp_delta

    @timestamp_delta.setter
    def timestamp_delta(self, timestamp_delta):
        """Sets the timestamp_delta of this MarketData.


        :param timestamp_delta: The timestamp_delta of this MarketData.  # noqa: E501
        :type: int
        """

        self._timestamp_delta = timestamp_delta

    @property
    def last_exch(self):
        """Gets the last_exch of this MarketData.  # noqa: E501


        :return: The last_exch of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._last_exch

    @last_exch.setter
    def last_exch(self, last_exch):
        """Sets the last_exch of this MarketData.


        :param last_exch: The last_exch of this MarketData.  # noqa: E501
        :type: int
        """

        self._last_exch = last_exch

    @property
    def close_attribs(self):
        """Gets the close_attribs of this MarketData.  # noqa: E501


        :return: The close_attribs of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._close_attribs

    @close_attribs.setter
    def close_attribs(self, close_attribs):
        """Sets the close_attribs of this MarketData.


        :param close_attribs: The close_attribs of this MarketData.  # noqa: E501
        :type: int
        """

        self._close_attribs = close_attribs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
