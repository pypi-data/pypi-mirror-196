# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_types': 'list[str]',
        'order_types_outside': 'list[str]',
        'default_size': 'float',
        'size_increment': 'float',
        'tif_types': 'list[str]',
        'limit_price': 'float',
        'stopprice': 'float',
        'preview': 'bool',
        'display_size': 'str',
        'increment': 'str'
    }

    attribute_map = {
        'order_types': 'orderTypes',
        'order_types_outside': 'orderTypesOutside',
        'default_size': 'defaultSize',
        'size_increment': 'sizeIncrement',
        'tif_types': 'tifTypes',
        'limit_price': 'limitPrice',
        'stopprice': 'stopprice',
        'preview': 'preview',
        'display_size': 'displaySize',
        'increment': 'increment'
    }

    def __init__(self, order_types=None, order_types_outside=None, default_size=None, size_increment=None, tif_types=None, limit_price=None, stopprice=None, preview=None, display_size=None, increment=None):  # noqa: E501
        """ContractRules - a model defined in Swagger"""  # noqa: E501
        self._order_types = None
        self._order_types_outside = None
        self._default_size = None
        self._size_increment = None
        self._tif_types = None
        self._limit_price = None
        self._stopprice = None
        self._preview = None
        self._display_size = None
        self._increment = None
        self.discriminator = None
        if order_types is not None:
            self.order_types = order_types
        if order_types_outside is not None:
            self.order_types_outside = order_types_outside
        if default_size is not None:
            self.default_size = default_size
        if size_increment is not None:
            self.size_increment = size_increment
        if tif_types is not None:
            self.tif_types = tif_types
        if limit_price is not None:
            self.limit_price = limit_price
        if stopprice is not None:
            self.stopprice = stopprice
        if preview is not None:
            self.preview = preview
        if display_size is not None:
            self.display_size = display_size
        if increment is not None:
            self.increment = increment

    @property
    def order_types(self):
        """Gets the order_types of this ContractRules.  # noqa: E501


        :return: The order_types of this ContractRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_types

    @order_types.setter
    def order_types(self, order_types):
        """Sets the order_types of this ContractRules.


        :param order_types: The order_types of this ContractRules.  # noqa: E501
        :type: list[str]
        """

        self._order_types = order_types

    @property
    def order_types_outside(self):
        """Gets the order_types_outside of this ContractRules.  # noqa: E501


        :return: The order_types_outside of this ContractRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_types_outside

    @order_types_outside.setter
    def order_types_outside(self, order_types_outside):
        """Sets the order_types_outside of this ContractRules.


        :param order_types_outside: The order_types_outside of this ContractRules.  # noqa: E501
        :type: list[str]
        """

        self._order_types_outside = order_types_outside

    @property
    def default_size(self):
        """Gets the default_size of this ContractRules.  # noqa: E501

        default quantity you can use to place an order  # noqa: E501

        :return: The default_size of this ContractRules.  # noqa: E501
        :rtype: float
        """
        return self._default_size

    @default_size.setter
    def default_size(self, default_size):
        """Sets the default_size of this ContractRules.

        default quantity you can use to place an order  # noqa: E501

        :param default_size: The default_size of this ContractRules.  # noqa: E501
        :type: float
        """

        self._default_size = default_size

    @property
    def size_increment(self):
        """Gets the size_increment of this ContractRules.  # noqa: E501


        :return: The size_increment of this ContractRules.  # noqa: E501
        :rtype: float
        """
        return self._size_increment

    @size_increment.setter
    def size_increment(self, size_increment):
        """Sets the size_increment of this ContractRules.


        :param size_increment: The size_increment of this ContractRules.  # noqa: E501
        :type: float
        """

        self._size_increment = size_increment

    @property
    def tif_types(self):
        """Gets the tif_types of this ContractRules.  # noqa: E501


        :return: The tif_types of this ContractRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._tif_types

    @tif_types.setter
    def tif_types(self, tif_types):
        """Sets the tif_types of this ContractRules.


        :param tif_types: The tif_types of this ContractRules.  # noqa: E501
        :type: list[str]
        """

        self._tif_types = tif_types

    @property
    def limit_price(self):
        """Gets the limit_price of this ContractRules.  # noqa: E501

        default limit price you can use to prefill your order  # noqa: E501

        :return: The limit_price of this ContractRules.  # noqa: E501
        :rtype: float
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this ContractRules.

        default limit price you can use to prefill your order  # noqa: E501

        :param limit_price: The limit_price of this ContractRules.  # noqa: E501
        :type: float
        """

        self._limit_price = limit_price

    @property
    def stopprice(self):
        """Gets the stopprice of this ContractRules.  # noqa: E501

        default stop price you can use to prefill your order  # noqa: E501

        :return: The stopprice of this ContractRules.  # noqa: E501
        :rtype: float
        """
        return self._stopprice

    @stopprice.setter
    def stopprice(self, stopprice):
        """Sets the stopprice of this ContractRules.

        default stop price you can use to prefill your order  # noqa: E501

        :param stopprice: The stopprice of this ContractRules.  # noqa: E501
        :type: float
        """

        self._stopprice = stopprice

    @property
    def preview(self):
        """Gets the preview of this ContractRules.  # noqa: E501

        if you can preview the order or not with the whatif endpoint  # noqa: E501

        :return: The preview of this ContractRules.  # noqa: E501
        :rtype: bool
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this ContractRules.

        if you can preview the order or not with the whatif endpoint  # noqa: E501

        :param preview: The preview of this ContractRules.  # noqa: E501
        :type: bool
        """

        self._preview = preview

    @property
    def display_size(self):
        """Gets the display_size of this ContractRules.  # noqa: E501


        :return: The display_size of this ContractRules.  # noqa: E501
        :rtype: str
        """
        return self._display_size

    @display_size.setter
    def display_size(self, display_size):
        """Sets the display_size of this ContractRules.


        :param display_size: The display_size of this ContractRules.  # noqa: E501
        :type: str
        """

        self._display_size = display_size

    @property
    def increment(self):
        """Gets the increment of this ContractRules.  # noqa: E501


        :return: The increment of this ContractRules.  # noqa: E501
        :rtype: str
        """
        return self._increment

    @increment.setter
    def increment(self, increment):
        """Sets the increment of this ContractRules.


        :param increment: The increment of this ContractRules.  # noqa: E501
        :type: str
        """

        self._increment = increment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
