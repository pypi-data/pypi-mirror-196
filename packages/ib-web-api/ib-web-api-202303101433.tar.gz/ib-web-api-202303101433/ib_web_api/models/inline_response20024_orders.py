# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20024Orders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acct': 'str',
        'conidex': 'str',
        'conid': 'float',
        'order_id': 'str',
        'cash_ccy': 'str',
        'size_and_fills': 'str',
        'order_desc': 'str',
        'description1': 'str',
        'ticker': 'str',
        'sec_type': 'str',
        'listing_exchange': 'str',
        'remaining_quantity': 'float',
        'filled_quantity': 'float',
        'company_name': 'str',
        'status': 'str',
        'orig_order_type': 'str',
        'supports_tax_opt': 'float',
        'last_execution_time': 'float',
        'last_execution_time_r': 'float',
        'order_type': 'str',
        'order_ref': 'str',
        'side': 'str',
        'time_in_force': 'str',
        'price': 'float',
        'bg_color': 'str',
        'fg_color': 'str'
    }

    attribute_map = {
        'acct': 'acct',
        'conidex': 'conidex',
        'conid': 'conid',
        'order_id': 'orderId',
        'cash_ccy': 'cashCcy',
        'size_and_fills': 'sizeAndFills',
        'order_desc': 'orderDesc',
        'description1': 'description1',
        'ticker': 'ticker',
        'sec_type': 'secType',
        'listing_exchange': 'listingExchange',
        'remaining_quantity': 'remainingQuantity',
        'filled_quantity': 'filledQuantity',
        'company_name': 'companyName',
        'status': 'status',
        'orig_order_type': 'origOrderType',
        'supports_tax_opt': 'supportsTaxOpt',
        'last_execution_time': 'lastExecutionTime',
        'last_execution_time_r': 'lastExecutionTime_r',
        'order_type': 'orderType',
        'order_ref': 'order_ref',
        'side': 'side',
        'time_in_force': 'timeInForce',
        'price': 'price',
        'bg_color': 'bgColor',
        'fg_color': 'fgColor'
    }

    def __init__(self, acct=None, conidex=None, conid=None, order_id=None, cash_ccy=None, size_and_fills=None, order_desc=None, description1=None, ticker=None, sec_type=None, listing_exchange=None, remaining_quantity=None, filled_quantity=None, company_name=None, status=None, orig_order_type=None, supports_tax_opt=None, last_execution_time=None, last_execution_time_r=None, order_type=None, order_ref=None, side=None, time_in_force=None, price=None, bg_color=None, fg_color=None):  # noqa: E501
        """InlineResponse20024Orders - a model defined in Swagger"""  # noqa: E501
        self._acct = None
        self._conidex = None
        self._conid = None
        self._order_id = None
        self._cash_ccy = None
        self._size_and_fills = None
        self._order_desc = None
        self._description1 = None
        self._ticker = None
        self._sec_type = None
        self._listing_exchange = None
        self._remaining_quantity = None
        self._filled_quantity = None
        self._company_name = None
        self._status = None
        self._orig_order_type = None
        self._supports_tax_opt = None
        self._last_execution_time = None
        self._last_execution_time_r = None
        self._order_type = None
        self._order_ref = None
        self._side = None
        self._time_in_force = None
        self._price = None
        self._bg_color = None
        self._fg_color = None
        self.discriminator = None
        if acct is not None:
            self.acct = acct
        if conidex is not None:
            self.conidex = conidex
        if conid is not None:
            self.conid = conid
        if order_id is not None:
            self.order_id = order_id
        if cash_ccy is not None:
            self.cash_ccy = cash_ccy
        if size_and_fills is not None:
            self.size_and_fills = size_and_fills
        if order_desc is not None:
            self.order_desc = order_desc
        if description1 is not None:
            self.description1 = description1
        if ticker is not None:
            self.ticker = ticker
        if sec_type is not None:
            self.sec_type = sec_type
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if remaining_quantity is not None:
            self.remaining_quantity = remaining_quantity
        if filled_quantity is not None:
            self.filled_quantity = filled_quantity
        if company_name is not None:
            self.company_name = company_name
        if status is not None:
            self.status = status
        if orig_order_type is not None:
            self.orig_order_type = orig_order_type
        if supports_tax_opt is not None:
            self.supports_tax_opt = supports_tax_opt
        if last_execution_time is not None:
            self.last_execution_time = last_execution_time
        if last_execution_time_r is not None:
            self.last_execution_time_r = last_execution_time_r
        if order_type is not None:
            self.order_type = order_type
        if order_ref is not None:
            self.order_ref = order_ref
        if side is not None:
            self.side = side
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if price is not None:
            self.price = price
        if bg_color is not None:
            self.bg_color = bg_color
        if fg_color is not None:
            self.fg_color = fg_color

    @property
    def acct(self):
        """Gets the acct of this InlineResponse20024Orders.  # noqa: E501

        Account number  # noqa: E501

        :return: The acct of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._acct

    @acct.setter
    def acct(self, acct):
        """Sets the acct of this InlineResponse20024Orders.

        Account number  # noqa: E501

        :param acct: The acct of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._acct = acct

    @property
    def conidex(self):
        """Gets the conidex of this InlineResponse20024Orders.  # noqa: E501

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :return: The conidex of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._conidex

    @conidex.setter
    def conidex(self, conidex):
        """Sets the conidex of this InlineResponse20024Orders.

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :param conidex: The conidex of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._conidex = conidex

    @property
    def conid(self):
        """Gets the conid of this InlineResponse20024Orders.  # noqa: E501

        Contract identifier  # noqa: E501

        :return: The conid of this InlineResponse20024Orders.  # noqa: E501
        :rtype: float
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this InlineResponse20024Orders.

        Contract identifier  # noqa: E501

        :param conid: The conid of this InlineResponse20024Orders.  # noqa: E501
        :type: float
        """

        self._conid = conid

    @property
    def order_id(self):
        """Gets the order_id of this InlineResponse20024Orders.  # noqa: E501

        Order identifier  # noqa: E501

        :return: The order_id of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this InlineResponse20024Orders.

        Order identifier  # noqa: E501

        :param order_id: The order_id of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def cash_ccy(self):
        """Gets the cash_ccy of this InlineResponse20024Orders.  # noqa: E501

        Cash currency  # noqa: E501

        :return: The cash_ccy of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._cash_ccy

    @cash_ccy.setter
    def cash_ccy(self, cash_ccy):
        """Sets the cash_ccy of this InlineResponse20024Orders.

        Cash currency  # noqa: E501

        :param cash_ccy: The cash_ccy of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._cash_ccy = cash_ccy

    @property
    def size_and_fills(self):
        """Gets the size_and_fills of this InlineResponse20024Orders.  # noqa: E501

        Quantity outstanding and total quantity concatenated with forward slash separator  # noqa: E501

        :return: The size_and_fills of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._size_and_fills

    @size_and_fills.setter
    def size_and_fills(self, size_and_fills):
        """Sets the size_and_fills of this InlineResponse20024Orders.

        Quantity outstanding and total quantity concatenated with forward slash separator  # noqa: E501

        :param size_and_fills: The size_and_fills of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._size_and_fills = size_and_fills

    @property
    def order_desc(self):
        """Gets the order_desc of this InlineResponse20024Orders.  # noqa: E501

        Order description  # noqa: E501

        :return: The order_desc of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._order_desc

    @order_desc.setter
    def order_desc(self, order_desc):
        """Sets the order_desc of this InlineResponse20024Orders.

        Order description  # noqa: E501

        :param order_desc: The order_desc of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._order_desc = order_desc

    @property
    def description1(self):
        """Gets the description1 of this InlineResponse20024Orders.  # noqa: E501

        Formatted ticker description  # noqa: E501

        :return: The description1 of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._description1

    @description1.setter
    def description1(self, description1):
        """Sets the description1 of this InlineResponse20024Orders.

        Formatted ticker description  # noqa: E501

        :param description1: The description1 of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._description1 = description1

    @property
    def ticker(self):
        """Gets the ticker of this InlineResponse20024Orders.  # noqa: E501

        Underlying symbol  # noqa: E501

        :return: The ticker of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this InlineResponse20024Orders.

        Underlying symbol  # noqa: E501

        :param ticker: The ticker of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def sec_type(self):
        """Gets the sec_type of this InlineResponse20024Orders.  # noqa: E501

        Asset class  # noqa: E501

        :return: The sec_type of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this InlineResponse20024Orders.

        Asset class  # noqa: E501

        :param sec_type: The sec_type of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this InlineResponse20024Orders.  # noqa: E501

        Listing Exchange  # noqa: E501

        :return: The listing_exchange of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this InlineResponse20024Orders.

        Listing Exchange  # noqa: E501

        :param listing_exchange: The listing_exchange of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def remaining_quantity(self):
        """Gets the remaining_quantity of this InlineResponse20024Orders.  # noqa: E501

        Quantity remaining  # noqa: E501

        :return: The remaining_quantity of this InlineResponse20024Orders.  # noqa: E501
        :rtype: float
        """
        return self._remaining_quantity

    @remaining_quantity.setter
    def remaining_quantity(self, remaining_quantity):
        """Sets the remaining_quantity of this InlineResponse20024Orders.

        Quantity remaining  # noqa: E501

        :param remaining_quantity: The remaining_quantity of this InlineResponse20024Orders.  # noqa: E501
        :type: float
        """

        self._remaining_quantity = remaining_quantity

    @property
    def filled_quantity(self):
        """Gets the filled_quantity of this InlineResponse20024Orders.  # noqa: E501

        Quantity filled  # noqa: E501

        :return: The filled_quantity of this InlineResponse20024Orders.  # noqa: E501
        :rtype: float
        """
        return self._filled_quantity

    @filled_quantity.setter
    def filled_quantity(self, filled_quantity):
        """Sets the filled_quantity of this InlineResponse20024Orders.

        Quantity filled  # noqa: E501

        :param filled_quantity: The filled_quantity of this InlineResponse20024Orders.  # noqa: E501
        :type: float
        """

        self._filled_quantity = filled_quantity

    @property
    def company_name(self):
        """Gets the company_name of this InlineResponse20024Orders.  # noqa: E501

        Company Name  # noqa: E501

        :return: The company_name of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this InlineResponse20024Orders.

        Company Name  # noqa: E501

        :param company_name: The company_name of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def status(self):
        """Gets the status of this InlineResponse20024Orders.  # noqa: E501

        Status of the order  # noqa: E501

        :return: The status of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20024Orders.

        Status of the order  # noqa: E501

        :param status: The status of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def orig_order_type(self):
        """Gets the orig_order_type of this InlineResponse20024Orders.  # noqa: E501

        Original order type  # noqa: E501

        :return: The orig_order_type of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._orig_order_type

    @orig_order_type.setter
    def orig_order_type(self, orig_order_type):
        """Sets the orig_order_type of this InlineResponse20024Orders.

        Original order type  # noqa: E501

        :param orig_order_type: The orig_order_type of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._orig_order_type = orig_order_type

    @property
    def supports_tax_opt(self):
        """Gets the supports_tax_opt of this InlineResponse20024Orders.  # noqa: E501

        Supports Tax Optimization with 0 for no and 1 for yes  # noqa: E501

        :return: The supports_tax_opt of this InlineResponse20024Orders.  # noqa: E501
        :rtype: float
        """
        return self._supports_tax_opt

    @supports_tax_opt.setter
    def supports_tax_opt(self, supports_tax_opt):
        """Sets the supports_tax_opt of this InlineResponse20024Orders.

        Supports Tax Optimization with 0 for no and 1 for yes  # noqa: E501

        :param supports_tax_opt: The supports_tax_opt of this InlineResponse20024Orders.  # noqa: E501
        :type: float
        """

        self._supports_tax_opt = supports_tax_opt

    @property
    def last_execution_time(self):
        """Gets the last_execution_time of this InlineResponse20024Orders.  # noqa: E501

        Last status update in format YYMMDDhhmms based in GMT  # noqa: E501

        :return: The last_execution_time of this InlineResponse20024Orders.  # noqa: E501
        :rtype: float
        """
        return self._last_execution_time

    @last_execution_time.setter
    def last_execution_time(self, last_execution_time):
        """Sets the last_execution_time of this InlineResponse20024Orders.

        Last status update in format YYMMDDhhmms based in GMT  # noqa: E501

        :param last_execution_time: The last_execution_time of this InlineResponse20024Orders.  # noqa: E501
        :type: float
        """

        self._last_execution_time = last_execution_time

    @property
    def last_execution_time_r(self):
        """Gets the last_execution_time_r of this InlineResponse20024Orders.  # noqa: E501

        Last status update unix time in ms  # noqa: E501

        :return: The last_execution_time_r of this InlineResponse20024Orders.  # noqa: E501
        :rtype: float
        """
        return self._last_execution_time_r

    @last_execution_time_r.setter
    def last_execution_time_r(self, last_execution_time_r):
        """Sets the last_execution_time_r of this InlineResponse20024Orders.

        Last status update unix time in ms  # noqa: E501

        :param last_execution_time_r: The last_execution_time_r of this InlineResponse20024Orders.  # noqa: E501
        :type: float
        """

        self._last_execution_time_r = last_execution_time_r

    @property
    def order_type(self):
        """Gets the order_type of this InlineResponse20024Orders.  # noqa: E501

        Order type  # noqa: E501

        :return: The order_type of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this InlineResponse20024Orders.

        Order type  # noqa: E501

        :param order_type: The order_type of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def order_ref(self):
        """Gets the order_ref of this InlineResponse20024Orders.  # noqa: E501

        Order reference  # noqa: E501

        :return: The order_ref of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._order_ref

    @order_ref.setter
    def order_ref(self, order_ref):
        """Sets the order_ref of this InlineResponse20024Orders.

        Order reference  # noqa: E501

        :param order_ref: The order_ref of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._order_ref = order_ref

    @property
    def side(self):
        """Gets the side of this InlineResponse20024Orders.  # noqa: E501

        The side of the market of the order.  * BUY: Buy contract near posted ask price  * SELL: Sell contract near posted bid price  * ASSN: Option Assignment, if BUYSELL=BUY and OptionType=PUT or BUYSELL=SELL and OptionType=CALL  * EXER: Option Exercise, if BUYSELL=SELL and OptionType=PUT or BUYSELL=BUY and OptionType=CALL   # noqa: E501

        :return: The side of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this InlineResponse20024Orders.

        The side of the market of the order.  * BUY: Buy contract near posted ask price  * SELL: Sell contract near posted bid price  * ASSN: Option Assignment, if BUYSELL=BUY and OptionType=PUT or BUYSELL=SELL and OptionType=CALL  * EXER: Option Exercise, if BUYSELL=SELL and OptionType=PUT or BUYSELL=BUY and OptionType=CALL   # noqa: E501

        :param side: The side of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUY", "SELL", "ASSN", "EXER"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def time_in_force(self):
        """Gets the time_in_force of this InlineResponse20024Orders.  # noqa: E501

        Time in force  # noqa: E501

        :return: The time_in_force of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this InlineResponse20024Orders.

        Time in force  # noqa: E501

        :param time_in_force: The time_in_force of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._time_in_force = time_in_force

    @property
    def price(self):
        """Gets the price of this InlineResponse20024Orders.  # noqa: E501

        Price of order  # noqa: E501

        :return: The price of this InlineResponse20024Orders.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InlineResponse20024Orders.

        Price of order  # noqa: E501

        :param price: The price of this InlineResponse20024Orders.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def bg_color(self):
        """Gets the bg_color of this InlineResponse20024Orders.  # noqa: E501

        Background color in hex format  # noqa: E501

        :return: The bg_color of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._bg_color

    @bg_color.setter
    def bg_color(self, bg_color):
        """Sets the bg_color of this InlineResponse20024Orders.

        Background color in hex format  # noqa: E501

        :param bg_color: The bg_color of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._bg_color = bg_color

    @property
    def fg_color(self):
        """Gets the fg_color of this InlineResponse20024Orders.  # noqa: E501

        Foreground color in hex format  # noqa: E501

        :return: The fg_color of this InlineResponse20024Orders.  # noqa: E501
        :rtype: str
        """
        return self._fg_color

    @fg_color.setter
    def fg_color(self, fg_color):
        """Sets the fg_color of this InlineResponse20024Orders.

        Foreground color in hex format  # noqa: E501

        :param fg_color: The fg_color of this InlineResponse20024Orders.  # noqa: E501
        :type: str
        """

        self._fg_color = fg_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20024Orders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20024Orders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
