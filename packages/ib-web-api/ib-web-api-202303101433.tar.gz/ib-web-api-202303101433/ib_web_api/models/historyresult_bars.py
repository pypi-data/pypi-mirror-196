# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistoryresultBars(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'open': 'float',
        'start_time': 'str',
        'start_time_val': 'int',
        'end_time': 'str',
        'end_time_val': 'int',
        'points': 'int',
        'data': 'list[HistoryresultBarsData]',
        'mkt_data_delay': 'int'
    }

    attribute_map = {
        'open': 'open',
        'start_time': 'startTime',
        'start_time_val': 'startTimeVal',
        'end_time': 'endTime',
        'end_time_val': 'endTimeVal',
        'points': 'points',
        'data': 'data',
        'mkt_data_delay': 'mktDataDelay'
    }

    def __init__(self, open=None, start_time=None, start_time_val=None, end_time=None, end_time_val=None, points=None, data=None, mkt_data_delay=None):  # noqa: E501
        """HistoryresultBars - a model defined in Swagger"""  # noqa: E501
        self._open = None
        self._start_time = None
        self._start_time_val = None
        self._end_time = None
        self._end_time_val = None
        self._points = None
        self._data = None
        self._mkt_data_delay = None
        self.discriminator = None
        if open is not None:
            self.open = open
        if start_time is not None:
            self.start_time = start_time
        if start_time_val is not None:
            self.start_time_val = start_time_val
        if end_time is not None:
            self.end_time = end_time
        if end_time_val is not None:
            self.end_time_val = end_time_val
        if points is not None:
            self.points = points
        if data is not None:
            self.data = data
        if mkt_data_delay is not None:
            self.mkt_data_delay = mkt_data_delay

    @property
    def open(self):
        """Gets the open of this HistoryresultBars.  # noqa: E501

        First price returned for bar value.  # noqa: E501

        :return: The open of this HistoryresultBars.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this HistoryresultBars.

        First price returned for bar value.  # noqa: E501

        :param open: The open of this HistoryresultBars.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def start_time(self):
        """Gets the start_time of this HistoryresultBars.  # noqa: E501

        Start Time in the format YYYYMMDD.  # noqa: E501

        :return: The start_time of this HistoryresultBars.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this HistoryresultBars.

        Start Time in the format YYYYMMDD.  # noqa: E501

        :param start_time: The start_time of this HistoryresultBars.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def start_time_val(self):
        """Gets the start_time_val of this HistoryresultBars.  # noqa: E501

        Start Time Value - Formatted in unix time in ms.  # noqa: E501

        :return: The start_time_val of this HistoryresultBars.  # noqa: E501
        :rtype: int
        """
        return self._start_time_val

    @start_time_val.setter
    def start_time_val(self, start_time_val):
        """Sets the start_time_val of this HistoryresultBars.

        Start Time Value - Formatted in unix time in ms.  # noqa: E501

        :param start_time_val: The start_time_val of this HistoryresultBars.  # noqa: E501
        :type: int
        """

        self._start_time_val = start_time_val

    @property
    def end_time(self):
        """Gets the end_time of this HistoryresultBars.  # noqa: E501

        End Time in the format YYYYMMDD.  # noqa: E501

        :return: The end_time of this HistoryresultBars.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this HistoryresultBars.

        End Time in the format YYYYMMDD.  # noqa: E501

        :param end_time: The end_time of this HistoryresultBars.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def end_time_val(self):
        """Gets the end_time_val of this HistoryresultBars.  # noqa: E501

        End Time Value - Formatted in unix time in ms.  # noqa: E501

        :return: The end_time_val of this HistoryresultBars.  # noqa: E501
        :rtype: int
        """
        return self._end_time_val

    @end_time_val.setter
    def end_time_val(self, end_time_val):
        """Sets the end_time_val of this HistoryresultBars.

        End Time Value - Formatted in unix time in ms.  # noqa: E501

        :param end_time_val: The end_time_val of this HistoryresultBars.  # noqa: E501
        :type: int
        """

        self._end_time_val = end_time_val

    @property
    def points(self):
        """Gets the points of this HistoryresultBars.  # noqa: E501

        total number of data points.  # noqa: E501

        :return: The points of this HistoryresultBars.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this HistoryresultBars.

        total number of data points.  # noqa: E501

        :param points: The points of this HistoryresultBars.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def data(self):
        """Gets the data of this HistoryresultBars.  # noqa: E501


        :return: The data of this HistoryresultBars.  # noqa: E501
        :rtype: list[HistoryresultBarsData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HistoryresultBars.


        :param data: The data of this HistoryresultBars.  # noqa: E501
        :type: list[HistoryresultBarsData]
        """

        self._data = data

    @property
    def mkt_data_delay(self):
        """Gets the mkt_data_delay of this HistoryresultBars.  # noqa: E501

        If 0 then data is returned in real time. Otherwise will return the number of seconds history data is delayed.  # noqa: E501

        :return: The mkt_data_delay of this HistoryresultBars.  # noqa: E501
        :rtype: int
        """
        return self._mkt_data_delay

    @mkt_data_delay.setter
    def mkt_data_delay(self, mkt_data_delay):
        """Sets the mkt_data_delay of this HistoryresultBars.

        If 0 then data is returned in real time. Otherwise will return the number of seconds history data is delayed.  # noqa: E501

        :param mkt_data_delay: The mkt_data_delay of this HistoryresultBars.  # noqa: E501
        :type: int
        """

        self._mkt_data_delay = mkt_data_delay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryresultBars, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryresultBars):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
