# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountParent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mmc': 'list[str]',
        'account_id': 'str',
        'is_m_parent': 'bool',
        'is_m_child': 'bool',
        'is_multiplex': 'bool'
    }

    attribute_map = {
        'mmc': 'mmc',
        'account_id': 'accountId',
        'is_m_parent': 'isMParent',
        'is_m_child': 'isMChild',
        'is_multiplex': 'isMultiplex'
    }

    def __init__(self, mmc=None, account_id=None, is_m_parent=None, is_m_child=None, is_multiplex=None):  # noqa: E501
        """AccountParent - a model defined in Swagger"""  # noqa: E501
        self._mmc = None
        self._account_id = None
        self._is_m_parent = None
        self._is_m_child = None
        self._is_multiplex = None
        self.discriminator = None
        if mmc is not None:
            self.mmc = mmc
        if account_id is not None:
            self.account_id = account_id
        if is_m_parent is not None:
            self.is_m_parent = is_m_parent
        if is_m_child is not None:
            self.is_m_child = is_m_child
        if is_multiplex is not None:
            self.is_multiplex = is_multiplex

    @property
    def mmc(self):
        """Gets the mmc of this AccountParent.  # noqa: E501


        :return: The mmc of this AccountParent.  # noqa: E501
        :rtype: list[str]
        """
        return self._mmc

    @mmc.setter
    def mmc(self, mmc):
        """Sets the mmc of this AccountParent.


        :param mmc: The mmc of this AccountParent.  # noqa: E501
        :type: list[str]
        """

        self._mmc = mmc

    @property
    def account_id(self):
        """Gets the account_id of this AccountParent.  # noqa: E501

        Account Number for Money Manager Client  # noqa: E501

        :return: The account_id of this AccountParent.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountParent.

        Account Number for Money Manager Client  # noqa: E501

        :param account_id: The account_id of this AccountParent.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def is_m_parent(self):
        """Gets the is_m_parent of this AccountParent.  # noqa: E501

        Is MM a Parent Account  # noqa: E501

        :return: The is_m_parent of this AccountParent.  # noqa: E501
        :rtype: bool
        """
        return self._is_m_parent

    @is_m_parent.setter
    def is_m_parent(self, is_m_parent):
        """Sets the is_m_parent of this AccountParent.

        Is MM a Parent Account  # noqa: E501

        :param is_m_parent: The is_m_parent of this AccountParent.  # noqa: E501
        :type: bool
        """

        self._is_m_parent = is_m_parent

    @property
    def is_m_child(self):
        """Gets the is_m_child of this AccountParent.  # noqa: E501

        Is MM a Child Account  # noqa: E501

        :return: The is_m_child of this AccountParent.  # noqa: E501
        :rtype: bool
        """
        return self._is_m_child

    @is_m_child.setter
    def is_m_child(self, is_m_child):
        """Sets the is_m_child of this AccountParent.

        Is MM a Child Account  # noqa: E501

        :param is_m_child: The is_m_child of this AccountParent.  # noqa: E501
        :type: bool
        """

        self._is_m_child = is_m_child

    @property
    def is_multiplex(self):
        """Gets the is_multiplex of this AccountParent.  # noqa: E501

        Is a Multiplex Account. These are account models with individual account being parent and managed account being child.  # noqa: E501

        :return: The is_multiplex of this AccountParent.  # noqa: E501
        :rtype: bool
        """
        return self._is_multiplex

    @is_multiplex.setter
    def is_multiplex(self, is_multiplex):
        """Sets the is_multiplex of this AccountParent.

        Is a Multiplex Account. These are account models with individual account being parent and managed account being child.  # noqa: E501

        :param is_multiplex: The is_multiplex of this AccountParent.  # noqa: E501
        :type: bool
        """

        self._is_multiplex = is_multiplex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountParent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountParent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
