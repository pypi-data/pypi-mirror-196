# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20036Rules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algo_eligible': 'bool',
        'can_trade_acct_ids': 'list[InlineResponse20036CanTradeAcctIds]',
        'error': 'str',
        'order_types': 'list[InlineResponse20036OrderTypes]',
        'ibalgo_types': 'list[InlineResponse20036IbalgoTypes]',
        'fraq_types': 'list[InlineResponse20036FraqTypes]',
        'cqt_types': 'list[InlineResponse20036CqtTypes]',
        'order_defaults': 'list[InlineResponse20036OrderDefaults]',
        'order_types_outside': 'list[InlineResponse20036OrderTypesOutside]',
        'default_size': 'int',
        'cash_size': 'int',
        'size_increment': 'int',
        'tif_types': 'list[InlineResponse20036TifTypes]',
        'default_tif': 'str',
        'limit_price': 'float',
        'stopprice': 'float',
        'order_origination': 'float',
        'preview': 'bool',
        'display_size': 'float',
        'fraq_int': 'float',
        'cash_ccy': 'str',
        'cash_qty_incr': 'float',
        'price_magnifier': 'float',
        'negative_capable': 'bool',
        'increment': 'float',
        'increment_digits': 'int'
    }

    attribute_map = {
        'algo_eligible': 'algoEligible',
        'can_trade_acct_ids': 'canTradeAcctIds',
        'error': 'error',
        'order_types': 'orderTypes',
        'ibalgo_types': 'ibalgoTypes',
        'fraq_types': 'fraqTypes',
        'cqt_types': 'cqtTypes',
        'order_defaults': 'orderDefaults',
        'order_types_outside': 'orderTypesOutside',
        'default_size': 'defaultSize',
        'cash_size': 'cashSize',
        'size_increment': 'sizeIncrement',
        'tif_types': 'tifTypes',
        'default_tif': 'defaultTIF',
        'limit_price': 'limitPrice',
        'stopprice': 'stopprice',
        'order_origination': 'orderOrigination',
        'preview': 'preview',
        'display_size': 'displaySize',
        'fraq_int': 'fraqInt',
        'cash_ccy': 'cashCcy',
        'cash_qty_incr': 'cashQtyIncr',
        'price_magnifier': 'priceMagnifier',
        'negative_capable': 'negativeCapable',
        'increment': 'increment',
        'increment_digits': 'incrementDigits'
    }

    def __init__(self, algo_eligible=None, can_trade_acct_ids=None, error=None, order_types=None, ibalgo_types=None, fraq_types=None, cqt_types=None, order_defaults=None, order_types_outside=None, default_size=None, cash_size=None, size_increment=None, tif_types=None, default_tif=None, limit_price=None, stopprice=None, order_origination=None, preview=None, display_size=None, fraq_int=None, cash_ccy=None, cash_qty_incr=None, price_magnifier=None, negative_capable=None, increment=None, increment_digits=None):  # noqa: E501
        """InlineResponse20036Rules - a model defined in Swagger"""  # noqa: E501
        self._algo_eligible = None
        self._can_trade_acct_ids = None
        self._error = None
        self._order_types = None
        self._ibalgo_types = None
        self._fraq_types = None
        self._cqt_types = None
        self._order_defaults = None
        self._order_types_outside = None
        self._default_size = None
        self._cash_size = None
        self._size_increment = None
        self._tif_types = None
        self._default_tif = None
        self._limit_price = None
        self._stopprice = None
        self._order_origination = None
        self._preview = None
        self._display_size = None
        self._fraq_int = None
        self._cash_ccy = None
        self._cash_qty_incr = None
        self._price_magnifier = None
        self._negative_capable = None
        self._increment = None
        self._increment_digits = None
        self.discriminator = None
        if algo_eligible is not None:
            self.algo_eligible = algo_eligible
        if can_trade_acct_ids is not None:
            self.can_trade_acct_ids = can_trade_acct_ids
        if error is not None:
            self.error = error
        if order_types is not None:
            self.order_types = order_types
        if ibalgo_types is not None:
            self.ibalgo_types = ibalgo_types
        if fraq_types is not None:
            self.fraq_types = fraq_types
        if cqt_types is not None:
            self.cqt_types = cqt_types
        if order_defaults is not None:
            self.order_defaults = order_defaults
        if order_types_outside is not None:
            self.order_types_outside = order_types_outside
        if default_size is not None:
            self.default_size = default_size
        if cash_size is not None:
            self.cash_size = cash_size
        if size_increment is not None:
            self.size_increment = size_increment
        if tif_types is not None:
            self.tif_types = tif_types
        if default_tif is not None:
            self.default_tif = default_tif
        if limit_price is not None:
            self.limit_price = limit_price
        if stopprice is not None:
            self.stopprice = stopprice
        if order_origination is not None:
            self.order_origination = order_origination
        if preview is not None:
            self.preview = preview
        if display_size is not None:
            self.display_size = display_size
        if fraq_int is not None:
            self.fraq_int = fraq_int
        if cash_ccy is not None:
            self.cash_ccy = cash_ccy
        if cash_qty_incr is not None:
            self.cash_qty_incr = cash_qty_incr
        if price_magnifier is not None:
            self.price_magnifier = price_magnifier
        if negative_capable is not None:
            self.negative_capable = negative_capable
        if increment is not None:
            self.increment = increment
        if increment_digits is not None:
            self.increment_digits = increment_digits

    @property
    def algo_eligible(self):
        """Gets the algo_eligible of this InlineResponse20036Rules.  # noqa: E501


        :return: The algo_eligible of this InlineResponse20036Rules.  # noqa: E501
        :rtype: bool
        """
        return self._algo_eligible

    @algo_eligible.setter
    def algo_eligible(self, algo_eligible):
        """Sets the algo_eligible of this InlineResponse20036Rules.


        :param algo_eligible: The algo_eligible of this InlineResponse20036Rules.  # noqa: E501
        :type: bool
        """

        self._algo_eligible = algo_eligible

    @property
    def can_trade_acct_ids(self):
        """Gets the can_trade_acct_ids of this InlineResponse20036Rules.  # noqa: E501


        :return: The can_trade_acct_ids of this InlineResponse20036Rules.  # noqa: E501
        :rtype: list[InlineResponse20036CanTradeAcctIds]
        """
        return self._can_trade_acct_ids

    @can_trade_acct_ids.setter
    def can_trade_acct_ids(self, can_trade_acct_ids):
        """Sets the can_trade_acct_ids of this InlineResponse20036Rules.


        :param can_trade_acct_ids: The can_trade_acct_ids of this InlineResponse20036Rules.  # noqa: E501
        :type: list[InlineResponse20036CanTradeAcctIds]
        """

        self._can_trade_acct_ids = can_trade_acct_ids

    @property
    def error(self):
        """Gets the error of this InlineResponse20036Rules.  # noqa: E501

        Returns a description on any errors with order presets  # noqa: E501

        :return: The error of this InlineResponse20036Rules.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse20036Rules.

        Returns a description on any errors with order presets  # noqa: E501

        :param error: The error of this InlineResponse20036Rules.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def order_types(self):
        """Gets the order_types of this InlineResponse20036Rules.  # noqa: E501


        :return: The order_types of this InlineResponse20036Rules.  # noqa: E501
        :rtype: list[InlineResponse20036OrderTypes]
        """
        return self._order_types

    @order_types.setter
    def order_types(self, order_types):
        """Sets the order_types of this InlineResponse20036Rules.


        :param order_types: The order_types of this InlineResponse20036Rules.  # noqa: E501
        :type: list[InlineResponse20036OrderTypes]
        """

        self._order_types = order_types

    @property
    def ibalgo_types(self):
        """Gets the ibalgo_types of this InlineResponse20036Rules.  # noqa: E501


        :return: The ibalgo_types of this InlineResponse20036Rules.  # noqa: E501
        :rtype: list[InlineResponse20036IbalgoTypes]
        """
        return self._ibalgo_types

    @ibalgo_types.setter
    def ibalgo_types(self, ibalgo_types):
        """Sets the ibalgo_types of this InlineResponse20036Rules.


        :param ibalgo_types: The ibalgo_types of this InlineResponse20036Rules.  # noqa: E501
        :type: list[InlineResponse20036IbalgoTypes]
        """

        self._ibalgo_types = ibalgo_types

    @property
    def fraq_types(self):
        """Gets the fraq_types of this InlineResponse20036Rules.  # noqa: E501


        :return: The fraq_types of this InlineResponse20036Rules.  # noqa: E501
        :rtype: list[InlineResponse20036FraqTypes]
        """
        return self._fraq_types

    @fraq_types.setter
    def fraq_types(self, fraq_types):
        """Sets the fraq_types of this InlineResponse20036Rules.


        :param fraq_types: The fraq_types of this InlineResponse20036Rules.  # noqa: E501
        :type: list[InlineResponse20036FraqTypes]
        """

        self._fraq_types = fraq_types

    @property
    def cqt_types(self):
        """Gets the cqt_types of this InlineResponse20036Rules.  # noqa: E501


        :return: The cqt_types of this InlineResponse20036Rules.  # noqa: E501
        :rtype: list[InlineResponse20036CqtTypes]
        """
        return self._cqt_types

    @cqt_types.setter
    def cqt_types(self, cqt_types):
        """Sets the cqt_types of this InlineResponse20036Rules.


        :param cqt_types: The cqt_types of this InlineResponse20036Rules.  # noqa: E501
        :type: list[InlineResponse20036CqtTypes]
        """

        self._cqt_types = cqt_types

    @property
    def order_defaults(self):
        """Gets the order_defaults of this InlineResponse20036Rules.  # noqa: E501

        If object returned will provide the defaults based on user settings  # noqa: E501

        :return: The order_defaults of this InlineResponse20036Rules.  # noqa: E501
        :rtype: list[InlineResponse20036OrderDefaults]
        """
        return self._order_defaults

    @order_defaults.setter
    def order_defaults(self, order_defaults):
        """Sets the order_defaults of this InlineResponse20036Rules.

        If object returned will provide the defaults based on user settings  # noqa: E501

        :param order_defaults: The order_defaults of this InlineResponse20036Rules.  # noqa: E501
        :type: list[InlineResponse20036OrderDefaults]
        """

        self._order_defaults = order_defaults

    @property
    def order_types_outside(self):
        """Gets the order_types_outside of this InlineResponse20036Rules.  # noqa: E501


        :return: The order_types_outside of this InlineResponse20036Rules.  # noqa: E501
        :rtype: list[InlineResponse20036OrderTypesOutside]
        """
        return self._order_types_outside

    @order_types_outside.setter
    def order_types_outside(self, order_types_outside):
        """Sets the order_types_outside of this InlineResponse20036Rules.


        :param order_types_outside: The order_types_outside of this InlineResponse20036Rules.  # noqa: E501
        :type: list[InlineResponse20036OrderTypesOutside]
        """

        self._order_types_outside = order_types_outside

    @property
    def default_size(self):
        """Gets the default_size of this InlineResponse20036Rules.  # noqa: E501

        Default quantity  # noqa: E501

        :return: The default_size of this InlineResponse20036Rules.  # noqa: E501
        :rtype: int
        """
        return self._default_size

    @default_size.setter
    def default_size(self, default_size):
        """Sets the default_size of this InlineResponse20036Rules.

        Default quantity  # noqa: E501

        :param default_size: The default_size of this InlineResponse20036Rules.  # noqa: E501
        :type: int
        """

        self._default_size = default_size

    @property
    def cash_size(self):
        """Gets the cash_size of this InlineResponse20036Rules.  # noqa: E501

        cash value  # noqa: E501

        :return: The cash_size of this InlineResponse20036Rules.  # noqa: E501
        :rtype: int
        """
        return self._cash_size

    @cash_size.setter
    def cash_size(self, cash_size):
        """Sets the cash_size of this InlineResponse20036Rules.

        cash value  # noqa: E501

        :param cash_size: The cash_size of this InlineResponse20036Rules.  # noqa: E501
        :type: int
        """

        self._cash_size = cash_size

    @property
    def size_increment(self):
        """Gets the size_increment of this InlineResponse20036Rules.  # noqa: E501

        increment quantity value  # noqa: E501

        :return: The size_increment of this InlineResponse20036Rules.  # noqa: E501
        :rtype: int
        """
        return self._size_increment

    @size_increment.setter
    def size_increment(self, size_increment):
        """Sets the size_increment of this InlineResponse20036Rules.

        increment quantity value  # noqa: E501

        :param size_increment: The size_increment of this InlineResponse20036Rules.  # noqa: E501
        :type: int
        """

        self._size_increment = size_increment

    @property
    def tif_types(self):
        """Gets the tif_types of this InlineResponse20036Rules.  # noqa: E501


        :return: The tif_types of this InlineResponse20036Rules.  # noqa: E501
        :rtype: list[InlineResponse20036TifTypes]
        """
        return self._tif_types

    @tif_types.setter
    def tif_types(self, tif_types):
        """Sets the tif_types of this InlineResponse20036Rules.


        :param tif_types: The tif_types of this InlineResponse20036Rules.  # noqa: E501
        :type: list[InlineResponse20036TifTypes]
        """

        self._tif_types = tif_types

    @property
    def default_tif(self):
        """Gets the default_tif of this InlineResponse20036Rules.  # noqa: E501

        Default time in force value  # noqa: E501

        :return: The default_tif of this InlineResponse20036Rules.  # noqa: E501
        :rtype: str
        """
        return self._default_tif

    @default_tif.setter
    def default_tif(self, default_tif):
        """Sets the default_tif of this InlineResponse20036Rules.

        Default time in force value  # noqa: E501

        :param default_tif: The default_tif of this InlineResponse20036Rules.  # noqa: E501
        :type: str
        """

        self._default_tif = default_tif

    @property
    def limit_price(self):
        """Gets the limit_price of this InlineResponse20036Rules.  # noqa: E501

        Limit price  # noqa: E501

        :return: The limit_price of this InlineResponse20036Rules.  # noqa: E501
        :rtype: float
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this InlineResponse20036Rules.

        Limit price  # noqa: E501

        :param limit_price: The limit_price of this InlineResponse20036Rules.  # noqa: E501
        :type: float
        """

        self._limit_price = limit_price

    @property
    def stopprice(self):
        """Gets the stopprice of this InlineResponse20036Rules.  # noqa: E501

        Stop price  # noqa: E501

        :return: The stopprice of this InlineResponse20036Rules.  # noqa: E501
        :rtype: float
        """
        return self._stopprice

    @stopprice.setter
    def stopprice(self, stopprice):
        """Sets the stopprice of this InlineResponse20036Rules.

        Stop price  # noqa: E501

        :param stopprice: The stopprice of this InlineResponse20036Rules.  # noqa: E501
        :type: float
        """

        self._stopprice = stopprice

    @property
    def order_origination(self):
        """Gets the order_origination of this InlineResponse20036Rules.  # noqa: E501

        Order origin designation for US securities options and Options Clearing Corporation  # noqa: E501

        :return: The order_origination of this InlineResponse20036Rules.  # noqa: E501
        :rtype: float
        """
        return self._order_origination

    @order_origination.setter
    def order_origination(self, order_origination):
        """Sets the order_origination of this InlineResponse20036Rules.

        Order origin designation for US securities options and Options Clearing Corporation  # noqa: E501

        :param order_origination: The order_origination of this InlineResponse20036Rules.  # noqa: E501
        :type: float
        """

        self._order_origination = order_origination

    @property
    def preview(self):
        """Gets the preview of this InlineResponse20036Rules.  # noqa: E501

        order preview required  # noqa: E501

        :return: The preview of this InlineResponse20036Rules.  # noqa: E501
        :rtype: bool
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this InlineResponse20036Rules.

        order preview required  # noqa: E501

        :param preview: The preview of this InlineResponse20036Rules.  # noqa: E501
        :type: bool
        """

        self._preview = preview

    @property
    def display_size(self):
        """Gets the display_size of this InlineResponse20036Rules.  # noqa: E501


        :return: The display_size of this InlineResponse20036Rules.  # noqa: E501
        :rtype: float
        """
        return self._display_size

    @display_size.setter
    def display_size(self, display_size):
        """Sets the display_size of this InlineResponse20036Rules.


        :param display_size: The display_size of this InlineResponse20036Rules.  # noqa: E501
        :type: float
        """

        self._display_size = display_size

    @property
    def fraq_int(self):
        """Gets the fraq_int of this InlineResponse20036Rules.  # noqa: E501

        decimal places for fractional order size  # noqa: E501

        :return: The fraq_int of this InlineResponse20036Rules.  # noqa: E501
        :rtype: float
        """
        return self._fraq_int

    @fraq_int.setter
    def fraq_int(self, fraq_int):
        """Sets the fraq_int of this InlineResponse20036Rules.

        decimal places for fractional order size  # noqa: E501

        :param fraq_int: The fraq_int of this InlineResponse20036Rules.  # noqa: E501
        :type: float
        """

        self._fraq_int = fraq_int

    @property
    def cash_ccy(self):
        """Gets the cash_ccy of this InlineResponse20036Rules.  # noqa: E501

        Cash currency for the contract  # noqa: E501

        :return: The cash_ccy of this InlineResponse20036Rules.  # noqa: E501
        :rtype: str
        """
        return self._cash_ccy

    @cash_ccy.setter
    def cash_ccy(self, cash_ccy):
        """Sets the cash_ccy of this InlineResponse20036Rules.

        Cash currency for the contract  # noqa: E501

        :param cash_ccy: The cash_ccy of this InlineResponse20036Rules.  # noqa: E501
        :type: str
        """

        self._cash_ccy = cash_ccy

    @property
    def cash_qty_incr(self):
        """Gets the cash_qty_incr of this InlineResponse20036Rules.  # noqa: E501

        Increment value for cash quantity  # noqa: E501

        :return: The cash_qty_incr of this InlineResponse20036Rules.  # noqa: E501
        :rtype: float
        """
        return self._cash_qty_incr

    @cash_qty_incr.setter
    def cash_qty_incr(self, cash_qty_incr):
        """Sets the cash_qty_incr of this InlineResponse20036Rules.

        Increment value for cash quantity  # noqa: E501

        :param cash_qty_incr: The cash_qty_incr of this InlineResponse20036Rules.  # noqa: E501
        :type: float
        """

        self._cash_qty_incr = cash_qty_incr

    @property
    def price_magnifier(self):
        """Gets the price_magnifier of this InlineResponse20036Rules.  # noqa: E501

        Price Magnifier  # noqa: E501

        :return: The price_magnifier of this InlineResponse20036Rules.  # noqa: E501
        :rtype: float
        """
        return self._price_magnifier

    @price_magnifier.setter
    def price_magnifier(self, price_magnifier):
        """Sets the price_magnifier of this InlineResponse20036Rules.

        Price Magnifier  # noqa: E501

        :param price_magnifier: The price_magnifier of this InlineResponse20036Rules.  # noqa: E501
        :type: float
        """

        self._price_magnifier = price_magnifier

    @property
    def negative_capable(self):
        """Gets the negative_capable of this InlineResponse20036Rules.  # noqa: E501

        trading negative price support  # noqa: E501

        :return: The negative_capable of this InlineResponse20036Rules.  # noqa: E501
        :rtype: bool
        """
        return self._negative_capable

    @negative_capable.setter
    def negative_capable(self, negative_capable):
        """Sets the negative_capable of this InlineResponse20036Rules.

        trading negative price support  # noqa: E501

        :param negative_capable: The negative_capable of this InlineResponse20036Rules.  # noqa: E501
        :type: bool
        """

        self._negative_capable = negative_capable

    @property
    def increment(self):
        """Gets the increment of this InlineResponse20036Rules.  # noqa: E501

        Price increment value  # noqa: E501

        :return: The increment of this InlineResponse20036Rules.  # noqa: E501
        :rtype: float
        """
        return self._increment

    @increment.setter
    def increment(self, increment):
        """Sets the increment of this InlineResponse20036Rules.

        Price increment value  # noqa: E501

        :param increment: The increment of this InlineResponse20036Rules.  # noqa: E501
        :type: float
        """

        self._increment = increment

    @property
    def increment_digits(self):
        """Gets the increment_digits of this InlineResponse20036Rules.  # noqa: E501

        Number of digits for price increment  # noqa: E501

        :return: The increment_digits of this InlineResponse20036Rules.  # noqa: E501
        :rtype: int
        """
        return self._increment_digits

    @increment_digits.setter
    def increment_digits(self, increment_digits):
        """Sets the increment_digits of this InlineResponse20036Rules.

        Number of digits for price increment  # noqa: E501

        :param increment_digits: The increment_digits of this InlineResponse20036Rules.  # noqa: E501
        :type: int
        """

        self._increment_digits = increment_digits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20036Rules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20036Rules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
