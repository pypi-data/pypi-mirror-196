# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IbcustentityinfoAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'street': 'str',
        'street2': 'str',
        'city': 'str',
        'state': 'str',
        'postal_code': 'str',
        'country': 'str',
        'country_code': 'str',
        'compact': 'str'
    }

    attribute_map = {
        'street': 'street',
        'street2': 'street2',
        'city': 'city',
        'state': 'state',
        'postal_code': 'postalCode',
        'country': 'country',
        'country_code': 'countryCode',
        'compact': 'compact'
    }

    def __init__(self, street=None, street2=None, city=None, state=None, postal_code=None, country=None, country_code=None, compact=None):  # noqa: E501
        """IbcustentityinfoAddress - a model defined in Swagger"""  # noqa: E501
        self._street = None
        self._street2 = None
        self._city = None
        self._state = None
        self._postal_code = None
        self._country = None
        self._country_code = None
        self._compact = None
        self.discriminator = None
        if street is not None:
            self.street = street
        if street2 is not None:
            self.street2 = street2
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if postal_code is not None:
            self.postal_code = postal_code
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code
        if compact is not None:
            self.compact = compact

    @property
    def street(self):
        """Gets the street of this IbcustentityinfoAddress.  # noqa: E501


        :return: The street of this IbcustentityinfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this IbcustentityinfoAddress.


        :param street: The street of this IbcustentityinfoAddress.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def street2(self):
        """Gets the street2 of this IbcustentityinfoAddress.  # noqa: E501


        :return: The street2 of this IbcustentityinfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this IbcustentityinfoAddress.


        :param street2: The street2 of this IbcustentityinfoAddress.  # noqa: E501
        :type: str
        """

        self._street2 = street2

    @property
    def city(self):
        """Gets the city of this IbcustentityinfoAddress.  # noqa: E501


        :return: The city of this IbcustentityinfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this IbcustentityinfoAddress.


        :param city: The city of this IbcustentityinfoAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this IbcustentityinfoAddress.  # noqa: E501


        :return: The state of this IbcustentityinfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IbcustentityinfoAddress.


        :param state: The state of this IbcustentityinfoAddress.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def postal_code(self):
        """Gets the postal_code of this IbcustentityinfoAddress.  # noqa: E501


        :return: The postal_code of this IbcustentityinfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this IbcustentityinfoAddress.


        :param postal_code: The postal_code of this IbcustentityinfoAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this IbcustentityinfoAddress.  # noqa: E501


        :return: The country of this IbcustentityinfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this IbcustentityinfoAddress.


        :param country: The country of this IbcustentityinfoAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this IbcustentityinfoAddress.  # noqa: E501


        :return: The country_code of this IbcustentityinfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this IbcustentityinfoAddress.


        :param country_code: The country_code of this IbcustentityinfoAddress.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def compact(self):
        """Gets the compact of this IbcustentityinfoAddress.  # noqa: E501


        :return: The compact of this IbcustentityinfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._compact

    @compact.setter
    def compact(self, compact):
        """Sets the compact of this IbcustentityinfoAddress.


        :param compact: The compact of this IbcustentityinfoAddress.  # noqa: E501
        :type: str
        """

        self._compact = compact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IbcustentityinfoAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IbcustentityinfoAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
