# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecdefInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conid': 'int',
        'currency': 'str',
        'cross_currency': 'bool',
        'time': 'int',
        'chinese_name': 'str',
        'all_exchanges': 'str',
        'listing_exchange': 'str',
        'name': 'str',
        'asset_class': 'str',
        'expiry': 'str',
        'last_trading_day': 'str',
        'group': 'str',
        'put_or_call': 'str',
        'sector': 'str',
        'sector_group': 'str',
        'strike': 'float',
        'ticker': 'str',
        'und_conid': 'int',
        'multiplier': 'int',
        'type': 'str',
        'und_comp': 'str',
        'und_sym': 'str',
        'has_options': 'bool',
        'full_name': 'str',
        'is_us': 'bool',
        'increment_rules': 'object'
    }

    attribute_map = {
        'conid': 'conid',
        'currency': 'currency',
        'cross_currency': 'crossCurrency',
        'time': 'time',
        'chinese_name': 'chineseName',
        'all_exchanges': 'allExchanges',
        'listing_exchange': 'listingExchange',
        'name': 'name',
        'asset_class': 'assetClass',
        'expiry': 'expiry',
        'last_trading_day': 'lastTradingDay',
        'group': 'group',
        'put_or_call': 'putOrCall',
        'sector': 'sector',
        'sector_group': 'sectorGroup',
        'strike': 'strike',
        'ticker': 'ticker',
        'und_conid': 'undConid',
        'multiplier': 'multiplier',
        'type': 'type',
        'und_comp': 'undComp',
        'und_sym': 'undSym',
        'has_options': 'hasOptions',
        'full_name': 'fullName',
        'is_us': 'isUS',
        'increment_rules': 'incrementRules'
    }

    def __init__(self, conid=None, currency=None, cross_currency=None, time=None, chinese_name=None, all_exchanges=None, listing_exchange=None, name=None, asset_class=None, expiry=None, last_trading_day=None, group=None, put_or_call=None, sector=None, sector_group=None, strike=None, ticker=None, und_conid=None, multiplier=None, type=None, und_comp=None, und_sym=None, has_options=None, full_name=None, is_us=None, increment_rules=None):  # noqa: E501
        """SecdefInner - a model defined in Swagger"""  # noqa: E501
        self._conid = None
        self._currency = None
        self._cross_currency = None
        self._time = None
        self._chinese_name = None
        self._all_exchanges = None
        self._listing_exchange = None
        self._name = None
        self._asset_class = None
        self._expiry = None
        self._last_trading_day = None
        self._group = None
        self._put_or_call = None
        self._sector = None
        self._sector_group = None
        self._strike = None
        self._ticker = None
        self._und_conid = None
        self._multiplier = None
        self._type = None
        self._und_comp = None
        self._und_sym = None
        self._has_options = None
        self._full_name = None
        self._is_us = None
        self._increment_rules = None
        self.discriminator = None
        if conid is not None:
            self.conid = conid
        if currency is not None:
            self.currency = currency
        if cross_currency is not None:
            self.cross_currency = cross_currency
        if time is not None:
            self.time = time
        if chinese_name is not None:
            self.chinese_name = chinese_name
        if all_exchanges is not None:
            self.all_exchanges = all_exchanges
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if name is not None:
            self.name = name
        if asset_class is not None:
            self.asset_class = asset_class
        if expiry is not None:
            self.expiry = expiry
        if last_trading_day is not None:
            self.last_trading_day = last_trading_day
        if group is not None:
            self.group = group
        if put_or_call is not None:
            self.put_or_call = put_or_call
        if sector is not None:
            self.sector = sector
        if sector_group is not None:
            self.sector_group = sector_group
        if strike is not None:
            self.strike = strike
        if ticker is not None:
            self.ticker = ticker
        if und_conid is not None:
            self.und_conid = und_conid
        if multiplier is not None:
            self.multiplier = multiplier
        if type is not None:
            self.type = type
        if und_comp is not None:
            self.und_comp = und_comp
        if und_sym is not None:
            self.und_sym = und_sym
        if has_options is not None:
            self.has_options = has_options
        if full_name is not None:
            self.full_name = full_name
        if is_us is not None:
            self.is_us = is_us
        if increment_rules is not None:
            self.increment_rules = increment_rules

    @property
    def conid(self):
        """Gets the conid of this SecdefInner.  # noqa: E501

        IBKR contract identifier.  # noqa: E501

        :return: The conid of this SecdefInner.  # noqa: E501
        :rtype: int
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this SecdefInner.

        IBKR contract identifier.  # noqa: E501

        :param conid: The conid of this SecdefInner.  # noqa: E501
        :type: int
        """

        self._conid = conid

    @property
    def currency(self):
        """Gets the currency of this SecdefInner.  # noqa: E501

        Currency contract trades in.  # noqa: E501

        :return: The currency of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SecdefInner.

        Currency contract trades in.  # noqa: E501

        :param currency: The currency of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def cross_currency(self):
        """Gets the cross_currency of this SecdefInner.  # noqa: E501

        Defines if a derivative contract has a different currency.  # noqa: E501

        :return: The cross_currency of this SecdefInner.  # noqa: E501
        :rtype: bool
        """
        return self._cross_currency

    @cross_currency.setter
    def cross_currency(self, cross_currency):
        """Sets the cross_currency of this SecdefInner.

        Defines if a derivative contract has a different currency.  # noqa: E501

        :param cross_currency: The cross_currency of this SecdefInner.  # noqa: E501
        :type: bool
        """

        self._cross_currency = cross_currency

    @property
    def time(self):
        """Gets the time of this SecdefInner.  # noqa: E501


        :return: The time of this SecdefInner.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SecdefInner.


        :param time: The time of this SecdefInner.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def chinese_name(self):
        """Gets the chinese_name of this SecdefInner.  # noqa: E501

        HTML encoded company description in Chinese.  # noqa: E501

        :return: The chinese_name of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._chinese_name

    @chinese_name.setter
    def chinese_name(self, chinese_name):
        """Sets the chinese_name of this SecdefInner.

        HTML encoded company description in Chinese.  # noqa: E501

        :param chinese_name: The chinese_name of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._chinese_name = chinese_name

    @property
    def all_exchanges(self):
        """Gets the all_exchanges of this SecdefInner.  # noqa: E501

        List of exchanges and venues contract trades.  # noqa: E501

        :return: The all_exchanges of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._all_exchanges

    @all_exchanges.setter
    def all_exchanges(self, all_exchanges):
        """Sets the all_exchanges of this SecdefInner.

        List of exchanges and venues contract trades.  # noqa: E501

        :param all_exchanges: The all_exchanges of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._all_exchanges = all_exchanges

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this SecdefInner.  # noqa: E501

        Main trading venue.  # noqa: E501

        :return: The listing_exchange of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this SecdefInner.

        Main trading venue.  # noqa: E501

        :param listing_exchange: The listing_exchange of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def name(self):
        """Gets the name of this SecdefInner.  # noqa: E501

        Company Name.  # noqa: E501

        :return: The name of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecdefInner.

        Company Name.  # noqa: E501

        :param name: The name of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def asset_class(self):
        """Gets the asset_class of this SecdefInner.  # noqa: E501

        Group of financial instruments which have similar financial characteristics and behave similar in the marketplace.  # noqa: E501

        :return: The asset_class of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class):
        """Sets the asset_class of this SecdefInner.

        Group of financial instruments which have similar financial characteristics and behave similar in the marketplace.  # noqa: E501

        :param asset_class: The asset_class of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._asset_class = asset_class

    @property
    def expiry(self):
        """Gets the expiry of this SecdefInner.  # noqa: E501

        Specific data contract expires.  # noqa: E501

        :return: The expiry of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this SecdefInner.

        Specific data contract expires.  # noqa: E501

        :param expiry: The expiry of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._expiry = expiry

    @property
    def last_trading_day(self):
        """Gets the last_trading_day of this SecdefInner.  # noqa: E501

        Final day derivative contract can be traded before delivery of the underlying asset or cash settlement.  # noqa: E501

        :return: The last_trading_day of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._last_trading_day

    @last_trading_day.setter
    def last_trading_day(self, last_trading_day):
        """Sets the last_trading_day of this SecdefInner.

        Final day derivative contract can be traded before delivery of the underlying asset or cash settlement.  # noqa: E501

        :param last_trading_day: The last_trading_day of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._last_trading_day = last_trading_day

    @property
    def group(self):
        """Gets the group of this SecdefInner.  # noqa: E501

        Potential characteristic of each product.  # noqa: E501

        :return: The group of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SecdefInner.

        Potential characteristic of each product.  # noqa: E501

        :param group: The group of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def put_or_call(self):
        """Gets the put_or_call of this SecdefInner.  # noqa: E501

        Defines the right to buy or sell of the underlying security.  # noqa: E501

        :return: The put_or_call of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._put_or_call

    @put_or_call.setter
    def put_or_call(self, put_or_call):
        """Sets the put_or_call of this SecdefInner.

        Defines the right to buy or sell of the underlying security.  # noqa: E501

        :param put_or_call: The put_or_call of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._put_or_call = put_or_call

    @property
    def sector(self):
        """Gets the sector of this SecdefInner.  # noqa: E501

        The category of the economy.  # noqa: E501

        :return: The sector of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this SecdefInner.

        The category of the economy.  # noqa: E501

        :param sector: The sector of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def sector_group(self):
        """Gets the sector_group of this SecdefInner.  # noqa: E501

        Stock Group contract belongs too.  # noqa: E501

        :return: The sector_group of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._sector_group

    @sector_group.setter
    def sector_group(self, sector_group):
        """Sets the sector_group of this SecdefInner.

        Stock Group contract belongs too.  # noqa: E501

        :param sector_group: The sector_group of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._sector_group = sector_group

    @property
    def strike(self):
        """Gets the strike of this SecdefInner.  # noqa: E501

        Set price at which a derivative contract can be bought or sold.  # noqa: E501

        :return: The strike of this SecdefInner.  # noqa: E501
        :rtype: float
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this SecdefInner.

        Set price at which a derivative contract can be bought or sold.  # noqa: E501

        :param strike: The strike of this SecdefInner.  # noqa: E501
        :type: float
        """

        self._strike = strike

    @property
    def ticker(self):
        """Gets the ticker of this SecdefInner.  # noqa: E501

        Contract symbol.  # noqa: E501

        :return: The ticker of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this SecdefInner.

        Contract symbol.  # noqa: E501

        :param ticker: The ticker of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def und_conid(self):
        """Gets the und_conid of this SecdefInner.  # noqa: E501

        Underlying contract identifier.  # noqa: E501

        :return: The und_conid of this SecdefInner.  # noqa: E501
        :rtype: int
        """
        return self._und_conid

    @und_conid.setter
    def und_conid(self, und_conid):
        """Sets the und_conid of this SecdefInner.

        Underlying contract identifier.  # noqa: E501

        :param und_conid: The und_conid of this SecdefInner.  # noqa: E501
        :type: int
        """

        self._und_conid = und_conid

    @property
    def multiplier(self):
        """Gets the multiplier of this SecdefInner.  # noqa: E501

        Multiplier for total premium paid or received for derivative contract.  # noqa: E501

        :return: The multiplier of this SecdefInner.  # noqa: E501
        :rtype: int
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this SecdefInner.

        Multiplier for total premium paid or received for derivative contract.  # noqa: E501

        :param multiplier: The multiplier of this SecdefInner.  # noqa: E501
        :type: int
        """

        self._multiplier = multiplier

    @property
    def type(self):
        """Gets the type of this SecdefInner.  # noqa: E501

        Stock type.  # noqa: E501

        :return: The type of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SecdefInner.

        Stock type.  # noqa: E501

        :param type: The type of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def und_comp(self):
        """Gets the und_comp of this SecdefInner.  # noqa: E501

        Company name for underlying contract.  # noqa: E501

        :return: The und_comp of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._und_comp

    @und_comp.setter
    def und_comp(self, und_comp):
        """Sets the und_comp of this SecdefInner.

        Company name for underlying contract.  # noqa: E501

        :param und_comp: The und_comp of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._und_comp = und_comp

    @property
    def und_sym(self):
        """Gets the und_sym of this SecdefInner.  # noqa: E501

        IBKR Symbol for underlying contract.  # noqa: E501

        :return: The und_sym of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._und_sym

    @und_sym.setter
    def und_sym(self, und_sym):
        """Sets the und_sym of this SecdefInner.

        IBKR Symbol for underlying contract.  # noqa: E501

        :param und_sym: The und_sym of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._und_sym = und_sym

    @property
    def has_options(self):
        """Gets the has_options of this SecdefInner.  # noqa: E501

        If contract has an option.  # noqa: E501

        :return: The has_options of this SecdefInner.  # noqa: E501
        :rtype: bool
        """
        return self._has_options

    @has_options.setter
    def has_options(self, has_options):
        """Sets the has_options of this SecdefInner.

        If contract has an option.  # noqa: E501

        :param has_options: The has_options of this SecdefInner.  # noqa: E501
        :type: bool
        """

        self._has_options = has_options

    @property
    def full_name(self):
        """Gets the full_name of this SecdefInner.  # noqa: E501

        Formatted company name with underlying symbol, expiration, strike, right.  # noqa: E501

        :return: The full_name of this SecdefInner.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SecdefInner.

        Formatted company name with underlying symbol, expiration, strike, right.  # noqa: E501

        :param full_name: The full_name of this SecdefInner.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def is_us(self):
        """Gets the is_us of this SecdefInner.  # noqa: E501

        If contract is a US contract. Currently supported for stocks, options and warrants.  # noqa: E501

        :return: The is_us of this SecdefInner.  # noqa: E501
        :rtype: bool
        """
        return self._is_us

    @is_us.setter
    def is_us(self, is_us):
        """Sets the is_us of this SecdefInner.

        If contract is a US contract. Currently supported for stocks, options and warrants.  # noqa: E501

        :param is_us: The is_us of this SecdefInner.  # noqa: E501
        :type: bool
        """

        self._is_us = is_us

    @property
    def increment_rules(self):
        """Gets the increment_rules of this SecdefInner.  # noqa: E501

        Price increment value contract trades.  # noqa: E501

        :return: The increment_rules of this SecdefInner.  # noqa: E501
        :rtype: object
        """
        return self._increment_rules

    @increment_rules.setter
    def increment_rules(self, increment_rules):
        """Sets the increment_rules of this SecdefInner.

        Price increment value contract trades.  # noqa: E501

        :param increment_rules: The increment_rules of this SecdefInner.  # noqa: E501
        :type: object
        """

        self._increment_rules = increment_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecdefInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecdefInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
