# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acct': 'str',
        'conid': 'int',
        'order_desc': 'str',
        'description1': 'str',
        'ticker': 'str',
        'sec_type': 'str',
        'listing_exchange': 'str',
        'remaining_quantity': 'str',
        'filled_quantity': 'str',
        'company_name': 'str',
        'status': 'str',
        'orig_order_type': 'str',
        'side': 'str',
        'price': 'float',
        'bg_color': 'str',
        'fg_color': 'str',
        'order_id': 'int',
        'parent_id': 'int',
        'order_ref': 'str'
    }

    attribute_map = {
        'acct': 'acct',
        'conid': 'conid',
        'order_desc': 'orderDesc',
        'description1': 'description1',
        'ticker': 'ticker',
        'sec_type': 'secType',
        'listing_exchange': 'listingExchange',
        'remaining_quantity': 'remainingQuantity',
        'filled_quantity': 'filledQuantity',
        'company_name': 'companyName',
        'status': 'status',
        'orig_order_type': 'origOrderType',
        'side': 'side',
        'price': 'price',
        'bg_color': 'bgColor',
        'fg_color': 'fgColor',
        'order_id': 'orderId',
        'parent_id': 'parentId',
        'order_ref': 'order_ref'
    }

    def __init__(self, acct=None, conid=None, order_desc=None, description1=None, ticker=None, sec_type=None, listing_exchange=None, remaining_quantity=None, filled_quantity=None, company_name=None, status=None, orig_order_type=None, side=None, price=None, bg_color=None, fg_color=None, order_id=None, parent_id=None, order_ref=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501
        self._acct = None
        self._conid = None
        self._order_desc = None
        self._description1 = None
        self._ticker = None
        self._sec_type = None
        self._listing_exchange = None
        self._remaining_quantity = None
        self._filled_quantity = None
        self._company_name = None
        self._status = None
        self._orig_order_type = None
        self._side = None
        self._price = None
        self._bg_color = None
        self._fg_color = None
        self._order_id = None
        self._parent_id = None
        self._order_ref = None
        self.discriminator = None
        if acct is not None:
            self.acct = acct
        if conid is not None:
            self.conid = conid
        if order_desc is not None:
            self.order_desc = order_desc
        if description1 is not None:
            self.description1 = description1
        if ticker is not None:
            self.ticker = ticker
        if sec_type is not None:
            self.sec_type = sec_type
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if remaining_quantity is not None:
            self.remaining_quantity = remaining_quantity
        if filled_quantity is not None:
            self.filled_quantity = filled_quantity
        if company_name is not None:
            self.company_name = company_name
        if status is not None:
            self.status = status
        if orig_order_type is not None:
            self.orig_order_type = orig_order_type
        if side is not None:
            self.side = side
        if price is not None:
            self.price = price
        if bg_color is not None:
            self.bg_color = bg_color
        if fg_color is not None:
            self.fg_color = fg_color
        if order_id is not None:
            self.order_id = order_id
        if parent_id is not None:
            self.parent_id = parent_id
        if order_ref is not None:
            self.order_ref = order_ref

    @property
    def acct(self):
        """Gets the acct of this Order.  # noqa: E501

        account id  # noqa: E501

        :return: The acct of this Order.  # noqa: E501
        :rtype: str
        """
        return self._acct

    @acct.setter
    def acct(self, acct):
        """Sets the acct of this Order.

        account id  # noqa: E501

        :param acct: The acct of this Order.  # noqa: E501
        :type: str
        """

        self._acct = acct

    @property
    def conid(self):
        """Gets the conid of this Order.  # noqa: E501


        :return: The conid of this Order.  # noqa: E501
        :rtype: int
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this Order.


        :param conid: The conid of this Order.  # noqa: E501
        :type: int
        """

        self._conid = conid

    @property
    def order_desc(self):
        """Gets the order_desc of this Order.  # noqa: E501


        :return: The order_desc of this Order.  # noqa: E501
        :rtype: str
        """
        return self._order_desc

    @order_desc.setter
    def order_desc(self, order_desc):
        """Sets the order_desc of this Order.


        :param order_desc: The order_desc of this Order.  # noqa: E501
        :type: str
        """

        self._order_desc = order_desc

    @property
    def description1(self):
        """Gets the description1 of this Order.  # noqa: E501


        :return: The description1 of this Order.  # noqa: E501
        :rtype: str
        """
        return self._description1

    @description1.setter
    def description1(self, description1):
        """Sets the description1 of this Order.


        :param description1: The description1 of this Order.  # noqa: E501
        :type: str
        """

        self._description1 = description1

    @property
    def ticker(self):
        """Gets the ticker of this Order.  # noqa: E501

        for example FB  # noqa: E501

        :return: The ticker of this Order.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this Order.

        for example FB  # noqa: E501

        :param ticker: The ticker of this Order.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def sec_type(self):
        """Gets the sec_type of this Order.  # noqa: E501

        for example STK  # noqa: E501

        :return: The sec_type of this Order.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this Order.

        for example STK  # noqa: E501

        :param sec_type: The sec_type of this Order.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this Order.  # noqa: E501

        for example NASDAQ.NMS  # noqa: E501

        :return: The listing_exchange of this Order.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this Order.

        for example NASDAQ.NMS  # noqa: E501

        :param listing_exchange: The listing_exchange of this Order.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def remaining_quantity(self):
        """Gets the remaining_quantity of this Order.  # noqa: E501


        :return: The remaining_quantity of this Order.  # noqa: E501
        :rtype: str
        """
        return self._remaining_quantity

    @remaining_quantity.setter
    def remaining_quantity(self, remaining_quantity):
        """Sets the remaining_quantity of this Order.


        :param remaining_quantity: The remaining_quantity of this Order.  # noqa: E501
        :type: str
        """

        self._remaining_quantity = remaining_quantity

    @property
    def filled_quantity(self):
        """Gets the filled_quantity of this Order.  # noqa: E501


        :return: The filled_quantity of this Order.  # noqa: E501
        :rtype: str
        """
        return self._filled_quantity

    @filled_quantity.setter
    def filled_quantity(self, filled_quantity):
        """Sets the filled_quantity of this Order.


        :param filled_quantity: The filled_quantity of this Order.  # noqa: E501
        :type: str
        """

        self._filled_quantity = filled_quantity

    @property
    def company_name(self):
        """Gets the company_name of this Order.  # noqa: E501


        :return: The company_name of this Order.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Order.


        :param company_name: The company_name of this Order.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def status(self):
        """Gets the status of this Order.  # noqa: E501

        * PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                   Occurs most commonly if an exchange is closed. * PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. * PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                  The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified. * Submitted - Indicates that the order has been accepted at the order destination and is working. * Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.               This could occur unexpectedly when IB or the destination has rejected the order. * Filled - Indicates that the order has been completely filled. * Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,              or if the order was to short a security and shares have not yet been located.   # noqa: E501

        :return: The status of this Order.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.

        * PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                   Occurs most commonly if an exchange is closed. * PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. * PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                  The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified. * Submitted - Indicates that the order has been accepted at the order destination and is working. * Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.               This could occur unexpectedly when IB or the destination has rejected the order. * Filled - Indicates that the order has been completely filled. * Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,              or if the order was to short a security and shares have not yet been located.   # noqa: E501

        :param status: The status of this Order.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def orig_order_type(self):
        """Gets the orig_order_type of this Order.  # noqa: E501

        for example Limit  # noqa: E501

        :return: The orig_order_type of this Order.  # noqa: E501
        :rtype: str
        """
        return self._orig_order_type

    @orig_order_type.setter
    def orig_order_type(self, orig_order_type):
        """Sets the orig_order_type of this Order.

        for example Limit  # noqa: E501

        :param orig_order_type: The orig_order_type of this Order.  # noqa: E501
        :type: str
        """

        self._orig_order_type = orig_order_type

    @property
    def side(self):
        """Gets the side of this Order.  # noqa: E501

        BUY or SELL  # noqa: E501

        :return: The side of this Order.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Order.

        BUY or SELL  # noqa: E501

        :param side: The side of this Order.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def price(self):
        """Gets the price of this Order.  # noqa: E501


        :return: The price of this Order.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Order.


        :param price: The price of this Order.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def bg_color(self):
        """Gets the bg_color of this Order.  # noqa: E501

        back-ground color  # noqa: E501

        :return: The bg_color of this Order.  # noqa: E501
        :rtype: str
        """
        return self._bg_color

    @bg_color.setter
    def bg_color(self, bg_color):
        """Sets the bg_color of this Order.

        back-ground color  # noqa: E501

        :param bg_color: The bg_color of this Order.  # noqa: E501
        :type: str
        """

        self._bg_color = bg_color

    @property
    def fg_color(self):
        """Gets the fg_color of this Order.  # noqa: E501


        :return: The fg_color of this Order.  # noqa: E501
        :rtype: str
        """
        return self._fg_color

    @fg_color.setter
    def fg_color(self, fg_color):
        """Sets the fg_color of this Order.


        :param fg_color: The fg_color of this Order.  # noqa: E501
        :type: str
        """

        self._fg_color = fg_color

    @property
    def order_id(self):
        """Gets the order_id of this Order.  # noqa: E501


        :return: The order_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Order.


        :param order_id: The order_id of this Order.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Order.  # noqa: E501

        Only exists in child order of bracket  # noqa: E501

        :return: The parent_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Order.

        Only exists in child order of bracket  # noqa: E501

        :param parent_id: The parent_id of this Order.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def order_ref(self):
        """Gets the order_ref of this Order.  # noqa: E501

        User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.  # noqa: E501

        :return: The order_ref of this Order.  # noqa: E501
        :rtype: str
        """
        return self._order_ref

    @order_ref.setter
    def order_ref(self, order_ref):
        """Sets the order_ref of this Order.

        User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.  # noqa: E501

        :param order_ref: The order_ref of this Order.  # noqa: E501
        :type: str
        """

        self._order_ref = order_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
