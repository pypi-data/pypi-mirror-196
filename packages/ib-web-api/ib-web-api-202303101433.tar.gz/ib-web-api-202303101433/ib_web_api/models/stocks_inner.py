# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StocksInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'chinese_name': 'str',
        'asset_class': 'str',
        'contracts': 'list[object]'
    }

    attribute_map = {
        'name': 'name',
        'chinese_name': 'chineseName',
        'asset_class': 'assetClass',
        'contracts': 'contracts'
    }

    def __init__(self, name=None, chinese_name=None, asset_class=None, contracts=None):  # noqa: E501
        """StocksInner - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._chinese_name = None
        self._asset_class = None
        self._contracts = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if chinese_name is not None:
            self.chinese_name = chinese_name
        if asset_class is not None:
            self.asset_class = asset_class
        if contracts is not None:
            self.contracts = contracts

    @property
    def name(self):
        """Gets the name of this StocksInner.  # noqa: E501

        company name  # noqa: E501

        :return: The name of this StocksInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StocksInner.

        company name  # noqa: E501

        :param name: The name of this StocksInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def chinese_name(self):
        """Gets the chinese_name of this StocksInner.  # noqa: E501

        company name in Chinese  # noqa: E501

        :return: The chinese_name of this StocksInner.  # noqa: E501
        :rtype: str
        """
        return self._chinese_name

    @chinese_name.setter
    def chinese_name(self, chinese_name):
        """Sets the chinese_name of this StocksInner.

        company name in Chinese  # noqa: E501

        :param chinese_name: The chinese_name of this StocksInner.  # noqa: E501
        :type: str
        """

        self._chinese_name = chinese_name

    @property
    def asset_class(self):
        """Gets the asset_class of this StocksInner.  # noqa: E501


        :return: The asset_class of this StocksInner.  # noqa: E501
        :rtype: str
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class):
        """Sets the asset_class of this StocksInner.


        :param asset_class: The asset_class of this StocksInner.  # noqa: E501
        :type: str
        """

        self._asset_class = asset_class

    @property
    def contracts(self):
        """Gets the contracts of this StocksInner.  # noqa: E501

        array of contracts from different exchanges  # noqa: E501

        :return: The contracts of this StocksInner.  # noqa: E501
        :rtype: list[object]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this StocksInner.

        array of contracts from different exchanges  # noqa: E501

        :param contracts: The contracts of this StocksInner.  # noqa: E501
        :type: list[object]
        """

        self._contracts = contracts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StocksInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StocksInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
