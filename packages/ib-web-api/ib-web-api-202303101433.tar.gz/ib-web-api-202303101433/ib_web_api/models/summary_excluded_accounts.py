# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SummaryExcludedAccounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_attempt': 'str',
        'fi_name': 'str',
        'acct_title': 'str',
        'acct_num_at_fi': 'str',
        'acct_id': 'str',
        'last_update': 'str',
        'harvest_code': 'int',
        'last_update_status_code': 'str',
        'rc': 'int'
    }

    attribute_map = {
        'last_update_attempt': 'lastUpdateAttempt',
        'fi_name': 'fiName',
        'acct_title': 'acctTitle',
        'acct_num_at_fi': 'acctNumAtFI',
        'acct_id': 'acctId',
        'last_update': 'lastUpdate',
        'harvest_code': 'harvestCode',
        'last_update_status_code': 'lastUpdateStatusCode',
        'rc': 'rc'
    }

    def __init__(self, last_update_attempt=None, fi_name=None, acct_title=None, acct_num_at_fi=None, acct_id=None, last_update=None, harvest_code=None, last_update_status_code=None, rc=None):  # noqa: E501
        """SummaryExcludedAccounts - a model defined in Swagger"""  # noqa: E501
        self._last_update_attempt = None
        self._fi_name = None
        self._acct_title = None
        self._acct_num_at_fi = None
        self._acct_id = None
        self._last_update = None
        self._harvest_code = None
        self._last_update_status_code = None
        self._rc = None
        self.discriminator = None
        if last_update_attempt is not None:
            self.last_update_attempt = last_update_attempt
        if fi_name is not None:
            self.fi_name = fi_name
        if acct_title is not None:
            self.acct_title = acct_title
        if acct_num_at_fi is not None:
            self.acct_num_at_fi = acct_num_at_fi
        if acct_id is not None:
            self.acct_id = acct_id
        if last_update is not None:
            self.last_update = last_update
        if harvest_code is not None:
            self.harvest_code = harvest_code
        if last_update_status_code is not None:
            self.last_update_status_code = last_update_status_code
        if rc is not None:
            self.rc = rc

    @property
    def last_update_attempt(self):
        """Gets the last_update_attempt of this SummaryExcludedAccounts.  # noqa: E501


        :return: The last_update_attempt of this SummaryExcludedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._last_update_attempt

    @last_update_attempt.setter
    def last_update_attempt(self, last_update_attempt):
        """Sets the last_update_attempt of this SummaryExcludedAccounts.


        :param last_update_attempt: The last_update_attempt of this SummaryExcludedAccounts.  # noqa: E501
        :type: str
        """

        self._last_update_attempt = last_update_attempt

    @property
    def fi_name(self):
        """Gets the fi_name of this SummaryExcludedAccounts.  # noqa: E501


        :return: The fi_name of this SummaryExcludedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._fi_name

    @fi_name.setter
    def fi_name(self, fi_name):
        """Sets the fi_name of this SummaryExcludedAccounts.


        :param fi_name: The fi_name of this SummaryExcludedAccounts.  # noqa: E501
        :type: str
        """

        self._fi_name = fi_name

    @property
    def acct_title(self):
        """Gets the acct_title of this SummaryExcludedAccounts.  # noqa: E501


        :return: The acct_title of this SummaryExcludedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._acct_title

    @acct_title.setter
    def acct_title(self, acct_title):
        """Sets the acct_title of this SummaryExcludedAccounts.


        :param acct_title: The acct_title of this SummaryExcludedAccounts.  # noqa: E501
        :type: str
        """

        self._acct_title = acct_title

    @property
    def acct_num_at_fi(self):
        """Gets the acct_num_at_fi of this SummaryExcludedAccounts.  # noqa: E501


        :return: The acct_num_at_fi of this SummaryExcludedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._acct_num_at_fi

    @acct_num_at_fi.setter
    def acct_num_at_fi(self, acct_num_at_fi):
        """Sets the acct_num_at_fi of this SummaryExcludedAccounts.


        :param acct_num_at_fi: The acct_num_at_fi of this SummaryExcludedAccounts.  # noqa: E501
        :type: str
        """

        self._acct_num_at_fi = acct_num_at_fi

    @property
    def acct_id(self):
        """Gets the acct_id of this SummaryExcludedAccounts.  # noqa: E501


        :return: The acct_id of this SummaryExcludedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._acct_id

    @acct_id.setter
    def acct_id(self, acct_id):
        """Sets the acct_id of this SummaryExcludedAccounts.


        :param acct_id: The acct_id of this SummaryExcludedAccounts.  # noqa: E501
        :type: str
        """

        self._acct_id = acct_id

    @property
    def last_update(self):
        """Gets the last_update of this SummaryExcludedAccounts.  # noqa: E501


        :return: The last_update of this SummaryExcludedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this SummaryExcludedAccounts.


        :param last_update: The last_update of this SummaryExcludedAccounts.  # noqa: E501
        :type: str
        """

        self._last_update = last_update

    @property
    def harvest_code(self):
        """Gets the harvest_code of this SummaryExcludedAccounts.  # noqa: E501


        :return: The harvest_code of this SummaryExcludedAccounts.  # noqa: E501
        :rtype: int
        """
        return self._harvest_code

    @harvest_code.setter
    def harvest_code(self, harvest_code):
        """Sets the harvest_code of this SummaryExcludedAccounts.


        :param harvest_code: The harvest_code of this SummaryExcludedAccounts.  # noqa: E501
        :type: int
        """

        self._harvest_code = harvest_code

    @property
    def last_update_status_code(self):
        """Gets the last_update_status_code of this SummaryExcludedAccounts.  # noqa: E501


        :return: The last_update_status_code of this SummaryExcludedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._last_update_status_code

    @last_update_status_code.setter
    def last_update_status_code(self, last_update_status_code):
        """Sets the last_update_status_code of this SummaryExcludedAccounts.


        :param last_update_status_code: The last_update_status_code of this SummaryExcludedAccounts.  # noqa: E501
        :type: str
        """

        self._last_update_status_code = last_update_status_code

    @property
    def rc(self):
        """Gets the rc of this SummaryExcludedAccounts.  # noqa: E501


        :return: The rc of this SummaryExcludedAccounts.  # noqa: E501
        :rtype: int
        """
        return self._rc

    @rc.setter
    def rc(self, rc):
        """Sets the rc of this SummaryExcludedAccounts.


        :param rc: The rc of this SummaryExcludedAccounts.  # noqa: E501
        :type: int
        """

        self._rc = rc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SummaryExcludedAccounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryExcludedAccounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
