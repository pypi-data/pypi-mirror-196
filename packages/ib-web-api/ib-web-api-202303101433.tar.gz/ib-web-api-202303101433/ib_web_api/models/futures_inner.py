# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FuturesInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'conid': 'int',
        'underlying_conid': 'int',
        'expiration_date': 'str',
        'ltd': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'conid': 'conid',
        'underlying_conid': 'underlyingConid',
        'expiration_date': 'expirationDate',
        'ltd': 'ltd'
    }

    def __init__(self, symbol=None, conid=None, underlying_conid=None, expiration_date=None, ltd=None):  # noqa: E501
        """FuturesInner - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._conid = None
        self._underlying_conid = None
        self._expiration_date = None
        self._ltd = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if conid is not None:
            self.conid = conid
        if underlying_conid is not None:
            self.underlying_conid = underlying_conid
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if ltd is not None:
            self.ltd = ltd

    @property
    def symbol(self):
        """Gets the symbol of this FuturesInner.  # noqa: E501


        :return: The symbol of this FuturesInner.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this FuturesInner.


        :param symbol: The symbol of this FuturesInner.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def conid(self):
        """Gets the conid of this FuturesInner.  # noqa: E501

        conid of the future contract  # noqa: E501

        :return: The conid of this FuturesInner.  # noqa: E501
        :rtype: int
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this FuturesInner.

        conid of the future contract  # noqa: E501

        :param conid: The conid of this FuturesInner.  # noqa: E501
        :type: int
        """

        self._conid = conid

    @property
    def underlying_conid(self):
        """Gets the underlying_conid of this FuturesInner.  # noqa: E501


        :return: The underlying_conid of this FuturesInner.  # noqa: E501
        :rtype: int
        """
        return self._underlying_conid

    @underlying_conid.setter
    def underlying_conid(self, underlying_conid):
        """Sets the underlying_conid of this FuturesInner.


        :param underlying_conid: The underlying_conid of this FuturesInner.  # noqa: E501
        :type: int
        """

        self._underlying_conid = underlying_conid

    @property
    def expiration_date(self):
        """Gets the expiration_date of this FuturesInner.  # noqa: E501


        :return: The expiration_date of this FuturesInner.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this FuturesInner.


        :param expiration_date: The expiration_date of this FuturesInner.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def ltd(self):
        """Gets the ltd of this FuturesInner.  # noqa: E501

        last trading day  # noqa: E501

        :return: The ltd of this FuturesInner.  # noqa: E501
        :rtype: str
        """
        return self._ltd

    @ltd.setter
    def ltd(self, ltd):
        """Sets the ltd of this FuturesInner.

        last trading day  # noqa: E501

        :param ltd: The ltd of this FuturesInner.  # noqa: E501
        :type: str
        """

        self._ltd = ltd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FuturesInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FuturesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
