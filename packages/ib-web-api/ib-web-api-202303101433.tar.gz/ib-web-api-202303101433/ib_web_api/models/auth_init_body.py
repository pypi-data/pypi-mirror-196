# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthInitBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compete': 'bool',
        'locale': 'str',
        'mac': 'str',
        'machine_id': 'str',
        'username': 'str'
    }

    attribute_map = {
        'compete': 'compete',
        'locale': 'locale',
        'mac': 'mac',
        'machine_id': 'machineId',
        'username': 'username'
    }

    def __init__(self, compete=None, locale=None, mac=None, machine_id=None, username=None):  # noqa: E501
        """AuthInitBody - a model defined in Swagger"""  # noqa: E501
        self._compete = None
        self._locale = None
        self._mac = None
        self._machine_id = None
        self._username = None
        self.discriminator = None
        if compete is not None:
            self.compete = compete
        if locale is not None:
            self.locale = locale
        if mac is not None:
            self.mac = mac
        if machine_id is not None:
            self.machine_id = machine_id
        if username is not None:
            self.username = username

    @property
    def compete(self):
        """Gets the compete of this AuthInitBody.  # noqa: E501

        Allow competing CCP session to run  # noqa: E501

        :return: The compete of this AuthInitBody.  # noqa: E501
        :rtype: bool
        """
        return self._compete

    @compete.setter
    def compete(self, compete):
        """Sets the compete of this AuthInitBody.

        Allow competing CCP session to run  # noqa: E501

        :param compete: The compete of this AuthInitBody.  # noqa: E501
        :type: bool
        """

        self._compete = compete

    @property
    def locale(self):
        """Gets the locale of this AuthInitBody.  # noqa: E501

        Concatenate value for language and region, set to \"en_US\"  # noqa: E501

        :return: The locale of this AuthInitBody.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this AuthInitBody.

        Concatenate value for language and region, set to \"en_US\"  # noqa: E501

        :param locale: The locale of this AuthInitBody.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def mac(self):
        """Gets the mac of this AuthInitBody.  # noqa: E501

        Local MAC Address  # noqa: E501

        :return: The mac of this AuthInitBody.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this AuthInitBody.

        Local MAC Address  # noqa: E501

        :param mac: The mac of this AuthInitBody.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def machine_id(self):
        """Gets the machine_id of this AuthInitBody.  # noqa: E501

        Local machine ID  # noqa: E501

        :return: The machine_id of this AuthInitBody.  # noqa: E501
        :rtype: str
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this AuthInitBody.

        Local machine ID  # noqa: E501

        :param machine_id: The machine_id of this AuthInitBody.  # noqa: E501
        :type: str
        """

        self._machine_id = machine_id

    @property
    def username(self):
        """Gets the username of this AuthInitBody.  # noqa: E501

        Login user, set to dash \"-\"  # noqa: E501

        :return: The username of this AuthInitBody.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AuthInitBody.

        Login user, set to dash \"-\"  # noqa: E501

        :param username: The username of this AuthInitBody.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthInitBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthInitBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
