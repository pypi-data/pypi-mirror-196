# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'order_id': 'int',
        'alert_name': 'str',
        'alert_message': 'str',
        'alert_active': 'int',
        'alert_repeatable': 'int',
        'alert_email': 'str',
        'alert_send_message': 'int',
        'tif': 'str',
        'expire_time': 'str',
        'order_status': 'str',
        'outside_rth': 'int',
        'itws_orders_only': 'int',
        'alert_show_popup': 'int',
        'alert_triggered': 'bool',
        'order_not_editable': 'bool',
        'tool_id': 'int',
        'alert_play_audio': 'str',
        'alert_mta_currency': 'str',
        'alert_mta_defaults': 'str',
        'time_zone': 'str',
        'alert_default_type': 'str',
        'condition_size': 'int',
        'condition_outside_rth': 'int',
        'conditions': 'list[AlertresponseConditions]'
    }

    attribute_map = {
        'account': 'account',
        'order_id': 'order_id',
        'alert_name': 'alert_name',
        'alert_message': 'alert_message',
        'alert_active': 'alert_active',
        'alert_repeatable': 'alert_repeatable',
        'alert_email': 'alert_email',
        'alert_send_message': 'alert_send_message',
        'tif': 'tif',
        'expire_time': 'expire_time',
        'order_status': 'order_status',
        'outside_rth': 'outsideRth',
        'itws_orders_only': 'itws_orders_only',
        'alert_show_popup': 'alert_show_popup',
        'alert_triggered': 'alert_triggered',
        'order_not_editable': 'order_not_editable',
        'tool_id': 'tool_id',
        'alert_play_audio': 'alert_play_audio',
        'alert_mta_currency': 'alert_mta_currency',
        'alert_mta_defaults': 'alert_mta_defaults',
        'time_zone': 'time_zone',
        'alert_default_type': 'alert_default_type',
        'condition_size': 'condition_size',
        'condition_outside_rth': 'condition_outside_rth',
        'conditions': 'conditions'
    }

    def __init__(self, account=None, order_id=None, alert_name=None, alert_message=None, alert_active=None, alert_repeatable=None, alert_email=None, alert_send_message=None, tif=None, expire_time=None, order_status=None, outside_rth=None, itws_orders_only=None, alert_show_popup=None, alert_triggered=None, order_not_editable=None, tool_id=None, alert_play_audio=None, alert_mta_currency=None, alert_mta_defaults=None, time_zone=None, alert_default_type=None, condition_size=None, condition_outside_rth=None, conditions=None):  # noqa: E501
        """AlertResponse - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._order_id = None
        self._alert_name = None
        self._alert_message = None
        self._alert_active = None
        self._alert_repeatable = None
        self._alert_email = None
        self._alert_send_message = None
        self._tif = None
        self._expire_time = None
        self._order_status = None
        self._outside_rth = None
        self._itws_orders_only = None
        self._alert_show_popup = None
        self._alert_triggered = None
        self._order_not_editable = None
        self._tool_id = None
        self._alert_play_audio = None
        self._alert_mta_currency = None
        self._alert_mta_defaults = None
        self._time_zone = None
        self._alert_default_type = None
        self._condition_size = None
        self._condition_outside_rth = None
        self._conditions = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if order_id is not None:
            self.order_id = order_id
        if alert_name is not None:
            self.alert_name = alert_name
        if alert_message is not None:
            self.alert_message = alert_message
        if alert_active is not None:
            self.alert_active = alert_active
        if alert_repeatable is not None:
            self.alert_repeatable = alert_repeatable
        if alert_email is not None:
            self.alert_email = alert_email
        if alert_send_message is not None:
            self.alert_send_message = alert_send_message
        if tif is not None:
            self.tif = tif
        if expire_time is not None:
            self.expire_time = expire_time
        if order_status is not None:
            self.order_status = order_status
        if outside_rth is not None:
            self.outside_rth = outside_rth
        if itws_orders_only is not None:
            self.itws_orders_only = itws_orders_only
        if alert_show_popup is not None:
            self.alert_show_popup = alert_show_popup
        if alert_triggered is not None:
            self.alert_triggered = alert_triggered
        if order_not_editable is not None:
            self.order_not_editable = order_not_editable
        if tool_id is not None:
            self.tool_id = tool_id
        if alert_play_audio is not None:
            self.alert_play_audio = alert_play_audio
        if alert_mta_currency is not None:
            self.alert_mta_currency = alert_mta_currency
        if alert_mta_defaults is not None:
            self.alert_mta_defaults = alert_mta_defaults
        if time_zone is not None:
            self.time_zone = time_zone
        if alert_default_type is not None:
            self.alert_default_type = alert_default_type
        if condition_size is not None:
            self.condition_size = condition_size
        if condition_outside_rth is not None:
            self.condition_outside_rth = condition_outside_rth
        if conditions is not None:
            self.conditions = conditions

    @property
    def account(self):
        """Gets the account of this AlertResponse.  # noqa: E501

        account id  # noqa: E501

        :return: The account of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AlertResponse.

        account id  # noqa: E501

        :param account: The account of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def order_id(self):
        """Gets the order_id of this AlertResponse.  # noqa: E501


        :return: The order_id of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this AlertResponse.


        :param order_id: The order_id of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def alert_name(self):
        """Gets the alert_name of this AlertResponse.  # noqa: E501

        name of alert  # noqa: E501

        :return: The alert_name of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._alert_name

    @alert_name.setter
    def alert_name(self, alert_name):
        """Sets the alert_name of this AlertResponse.

        name of alert  # noqa: E501

        :param alert_name: The alert_name of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._alert_name = alert_name

    @property
    def alert_message(self):
        """Gets the alert_message of this AlertResponse.  # noqa: E501

        The message you want to receive via email or text message  # noqa: E501

        :return: The alert_message of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._alert_message

    @alert_message.setter
    def alert_message(self, alert_message):
        """Sets the alert_message of this AlertResponse.

        The message you want to receive via email or text message  # noqa: E501

        :param alert_message: The alert_message of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._alert_message = alert_message

    @property
    def alert_active(self):
        """Gets the alert_active of this AlertResponse.  # noqa: E501

        whether alert is active or not, so value can only be 0 or 1  # noqa: E501

        :return: The alert_active of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._alert_active

    @alert_active.setter
    def alert_active(self, alert_active):
        """Sets the alert_active of this AlertResponse.

        whether alert is active or not, so value can only be 0 or 1  # noqa: E501

        :param alert_active: The alert_active of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._alert_active = alert_active

    @property
    def alert_repeatable(self):
        """Gets the alert_repeatable of this AlertResponse.  # noqa: E501

        whether alert is repeatable or not, so value can only be 0 or 1  # noqa: E501

        :return: The alert_repeatable of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._alert_repeatable

    @alert_repeatable.setter
    def alert_repeatable(self, alert_repeatable):
        """Sets the alert_repeatable of this AlertResponse.

        whether alert is repeatable or not, so value can only be 0 or 1  # noqa: E501

        :param alert_repeatable: The alert_repeatable of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._alert_repeatable = alert_repeatable

    @property
    def alert_email(self):
        """Gets the alert_email of this AlertResponse.  # noqa: E501

        email address to receive alert  # noqa: E501

        :return: The alert_email of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._alert_email

    @alert_email.setter
    def alert_email(self, alert_email):
        """Sets the alert_email of this AlertResponse.

        email address to receive alert  # noqa: E501

        :param alert_email: The alert_email of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._alert_email = alert_email

    @property
    def alert_send_message(self):
        """Gets the alert_send_message of this AlertResponse.  # noqa: E501

        whether allowing to send email or not, so value can only be 0 or 1,   # noqa: E501

        :return: The alert_send_message of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._alert_send_message

    @alert_send_message.setter
    def alert_send_message(self, alert_send_message):
        """Sets the alert_send_message of this AlertResponse.

        whether allowing to send email or not, so value can only be 0 or 1,   # noqa: E501

        :param alert_send_message: The alert_send_message of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._alert_send_message = alert_send_message

    @property
    def tif(self):
        """Gets the tif of this AlertResponse.  # noqa: E501

        time in force, can only be GTC or GTD  # noqa: E501

        :return: The tif of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._tif

    @tif.setter
    def tif(self, tif):
        """Sets the tif of this AlertResponse.

        time in force, can only be GTC or GTD  # noqa: E501

        :param tif: The tif of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._tif = tif

    @property
    def expire_time(self):
        """Gets the expire_time of this AlertResponse.  # noqa: E501

        format, YYYYMMDD-HH:mm:ss   # noqa: E501

        :return: The expire_time of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this AlertResponse.

        format, YYYYMMDD-HH:mm:ss   # noqa: E501

        :param expire_time: The expire_time of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._expire_time = expire_time

    @property
    def order_status(self):
        """Gets the order_status of this AlertResponse.  # noqa: E501

        status of alert  # noqa: E501

        :return: The order_status of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this AlertResponse.

        status of alert  # noqa: E501

        :param order_status: The order_status of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._order_status = order_status

    @property
    def outside_rth(self):
        """Gets the outside_rth of this AlertResponse.  # noqa: E501

        value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours.   # noqa: E501

        :return: The outside_rth of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this AlertResponse.

        value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours.   # noqa: E501

        :param outside_rth: The outside_rth of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._outside_rth = outside_rth

    @property
    def itws_orders_only(self):
        """Gets the itws_orders_only of this AlertResponse.  # noqa: E501

        value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile   # noqa: E501

        :return: The itws_orders_only of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._itws_orders_only

    @itws_orders_only.setter
    def itws_orders_only(self, itws_orders_only):
        """Sets the itws_orders_only of this AlertResponse.

        value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile   # noqa: E501

        :param itws_orders_only: The itws_orders_only of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._itws_orders_only = itws_orders_only

    @property
    def alert_show_popup(self):
        """Gets the alert_show_popup of this AlertResponse.  # noqa: E501

        value can only be 0 or 1, set to 1 to allow to show alert in pop-ups  # noqa: E501

        :return: The alert_show_popup of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._alert_show_popup

    @alert_show_popup.setter
    def alert_show_popup(self, alert_show_popup):
        """Sets the alert_show_popup of this AlertResponse.

        value can only be 0 or 1, set to 1 to allow to show alert in pop-ups  # noqa: E501

        :param alert_show_popup: The alert_show_popup of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._alert_show_popup = alert_show_popup

    @property
    def alert_triggered(self):
        """Gets the alert_triggered of this AlertResponse.  # noqa: E501

        whether the alert has been triggered  # noqa: E501

        :return: The alert_triggered of this AlertResponse.  # noqa: E501
        :rtype: bool
        """
        return self._alert_triggered

    @alert_triggered.setter
    def alert_triggered(self, alert_triggered):
        """Sets the alert_triggered of this AlertResponse.

        whether the alert has been triggered  # noqa: E501

        :param alert_triggered: The alert_triggered of this AlertResponse.  # noqa: E501
        :type: bool
        """

        self._alert_triggered = alert_triggered

    @property
    def order_not_editable(self):
        """Gets the order_not_editable of this AlertResponse.  # noqa: E501

        whether the alert can be edited  # noqa: E501

        :return: The order_not_editable of this AlertResponse.  # noqa: E501
        :rtype: bool
        """
        return self._order_not_editable

    @order_not_editable.setter
    def order_not_editable(self, order_not_editable):
        """Sets the order_not_editable of this AlertResponse.

        whether the alert can be edited  # noqa: E501

        :param order_not_editable: The order_not_editable of this AlertResponse.  # noqa: E501
        :type: bool
        """

        self._order_not_editable = order_not_editable

    @property
    def tool_id(self):
        """Gets the tool_id of this AlertResponse.  # noqa: E501

        for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert   # noqa: E501

        :return: The tool_id of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._tool_id

    @tool_id.setter
    def tool_id(self, tool_id):
        """Sets the tool_id of this AlertResponse.

        for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert   # noqa: E501

        :param tool_id: The tool_id of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._tool_id = tool_id

    @property
    def alert_play_audio(self):
        """Gets the alert_play_audio of this AlertResponse.  # noqa: E501

        audio message to play when alert is triggered  # noqa: E501

        :return: The alert_play_audio of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._alert_play_audio

    @alert_play_audio.setter
    def alert_play_audio(self, alert_play_audio):
        """Sets the alert_play_audio of this AlertResponse.

        audio message to play when alert is triggered  # noqa: E501

        :param alert_play_audio: The alert_play_audio of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._alert_play_audio = alert_play_audio

    @property
    def alert_mta_currency(self):
        """Gets the alert_mta_currency of this AlertResponse.  # noqa: E501

        MTA alert only  # noqa: E501

        :return: The alert_mta_currency of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._alert_mta_currency

    @alert_mta_currency.setter
    def alert_mta_currency(self, alert_mta_currency):
        """Sets the alert_mta_currency of this AlertResponse.

        MTA alert only  # noqa: E501

        :param alert_mta_currency: The alert_mta_currency of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._alert_mta_currency = alert_mta_currency

    @property
    def alert_mta_defaults(self):
        """Gets the alert_mta_defaults of this AlertResponse.  # noqa: E501

        MTA alert only  # noqa: E501

        :return: The alert_mta_defaults of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._alert_mta_defaults

    @alert_mta_defaults.setter
    def alert_mta_defaults(self, alert_mta_defaults):
        """Sets the alert_mta_defaults of this AlertResponse.

        MTA alert only  # noqa: E501

        :param alert_mta_defaults: The alert_mta_defaults of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._alert_mta_defaults = alert_mta_defaults

    @property
    def time_zone(self):
        """Gets the time_zone of this AlertResponse.  # noqa: E501

        MTA alert only  # noqa: E501

        :return: The time_zone of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this AlertResponse.

        MTA alert only  # noqa: E501

        :param time_zone: The time_zone of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def alert_default_type(self):
        """Gets the alert_default_type of this AlertResponse.  # noqa: E501

        MTA alert only  # noqa: E501

        :return: The alert_default_type of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._alert_default_type

    @alert_default_type.setter
    def alert_default_type(self, alert_default_type):
        """Sets the alert_default_type of this AlertResponse.

        MTA alert only  # noqa: E501

        :param alert_default_type: The alert_default_type of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._alert_default_type = alert_default_type

    @property
    def condition_size(self):
        """Gets the condition_size of this AlertResponse.  # noqa: E501

        size of conditions array  # noqa: E501

        :return: The condition_size of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._condition_size

    @condition_size.setter
    def condition_size(self, condition_size):
        """Sets the condition_size of this AlertResponse.

        size of conditions array  # noqa: E501

        :param condition_size: The condition_size of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._condition_size = condition_size

    @property
    def condition_outside_rth(self):
        """Gets the condition_outside_rth of this AlertResponse.  # noqa: E501

        whether allowing the condition can be triggered outside of regular trading hours, 1 means allow  # noqa: E501

        :return: The condition_outside_rth of this AlertResponse.  # noqa: E501
        :rtype: int
        """
        return self._condition_outside_rth

    @condition_outside_rth.setter
    def condition_outside_rth(self, condition_outside_rth):
        """Sets the condition_outside_rth of this AlertResponse.

        whether allowing the condition can be triggered outside of regular trading hours, 1 means allow  # noqa: E501

        :param condition_outside_rth: The condition_outside_rth of this AlertResponse.  # noqa: E501
        :type: int
        """

        self._condition_outside_rth = condition_outside_rth

    @property
    def conditions(self):
        """Gets the conditions of this AlertResponse.  # noqa: E501


        :return: The conditions of this AlertResponse.  # noqa: E501
        :rtype: list[AlertresponseConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AlertResponse.


        :param conditions: The conditions of this AlertResponse.  # noqa: E501
        :type: list[AlertresponseConditions]
        """

        self._conditions = conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
