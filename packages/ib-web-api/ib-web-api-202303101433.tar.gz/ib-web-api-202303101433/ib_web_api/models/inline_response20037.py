# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20037(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cfi_code': 'str',
        'symbol': 'str',
        'cusip': 'str',
        'expiry_full': 'float',
        'con_id': 'float',
        'maturity_date': 'float',
        'industry': 'str',
        'instrument_type': 'str',
        'trading_class': 'str',
        'valid_exchanges': 'str',
        'allow_sell_long': 'bool',
        'is_zero_commission_security': 'bool',
        'local_symbol': 'str',
        'classifier': 'str',
        'currency': 'str',
        'text': 'str',
        'underlying_con_id': 'float',
        'r_t_h': 'bool',
        'multiplier': 'str',
        'strike': 'str',
        'right': 'str',
        'underlying_issuer': 'str',
        'contract_month': 'str',
        'company_name': 'str',
        'smart_available': 'bool',
        'exchange': 'str',
        'rules': 'list[InlineResponse20037Rules]'
    }

    attribute_map = {
        'cfi_code': 'cfi_code',
        'symbol': 'symbol',
        'cusip': 'cusip',
        'expiry_full': 'expiry_full',
        'con_id': 'con_id',
        'maturity_date': 'maturity_date',
        'industry': 'industry',
        'instrument_type': 'instrument_type',
        'trading_class': 'trading_class',
        'valid_exchanges': 'valid_exchanges',
        'allow_sell_long': 'allow_sell_long',
        'is_zero_commission_security': 'is_zero_commission_security',
        'local_symbol': 'local_symbol',
        'classifier': 'classifier',
        'currency': 'currency',
        'text': 'text',
        'underlying_con_id': 'underlying_con_id',
        'r_t_h': 'r_t_h',
        'multiplier': 'multiplier',
        'strike': 'strike',
        'right': 'right',
        'underlying_issuer': 'underlying_issuer',
        'contract_month': 'contract_month',
        'company_name': 'company_name',
        'smart_available': 'smart_available',
        'exchange': 'exchange',
        'rules': 'rules'
    }

    def __init__(self, cfi_code=None, symbol=None, cusip=None, expiry_full=None, con_id=None, maturity_date=None, industry=None, instrument_type=None, trading_class=None, valid_exchanges=None, allow_sell_long=None, is_zero_commission_security=None, local_symbol=None, classifier=None, currency=None, text=None, underlying_con_id=None, r_t_h=None, multiplier=None, strike=None, right=None, underlying_issuer=None, contract_month=None, company_name=None, smart_available=None, exchange=None, rules=None):  # noqa: E501
        """InlineResponse20037 - a model defined in Swagger"""  # noqa: E501
        self._cfi_code = None
        self._symbol = None
        self._cusip = None
        self._expiry_full = None
        self._con_id = None
        self._maturity_date = None
        self._industry = None
        self._instrument_type = None
        self._trading_class = None
        self._valid_exchanges = None
        self._allow_sell_long = None
        self._is_zero_commission_security = None
        self._local_symbol = None
        self._classifier = None
        self._currency = None
        self._text = None
        self._underlying_con_id = None
        self._r_t_h = None
        self._multiplier = None
        self._strike = None
        self._right = None
        self._underlying_issuer = None
        self._contract_month = None
        self._company_name = None
        self._smart_available = None
        self._exchange = None
        self._rules = None
        self.discriminator = None
        if cfi_code is not None:
            self.cfi_code = cfi_code
        if symbol is not None:
            self.symbol = symbol
        if cusip is not None:
            self.cusip = cusip
        if expiry_full is not None:
            self.expiry_full = expiry_full
        if con_id is not None:
            self.con_id = con_id
        if maturity_date is not None:
            self.maturity_date = maturity_date
        if industry is not None:
            self.industry = industry
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if trading_class is not None:
            self.trading_class = trading_class
        if valid_exchanges is not None:
            self.valid_exchanges = valid_exchanges
        if allow_sell_long is not None:
            self.allow_sell_long = allow_sell_long
        if is_zero_commission_security is not None:
            self.is_zero_commission_security = is_zero_commission_security
        if local_symbol is not None:
            self.local_symbol = local_symbol
        if classifier is not None:
            self.classifier = classifier
        if currency is not None:
            self.currency = currency
        if text is not None:
            self.text = text
        if underlying_con_id is not None:
            self.underlying_con_id = underlying_con_id
        if r_t_h is not None:
            self.r_t_h = r_t_h
        if multiplier is not None:
            self.multiplier = multiplier
        if strike is not None:
            self.strike = strike
        if right is not None:
            self.right = right
        if underlying_issuer is not None:
            self.underlying_issuer = underlying_issuer
        if contract_month is not None:
            self.contract_month = contract_month
        if company_name is not None:
            self.company_name = company_name
        if smart_available is not None:
            self.smart_available = smart_available
        if exchange is not None:
            self.exchange = exchange
        if rules is not None:
            self.rules = rules

    @property
    def cfi_code(self):
        """Gets the cfi_code of this InlineResponse20037.  # noqa: E501

        Classification of Financial Instrument codes  # noqa: E501

        :return: The cfi_code of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._cfi_code

    @cfi_code.setter
    def cfi_code(self, cfi_code):
        """Sets the cfi_code of this InlineResponse20037.

        Classification of Financial Instrument codes  # noqa: E501

        :param cfi_code: The cfi_code of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._cfi_code = cfi_code

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse20037.  # noqa: E501

        Underlying symbol  # noqa: E501

        :return: The symbol of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse20037.

        Underlying symbol  # noqa: E501

        :param symbol: The symbol of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def cusip(self):
        """Gets the cusip of this InlineResponse20037.  # noqa: E501


        :return: The cusip of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._cusip

    @cusip.setter
    def cusip(self, cusip):
        """Sets the cusip of this InlineResponse20037.


        :param cusip: The cusip of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._cusip = cusip

    @property
    def expiry_full(self):
        """Gets the expiry_full of this InlineResponse20037.  # noqa: E501

        Expiration Date in the format YYYYMMDD  # noqa: E501

        :return: The expiry_full of this InlineResponse20037.  # noqa: E501
        :rtype: float
        """
        return self._expiry_full

    @expiry_full.setter
    def expiry_full(self, expiry_full):
        """Sets the expiry_full of this InlineResponse20037.

        Expiration Date in the format YYYYMMDD  # noqa: E501

        :param expiry_full: The expiry_full of this InlineResponse20037.  # noqa: E501
        :type: float
        """

        self._expiry_full = expiry_full

    @property
    def con_id(self):
        """Gets the con_id of this InlineResponse20037.  # noqa: E501

        IBKRs contract identifier  # noqa: E501

        :return: The con_id of this InlineResponse20037.  # noqa: E501
        :rtype: float
        """
        return self._con_id

    @con_id.setter
    def con_id(self, con_id):
        """Sets the con_id of this InlineResponse20037.

        IBKRs contract identifier  # noqa: E501

        :param con_id: The con_id of this InlineResponse20037.  # noqa: E501
        :type: float
        """

        self._con_id = con_id

    @property
    def maturity_date(self):
        """Gets the maturity_date of this InlineResponse20037.  # noqa: E501

        Date on which the underlying transaction settles if the option is exercised  # noqa: E501

        :return: The maturity_date of this InlineResponse20037.  # noqa: E501
        :rtype: float
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this InlineResponse20037.

        Date on which the underlying transaction settles if the option is exercised  # noqa: E501

        :param maturity_date: The maturity_date of this InlineResponse20037.  # noqa: E501
        :type: float
        """

        self._maturity_date = maturity_date

    @property
    def industry(self):
        """Gets the industry of this InlineResponse20037.  # noqa: E501

        Specific group of companies or businesses.  # noqa: E501

        :return: The industry of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this InlineResponse20037.

        Specific group of companies or businesses.  # noqa: E501

        :param industry: The industry of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def instrument_type(self):
        """Gets the instrument_type of this InlineResponse20037.  # noqa: E501

        Asset Class of the contract  # noqa: E501

        :return: The instrument_type of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this InlineResponse20037.

        Asset Class of the contract  # noqa: E501

        :param instrument_type: The instrument_type of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._instrument_type = instrument_type

    @property
    def trading_class(self):
        """Gets the trading_class of this InlineResponse20037.  # noqa: E501

        Designation of the contract  # noqa: E501

        :return: The trading_class of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._trading_class

    @trading_class.setter
    def trading_class(self, trading_class):
        """Sets the trading_class of this InlineResponse20037.

        Designation of the contract  # noqa: E501

        :param trading_class: The trading_class of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._trading_class = trading_class

    @property
    def valid_exchanges(self):
        """Gets the valid_exchanges of this InlineResponse20037.  # noqa: E501

        Comma separated list of exchanges or trading venues  # noqa: E501

        :return: The valid_exchanges of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._valid_exchanges

    @valid_exchanges.setter
    def valid_exchanges(self, valid_exchanges):
        """Sets the valid_exchanges of this InlineResponse20037.

        Comma separated list of exchanges or trading venues  # noqa: E501

        :param valid_exchanges: The valid_exchanges of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._valid_exchanges = valid_exchanges

    @property
    def allow_sell_long(self):
        """Gets the allow_sell_long of this InlineResponse20037.  # noqa: E501

        Allowed to sell shares that you own  # noqa: E501

        :return: The allow_sell_long of this InlineResponse20037.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sell_long

    @allow_sell_long.setter
    def allow_sell_long(self, allow_sell_long):
        """Sets the allow_sell_long of this InlineResponse20037.

        Allowed to sell shares that you own  # noqa: E501

        :param allow_sell_long: The allow_sell_long of this InlineResponse20037.  # noqa: E501
        :type: bool
        """

        self._allow_sell_long = allow_sell_long

    @property
    def is_zero_commission_security(self):
        """Gets the is_zero_commission_security of this InlineResponse20037.  # noqa: E501

        Supports zero commission trades  # noqa: E501

        :return: The is_zero_commission_security of this InlineResponse20037.  # noqa: E501
        :rtype: bool
        """
        return self._is_zero_commission_security

    @is_zero_commission_security.setter
    def is_zero_commission_security(self, is_zero_commission_security):
        """Sets the is_zero_commission_security of this InlineResponse20037.

        Supports zero commission trades  # noqa: E501

        :param is_zero_commission_security: The is_zero_commission_security of this InlineResponse20037.  # noqa: E501
        :type: bool
        """

        self._is_zero_commission_security = is_zero_commission_security

    @property
    def local_symbol(self):
        """Gets the local_symbol of this InlineResponse20037.  # noqa: E501

        Contracts symbol from primary exchange. For options it is the OCC symbol.  # noqa: E501

        :return: The local_symbol of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._local_symbol

    @local_symbol.setter
    def local_symbol(self, local_symbol):
        """Sets the local_symbol of this InlineResponse20037.

        Contracts symbol from primary exchange. For options it is the OCC symbol.  # noqa: E501

        :param local_symbol: The local_symbol of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._local_symbol = local_symbol

    @property
    def classifier(self):
        """Gets the classifier of this InlineResponse20037.  # noqa: E501


        :return: The classifier of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._classifier

    @classifier.setter
    def classifier(self, classifier):
        """Sets the classifier of this InlineResponse20037.


        :param classifier: The classifier of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._classifier = classifier

    @property
    def currency(self):
        """Gets the currency of this InlineResponse20037.  # noqa: E501

        Currency contract trades in  # noqa: E501

        :return: The currency of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse20037.

        Currency contract trades in  # noqa: E501

        :param currency: The currency of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def text(self):
        """Gets the text of this InlineResponse20037.  # noqa: E501

        Formatted contract parameters  # noqa: E501

        :return: The text of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InlineResponse20037.

        Formatted contract parameters  # noqa: E501

        :param text: The text of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def underlying_con_id(self):
        """Gets the underlying_con_id of this InlineResponse20037.  # noqa: E501

        IBKRs contract identifier for the underlying instrument  # noqa: E501

        :return: The underlying_con_id of this InlineResponse20037.  # noqa: E501
        :rtype: float
        """
        return self._underlying_con_id

    @underlying_con_id.setter
    def underlying_con_id(self, underlying_con_id):
        """Sets the underlying_con_id of this InlineResponse20037.

        IBKRs contract identifier for the underlying instrument  # noqa: E501

        :param underlying_con_id: The underlying_con_id of this InlineResponse20037.  # noqa: E501
        :type: float
        """

        self._underlying_con_id = underlying_con_id

    @property
    def r_t_h(self):
        """Gets the r_t_h of this InlineResponse20037.  # noqa: E501

        Provides trading outside of Regular Trading Hours  # noqa: E501

        :return: The r_t_h of this InlineResponse20037.  # noqa: E501
        :rtype: bool
        """
        return self._r_t_h

    @r_t_h.setter
    def r_t_h(self, r_t_h):
        """Sets the r_t_h of this InlineResponse20037.

        Provides trading outside of Regular Trading Hours  # noqa: E501

        :param r_t_h: The r_t_h of this InlineResponse20037.  # noqa: E501
        :type: bool
        """

        self._r_t_h = r_t_h

    @property
    def multiplier(self):
        """Gets the multiplier of this InlineResponse20037.  # noqa: E501

        numerical value of each point of price movement  # noqa: E501

        :return: The multiplier of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this InlineResponse20037.

        numerical value of each point of price movement  # noqa: E501

        :param multiplier: The multiplier of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._multiplier = multiplier

    @property
    def strike(self):
        """Gets the strike of this InlineResponse20037.  # noqa: E501

        fixed price at which the owner of the option buys or sells the underlying  # noqa: E501

        :return: The strike of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this InlineResponse20037.

        fixed price at which the owner of the option buys or sells the underlying  # noqa: E501

        :param strike: The strike of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._strike = strike

    @property
    def right(self):
        """Gets the right of this InlineResponse20037.  # noqa: E501

        Put or Call of the option  # noqa: E501

        :return: The right of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this InlineResponse20037.

        Put or Call of the option  # noqa: E501

        :param right: The right of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._right = right

    @property
    def underlying_issuer(self):
        """Gets the underlying_issuer of this InlineResponse20037.  # noqa: E501

        Legal entity for underlying contract  # noqa: E501

        :return: The underlying_issuer of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._underlying_issuer

    @underlying_issuer.setter
    def underlying_issuer(self, underlying_issuer):
        """Sets the underlying_issuer of this InlineResponse20037.

        Legal entity for underlying contract  # noqa: E501

        :param underlying_issuer: The underlying_issuer of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._underlying_issuer = underlying_issuer

    @property
    def contract_month(self):
        """Gets the contract_month of this InlineResponse20037.  # noqa: E501

        Month the contract must be satisfied by making or accepting delivery  # noqa: E501

        :return: The contract_month of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._contract_month

    @contract_month.setter
    def contract_month(self, contract_month):
        """Sets the contract_month of this InlineResponse20037.

        Month the contract must be satisfied by making or accepting delivery  # noqa: E501

        :param contract_month: The contract_month of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._contract_month = contract_month

    @property
    def company_name(self):
        """Gets the company_name of this InlineResponse20037.  # noqa: E501

        Contracts company name  # noqa: E501

        :return: The company_name of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this InlineResponse20037.

        Contracts company name  # noqa: E501

        :param company_name: The company_name of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def smart_available(self):
        """Gets the smart_available of this InlineResponse20037.  # noqa: E501

        Support IBKRs SMART routing  # noqa: E501

        :return: The smart_available of this InlineResponse20037.  # noqa: E501
        :rtype: bool
        """
        return self._smart_available

    @smart_available.setter
    def smart_available(self, smart_available):
        """Sets the smart_available of this InlineResponse20037.

        Support IBKRs SMART routing  # noqa: E501

        :param smart_available: The smart_available of this InlineResponse20037.  # noqa: E501
        :type: bool
        """

        self._smart_available = smart_available

    @property
    def exchange(self):
        """Gets the exchange of this InlineResponse20037.  # noqa: E501

        Primary Exchange, Routing or Trading Venue  # noqa: E501

        :return: The exchange of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this InlineResponse20037.

        Primary Exchange, Routing or Trading Venue  # noqa: E501

        :param exchange: The exchange of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def rules(self):
        """Gets the rules of this InlineResponse20037.  # noqa: E501


        :return: The rules of this InlineResponse20037.  # noqa: E501
        :rtype: list[InlineResponse20037Rules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this InlineResponse20037.


        :param rules: The rules of this InlineResponse20037.  # noqa: E501
        :type: list[InlineResponse20037Rules]
        """

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20037, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20037):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
