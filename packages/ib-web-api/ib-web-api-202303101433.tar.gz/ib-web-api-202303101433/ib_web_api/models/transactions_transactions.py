# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionsTransactions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acctid': 'str',
        'conid': 'float',
        'cur': 'str',
        'fx_rate': 'float',
        'desc': 'str',
        '_date': 'str',
        'type': 'str',
        'qty': 'float',
        'pr': 'float',
        'amt': 'float'
    }

    attribute_map = {
        'acctid': 'acctid',
        'conid': 'conid',
        'cur': 'cur',
        'fx_rate': 'fxRate',
        'desc': 'desc',
        '_date': 'date',
        'type': 'type',
        'qty': 'qty',
        'pr': 'pr',
        'amt': 'amt'
    }

    def __init__(self, acctid=None, conid=None, cur=None, fx_rate=None, desc=None, _date=None, type=None, qty=None, pr=None, amt=None):  # noqa: E501
        """TransactionsTransactions - a model defined in Swagger"""  # noqa: E501
        self._acctid = None
        self._conid = None
        self._cur = None
        self._fx_rate = None
        self._desc = None
        self.__date = None
        self._type = None
        self._qty = None
        self._pr = None
        self._amt = None
        self.discriminator = None
        if acctid is not None:
            self.acctid = acctid
        if conid is not None:
            self.conid = conid
        if cur is not None:
            self.cur = cur
        if fx_rate is not None:
            self.fx_rate = fx_rate
        if desc is not None:
            self.desc = desc
        if _date is not None:
            self._date = _date
        if type is not None:
            self.type = type
        if qty is not None:
            self.qty = qty
        if pr is not None:
            self.pr = pr
        if amt is not None:
            self.amt = amt

    @property
    def acctid(self):
        """Gets the acctid of this TransactionsTransactions.  # noqa: E501


        :return: The acctid of this TransactionsTransactions.  # noqa: E501
        :rtype: str
        """
        return self._acctid

    @acctid.setter
    def acctid(self, acctid):
        """Sets the acctid of this TransactionsTransactions.


        :param acctid: The acctid of this TransactionsTransactions.  # noqa: E501
        :type: str
        """

        self._acctid = acctid

    @property
    def conid(self):
        """Gets the conid of this TransactionsTransactions.  # noqa: E501


        :return: The conid of this TransactionsTransactions.  # noqa: E501
        :rtype: float
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this TransactionsTransactions.


        :param conid: The conid of this TransactionsTransactions.  # noqa: E501
        :type: float
        """

        self._conid = conid

    @property
    def cur(self):
        """Gets the cur of this TransactionsTransactions.  # noqa: E501

        currency code  # noqa: E501

        :return: The cur of this TransactionsTransactions.  # noqa: E501
        :rtype: str
        """
        return self._cur

    @cur.setter
    def cur(self, cur):
        """Sets the cur of this TransactionsTransactions.

        currency code  # noqa: E501

        :param cur: The cur of this TransactionsTransactions.  # noqa: E501
        :type: str
        """

        self._cur = cur

    @property
    def fx_rate(self):
        """Gets the fx_rate of this TransactionsTransactions.  # noqa: E501

        Conversion rate from asset currency to response currency  # noqa: E501

        :return: The fx_rate of this TransactionsTransactions.  # noqa: E501
        :rtype: float
        """
        return self._fx_rate

    @fx_rate.setter
    def fx_rate(self, fx_rate):
        """Sets the fx_rate of this TransactionsTransactions.

        Conversion rate from asset currency to response currency  # noqa: E501

        :param fx_rate: The fx_rate of this TransactionsTransactions.  # noqa: E501
        :type: float
        """

        self._fx_rate = fx_rate

    @property
    def desc(self):
        """Gets the desc of this TransactionsTransactions.  # noqa: E501

        Transaction description  # noqa: E501

        :return: The desc of this TransactionsTransactions.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this TransactionsTransactions.

        Transaction description  # noqa: E501

        :param desc: The desc of this TransactionsTransactions.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def _date(self):
        """Gets the _date of this TransactionsTransactions.  # noqa: E501

        Date of transaction.  Epoch time, GMT  # noqa: E501

        :return: The _date of this TransactionsTransactions.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TransactionsTransactions.

        Date of transaction.  Epoch time, GMT  # noqa: E501

        :param _date: The _date of this TransactionsTransactions.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def type(self):
        """Gets the type of this TransactionsTransactions.  # noqa: E501

        Transaction Type Name: Examples: \"Sell\", \"Buy\", \"Corporate Action\", \"Dividend Payment\", \"Transfer\", \"Payment in Lieu\" Dividends and Transfers do not have price and quantity in response   # noqa: E501

        :return: The type of this TransactionsTransactions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionsTransactions.

        Transaction Type Name: Examples: \"Sell\", \"Buy\", \"Corporate Action\", \"Dividend Payment\", \"Transfer\", \"Payment in Lieu\" Dividends and Transfers do not have price and quantity in response   # noqa: E501

        :param type: The type of this TransactionsTransactions.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def qty(self):
        """Gets the qty of this TransactionsTransactions.  # noqa: E501

        Not applicable for all transaction types  # noqa: E501

        :return: The qty of this TransactionsTransactions.  # noqa: E501
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this TransactionsTransactions.

        Not applicable for all transaction types  # noqa: E501

        :param qty: The qty of this TransactionsTransactions.  # noqa: E501
        :type: float
        """

        self._qty = qty

    @property
    def pr(self):
        """Gets the pr of this TransactionsTransactions.  # noqa: E501

        In asset currency. Not be applicable for all transaction types.  # noqa: E501

        :return: The pr of this TransactionsTransactions.  # noqa: E501
        :rtype: float
        """
        return self._pr

    @pr.setter
    def pr(self, pr):
        """Sets the pr of this TransactionsTransactions.

        In asset currency. Not be applicable for all transaction types.  # noqa: E501

        :param pr: The pr of this TransactionsTransactions.  # noqa: E501
        :type: float
        """

        self._pr = pr

    @property
    def amt(self):
        """Gets the amt of this TransactionsTransactions.  # noqa: E501

        Raw value, no formatting. Net transaction amount (may include commission, tax). In asset currency  # noqa: E501

        :return: The amt of this TransactionsTransactions.  # noqa: E501
        :rtype: float
        """
        return self._amt

    @amt.setter
    def amt(self, amt):
        """Sets the amt of this TransactionsTransactions.

        Raw value, no formatting. Net transaction amount (may include commission, tax). In asset currency  # noqa: E501

        :param amt: The amt of this TransactionsTransactions.  # noqa: E501
        :type: float
        """

        self._amt = amt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionsTransactions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionsTransactions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
