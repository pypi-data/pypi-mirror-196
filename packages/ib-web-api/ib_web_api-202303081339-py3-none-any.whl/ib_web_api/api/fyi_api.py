# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ib_web_api.api_client import ApiClient


class FYIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def fyi_deliveryoptions_device_id_delete(self, device_id, **kwargs):  # noqa: E501
        """Delete a device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_deliveryoptions_device_id_delete(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: device ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_deliveryoptions_device_id_delete_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.fyi_deliveryoptions_device_id_delete_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def fyi_deliveryoptions_device_id_delete_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Delete a device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_deliveryoptions_device_id_delete_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: device ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_deliveryoptions_device_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `fyi_deliveryoptions_device_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/deliveryoptions/{deviceId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_deliveryoptions_device_post(self, body, **kwargs):  # noqa: E501
        """Enable/Disable device option  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_deliveryoptions_device_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeliveryoptionsDeviceBody body: device info (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_deliveryoptions_device_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.fyi_deliveryoptions_device_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def fyi_deliveryoptions_device_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Enable/Disable device option  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_deliveryoptions_device_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeliveryoptionsDeviceBody body: device info (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_deliveryoptions_device_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `fyi_deliveryoptions_device_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/deliveryoptions/device', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_deliveryoptions_email_put(self, enabled, **kwargs):  # noqa: E501
        """Enable/Disable email option  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_deliveryoptions_email_put(enabled, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enabled: true/false (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_deliveryoptions_email_put_with_http_info(enabled, **kwargs)  # noqa: E501
        else:
            (data) = self.fyi_deliveryoptions_email_put_with_http_info(enabled, **kwargs)  # noqa: E501
            return data

    def fyi_deliveryoptions_email_put_with_http_info(self, enabled, **kwargs):  # noqa: E501
        """Enable/Disable email option  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_deliveryoptions_email_put_with_http_info(enabled, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enabled: true/false (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enabled']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_deliveryoptions_email_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enabled' is set
        if ('enabled' not in params or
                params['enabled'] is None):
            raise ValueError("Missing the required parameter `enabled` when calling `fyi_deliveryoptions_email_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/deliveryoptions/email', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_deliveryoptions_get(self, **kwargs):  # noqa: E501
        """Get delivery options  # noqa: E501

        options for sending fyis to email and other devices   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_deliveryoptions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_deliveryoptions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.fyi_deliveryoptions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def fyi_deliveryoptions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get delivery options  # noqa: E501

        options for sending fyis to email and other devices   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_deliveryoptions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_deliveryoptions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/deliveryoptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_disclaimer_typecode_get(self, typecode, **kwargs):  # noqa: E501
        """Get disclaimer for a certain kind of fyi  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_disclaimer_typecode_get(typecode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str typecode: fyi code, for example --M8, EA (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_disclaimer_typecode_get_with_http_info(typecode, **kwargs)  # noqa: E501
        else:
            (data) = self.fyi_disclaimer_typecode_get_with_http_info(typecode, **kwargs)  # noqa: E501
            return data

    def fyi_disclaimer_typecode_get_with_http_info(self, typecode, **kwargs):  # noqa: E501
        """Get disclaimer for a certain kind of fyi  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_disclaimer_typecode_get_with_http_info(typecode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str typecode: fyi code, for example --M8, EA (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['typecode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_disclaimer_typecode_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'typecode' is set
        if ('typecode' not in params or
                params['typecode'] is None):
            raise ValueError("Missing the required parameter `typecode` when calling `fyi_disclaimer_typecode_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'typecode' in params:
            path_params['typecode'] = params['typecode']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/disclaimer/{typecode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_disclaimer_typecode_put(self, typecode, **kwargs):  # noqa: E501
        """Mark disclaimer read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_disclaimer_typecode_put(typecode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str typecode: fyi code, for example --M8, EA (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_disclaimer_typecode_put_with_http_info(typecode, **kwargs)  # noqa: E501
        else:
            (data) = self.fyi_disclaimer_typecode_put_with_http_info(typecode, **kwargs)  # noqa: E501
            return data

    def fyi_disclaimer_typecode_put_with_http_info(self, typecode, **kwargs):  # noqa: E501
        """Mark disclaimer read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_disclaimer_typecode_put_with_http_info(typecode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str typecode: fyi code, for example --M8, EA (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['typecode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_disclaimer_typecode_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'typecode' is set
        if ('typecode' not in params or
                params['typecode'] is None):
            raise ValueError("Missing the required parameter `typecode` when calling `fyi_disclaimer_typecode_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'typecode' in params:
            path_params['typecode'] = params['typecode']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/disclaimer/{typecode}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_notifications_get(self, max, **kwargs):  # noqa: E501
        """Get a list of notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_notifications_get(max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: max number of fyis in response (required)
        :param str exclude: if set, don't set include
        :param str include: if set, don't set exclude
        :return: Notifications
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_notifications_get_with_http_info(max, **kwargs)  # noqa: E501
        else:
            (data) = self.fyi_notifications_get_with_http_info(max, **kwargs)  # noqa: E501
            return data

    def fyi_notifications_get_with_http_info(self, max, **kwargs):  # noqa: E501
        """Get a list of notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_notifications_get_with_http_info(max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: max number of fyis in response (required)
        :param str exclude: if set, don't set include
        :param str include: if set, don't set exclude
        :return: Notifications
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['max', 'exclude', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_notifications_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'max' is set
        if ('max' not in params or
                params['max'] is None):
            raise ValueError("Missing the required parameter `max` when calling `fyi_notifications_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Notifications',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_notifications_more_get(self, id, **kwargs):  # noqa: E501
        """Get more notifications based on a certain one  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_notifications_more_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of last notification in the list (required)
        :return: Notifications
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_notifications_more_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fyi_notifications_more_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fyi_notifications_more_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get more notifications based on a certain one  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_notifications_more_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of last notification in the list (required)
        :return: Notifications
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_notifications_more_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fyi_notifications_more_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/notifications/more', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Notifications',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_notifications_notification_id_put(self, notification_id, **kwargs):  # noqa: E501
        """Get a list of notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_notifications_notification_id_put(notification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_id: mark a notification read (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_notifications_notification_id_put_with_http_info(notification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.fyi_notifications_notification_id_put_with_http_info(notification_id, **kwargs)  # noqa: E501
            return data

    def fyi_notifications_notification_id_put_with_http_info(self, notification_id, **kwargs):  # noqa: E501
        """Get a list of notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_notifications_notification_id_put_with_http_info(notification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_id: mark a notification read (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_notifications_notification_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_id' is set
        if ('notification_id' not in params or
                params['notification_id'] is None):
            raise ValueError("Missing the required parameter `notification_id` when calling `fyi_notifications_notification_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_id' in params:
            path_params['notificationId'] = params['notification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/notifications/{notificationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_settings_get(self, **kwargs):  # noqa: E501
        """Get a list of subscriptions  # noqa: E501

        Return the current choices of subscriptions, we can toggle the option   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_settings_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_settings_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.fyi_settings_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def fyi_settings_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of subscriptions  # noqa: E501

        Return the current choices of subscriptions, we can toggle the option   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_settings_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_settings_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2003]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_settings_typecode_post(self, body, typecode, **kwargs):  # noqa: E501
        """Enable/Disable certain subscription  # noqa: E501

        Configure which typecode you would like to enable/disable.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_settings_typecode_post(body, typecode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsTypecodeBody body: (required)
        :param str typecode: fyi code (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_settings_typecode_post_with_http_info(body, typecode, **kwargs)  # noqa: E501
        else:
            (data) = self.fyi_settings_typecode_post_with_http_info(body, typecode, **kwargs)  # noqa: E501
            return data

    def fyi_settings_typecode_post_with_http_info(self, body, typecode, **kwargs):  # noqa: E501
        """Enable/Disable certain subscription  # noqa: E501

        Configure which typecode you would like to enable/disable.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_settings_typecode_post_with_http_info(body, typecode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsTypecodeBody body: (required)
        :param str typecode: fyi code (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'typecode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_settings_typecode_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `fyi_settings_typecode_post`")  # noqa: E501
        # verify the required parameter 'typecode' is set
        if ('typecode' not in params or
                params['typecode'] is None):
            raise ValueError("Missing the required parameter `typecode` when calling `fyi_settings_typecode_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'typecode' in params:
            path_params['typecode'] = params['typecode']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/settings/{typecode}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fyi_unreadnumber_get(self, **kwargs):  # noqa: E501
        """Get unread number of fyis. The HTTP method POST is also supported.  # noqa: E501

        Returns the total number of unread fyis   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_unreadnumber_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fyi_unreadnumber_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.fyi_unreadnumber_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def fyi_unreadnumber_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get unread number of fyis. The HTTP method POST is also supported.  # noqa: E501

        Returns the total number of unread fyis   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fyi_unreadnumber_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fyi_unreadnumber_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fyi/unreadnumber', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
