# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_type': 'str',
        'request_id': 'str',
        'order_id': 'int',
        'conidex': 'str',
        'symbol': 'str',
        'side': 'str',
        'contract_description_1': 'str',
        'listing_exchange': 'str',
        'option_acct': 'str',
        'company_name': 'str',
        'size': 'str',
        'total_size': 'str',
        'currency': 'str',
        'account': 'str',
        'order_type': 'str',
        'limit_price': 'str',
        'stop_price': 'str',
        'cum_fill': 'str',
        'order_status': 'str',
        'order_status_description': 'str',
        'tif': 'str',
        'fg_color': 'str',
        'bg_color': 'str',
        'order_not_editable': 'bool',
        'editable_fields': 'str',
        'cannot_cancel_order': 'bool',
        'outside_rth': 'bool',
        'deactivate_order': 'bool',
        'use_price_mgmt_algo': 'bool',
        'sec_type': 'str',
        'available_chart_periods': 'str',
        'order_description': 'str',
        'order_description_with_contract': 'str',
        'alert_active': 'int',
        'child_order_type': 'str',
        'size_and_fills': 'str',
        'exit_strategy_display_price': 'str',
        'exit_strategy_chart_description': 'str',
        'exit_strategy_tool_availability': 'str',
        'allowed_duplicate_opposite': 'bool',
        'order_time': 'str',
        'oca_group_id': 'str'
    }

    attribute_map = {
        'sub_type': 'sub_type',
        'request_id': 'request_id',
        'order_id': 'order_id',
        'conidex': 'conidex',
        'symbol': 'symbol',
        'side': 'side',
        'contract_description_1': 'contract_description_1',
        'listing_exchange': 'listing_exchange',
        'option_acct': 'option_acct',
        'company_name': 'company_name',
        'size': 'size',
        'total_size': 'total_size',
        'currency': 'currency',
        'account': 'account',
        'order_type': 'order_type',
        'limit_price': 'limit_price',
        'stop_price': 'stop_price',
        'cum_fill': 'cum_fill',
        'order_status': 'order_status',
        'order_status_description': 'order_status_description',
        'tif': 'tif',
        'fg_color': 'fg_color',
        'bg_color': 'bg_color',
        'order_not_editable': 'order_not_editable',
        'editable_fields': 'editable_fields',
        'cannot_cancel_order': 'cannot_cancel_order',
        'outside_rth': 'outside_rth',
        'deactivate_order': 'deactivate_order',
        'use_price_mgmt_algo': 'use_price_mgmt_algo',
        'sec_type': 'sec_type',
        'available_chart_periods': 'available_chart_periods',
        'order_description': 'order_description',
        'order_description_with_contract': 'order_description_with_contract',
        'alert_active': 'alert_active',
        'child_order_type': 'child_order_type',
        'size_and_fills': 'size_and_fills',
        'exit_strategy_display_price': 'exit_strategy_display_price',
        'exit_strategy_chart_description': 'exit_strategy_chart_description',
        'exit_strategy_tool_availability': 'exit_strategy_tool_availability',
        'allowed_duplicate_opposite': 'allowed_duplicate_opposite',
        'order_time': 'order_time',
        'oca_group_id': 'oca_group_id'
    }

    def __init__(self, sub_type=None, request_id=None, order_id=None, conidex=None, symbol=None, side=None, contract_description_1=None, listing_exchange=None, option_acct=None, company_name=None, size=None, total_size=None, currency=None, account=None, order_type=None, limit_price=None, stop_price=None, cum_fill=None, order_status=None, order_status_description=None, tif=None, fg_color=None, bg_color=None, order_not_editable=None, editable_fields=None, cannot_cancel_order=None, outside_rth=None, deactivate_order=None, use_price_mgmt_algo=None, sec_type=None, available_chart_periods=None, order_description=None, order_description_with_contract=None, alert_active=None, child_order_type=None, size_and_fills=None, exit_strategy_display_price=None, exit_strategy_chart_description=None, exit_strategy_tool_availability=None, allowed_duplicate_opposite=None, order_time=None, oca_group_id=None):  # noqa: E501
        """OrderStatus - a model defined in Swagger"""  # noqa: E501
        self._sub_type = None
        self._request_id = None
        self._order_id = None
        self._conidex = None
        self._symbol = None
        self._side = None
        self._contract_description_1 = None
        self._listing_exchange = None
        self._option_acct = None
        self._company_name = None
        self._size = None
        self._total_size = None
        self._currency = None
        self._account = None
        self._order_type = None
        self._limit_price = None
        self._stop_price = None
        self._cum_fill = None
        self._order_status = None
        self._order_status_description = None
        self._tif = None
        self._fg_color = None
        self._bg_color = None
        self._order_not_editable = None
        self._editable_fields = None
        self._cannot_cancel_order = None
        self._outside_rth = None
        self._deactivate_order = None
        self._use_price_mgmt_algo = None
        self._sec_type = None
        self._available_chart_periods = None
        self._order_description = None
        self._order_description_with_contract = None
        self._alert_active = None
        self._child_order_type = None
        self._size_and_fills = None
        self._exit_strategy_display_price = None
        self._exit_strategy_chart_description = None
        self._exit_strategy_tool_availability = None
        self._allowed_duplicate_opposite = None
        self._order_time = None
        self._oca_group_id = None
        self.discriminator = None
        if sub_type is not None:
            self.sub_type = sub_type
        if request_id is not None:
            self.request_id = request_id
        if order_id is not None:
            self.order_id = order_id
        if conidex is not None:
            self.conidex = conidex
        if symbol is not None:
            self.symbol = symbol
        if side is not None:
            self.side = side
        if contract_description_1 is not None:
            self.contract_description_1 = contract_description_1
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if option_acct is not None:
            self.option_acct = option_acct
        if company_name is not None:
            self.company_name = company_name
        if size is not None:
            self.size = size
        if total_size is not None:
            self.total_size = total_size
        if currency is not None:
            self.currency = currency
        if account is not None:
            self.account = account
        if order_type is not None:
            self.order_type = order_type
        if limit_price is not None:
            self.limit_price = limit_price
        if stop_price is not None:
            self.stop_price = stop_price
        if cum_fill is not None:
            self.cum_fill = cum_fill
        if order_status is not None:
            self.order_status = order_status
        if order_status_description is not None:
            self.order_status_description = order_status_description
        if tif is not None:
            self.tif = tif
        if fg_color is not None:
            self.fg_color = fg_color
        if bg_color is not None:
            self.bg_color = bg_color
        if order_not_editable is not None:
            self.order_not_editable = order_not_editable
        if editable_fields is not None:
            self.editable_fields = editable_fields
        if cannot_cancel_order is not None:
            self.cannot_cancel_order = cannot_cancel_order
        if outside_rth is not None:
            self.outside_rth = outside_rth
        if deactivate_order is not None:
            self.deactivate_order = deactivate_order
        if use_price_mgmt_algo is not None:
            self.use_price_mgmt_algo = use_price_mgmt_algo
        if sec_type is not None:
            self.sec_type = sec_type
        if available_chart_periods is not None:
            self.available_chart_periods = available_chart_periods
        if order_description is not None:
            self.order_description = order_description
        if order_description_with_contract is not None:
            self.order_description_with_contract = order_description_with_contract
        if alert_active is not None:
            self.alert_active = alert_active
        if child_order_type is not None:
            self.child_order_type = child_order_type
        if size_and_fills is not None:
            self.size_and_fills = size_and_fills
        if exit_strategy_display_price is not None:
            self.exit_strategy_display_price = exit_strategy_display_price
        if exit_strategy_chart_description is not None:
            self.exit_strategy_chart_description = exit_strategy_chart_description
        if exit_strategy_tool_availability is not None:
            self.exit_strategy_tool_availability = exit_strategy_tool_availability
        if allowed_duplicate_opposite is not None:
            self.allowed_duplicate_opposite = allowed_duplicate_opposite
        if order_time is not None:
            self.order_time = order_time
        if oca_group_id is not None:
            self.oca_group_id = oca_group_id

    @property
    def sub_type(self):
        """Gets the sub_type of this OrderStatus.  # noqa: E501

        order sub-type  # noqa: E501

        :return: The sub_type of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this OrderStatus.

        order sub-type  # noqa: E501

        :param sub_type: The sub_type of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def request_id(self):
        """Gets the request_id of this OrderStatus.  # noqa: E501

        order request id  # noqa: E501

        :return: The request_id of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this OrderStatus.

        order request id  # noqa: E501

        :param request_id: The request_id of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def order_id(self):
        """Gets the order_id of this OrderStatus.  # noqa: E501

        system generated order id, unique per account  # noqa: E501

        :return: The order_id of this OrderStatus.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderStatus.

        system generated order id, unique per account  # noqa: E501

        :param order_id: The order_id of this OrderStatus.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def conidex(self):
        """Gets the conidex of this OrderStatus.  # noqa: E501

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :return: The conidex of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._conidex

    @conidex.setter
    def conidex(self, conidex):
        """Sets the conidex of this OrderStatus.

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :param conidex: The conidex of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._conidex = conidex

    @property
    def symbol(self):
        """Gets the symbol of this OrderStatus.  # noqa: E501

        Underlying symbol  # noqa: E501

        :return: The symbol of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this OrderStatus.

        Underlying symbol  # noqa: E501

        :param symbol: The symbol of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def side(self):
        """Gets the side of this OrderStatus.  # noqa: E501

        The side of the market of the order.   * B - Buy contract near posted ask price   * S - Sell contract near posted bid price   * X - Option expired   # noqa: E501

        :return: The side of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderStatus.

        The side of the market of the order.   * B - Buy contract near posted ask price   * S - Sell contract near posted bid price   * X - Option expired   # noqa: E501

        :param side: The side of this OrderStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["B", "S", "X"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def contract_description_1(self):
        """Gets the contract_description_1 of this OrderStatus.  # noqa: E501

        Format contract name  # noqa: E501

        :return: The contract_description_1 of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._contract_description_1

    @contract_description_1.setter
    def contract_description_1(self, contract_description_1):
        """Sets the contract_description_1 of this OrderStatus.

        Format contract name  # noqa: E501

        :param contract_description_1: The contract_description_1 of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._contract_description_1 = contract_description_1

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this OrderStatus.  # noqa: E501

        Trading Exchange or Venue  # noqa: E501

        :return: The listing_exchange of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this OrderStatus.

        Trading Exchange or Venue  # noqa: E501

        :param listing_exchange: The listing_exchange of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def option_acct(self):
        """Gets the option_acct of this OrderStatus.  # noqa: E501


        :return: The option_acct of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._option_acct

    @option_acct.setter
    def option_acct(self, option_acct):
        """Sets the option_acct of this OrderStatus.


        :param option_acct: The option_acct of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._option_acct = option_acct

    @property
    def company_name(self):
        """Gets the company_name of this OrderStatus.  # noqa: E501

        Contracts company name  # noqa: E501

        :return: The company_name of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this OrderStatus.

        Contracts company name  # noqa: E501

        :param company_name: The company_name of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def size(self):
        """Gets the size of this OrderStatus.  # noqa: E501

        Quantity updated  # noqa: E501

        :return: The size of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this OrderStatus.

        Quantity updated  # noqa: E501

        :param size: The size of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def total_size(self):
        """Gets the total_size of this OrderStatus.  # noqa: E501

        Total quantity  # noqa: E501

        :return: The total_size of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this OrderStatus.

        Total quantity  # noqa: E501

        :param total_size: The total_size of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._total_size = total_size

    @property
    def currency(self):
        """Gets the currency of this OrderStatus.  # noqa: E501

        Contract traded currency  # noqa: E501

        :return: The currency of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderStatus.

        Contract traded currency  # noqa: E501

        :param currency: The currency of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def account(self):
        """Gets the account of this OrderStatus.  # noqa: E501

        account id  # noqa: E501

        :return: The account of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this OrderStatus.

        account id  # noqa: E501

        :param account: The account of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def order_type(self):
        """Gets the order_type of this OrderStatus.  # noqa: E501

        Types of orders  # noqa: E501

        :return: The order_type of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this OrderStatus.

        Types of orders  # noqa: E501

        :param order_type: The order_type of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def limit_price(self):
        """Gets the limit_price of this OrderStatus.  # noqa: E501

        Limit price  # noqa: E501

        :return: The limit_price of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this OrderStatus.

        Limit price  # noqa: E501

        :param limit_price: The limit_price of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._limit_price = limit_price

    @property
    def stop_price(self):
        """Gets the stop_price of this OrderStatus.  # noqa: E501

        Stop price  # noqa: E501

        :return: The stop_price of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this OrderStatus.

        Stop price  # noqa: E501

        :param stop_price: The stop_price of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._stop_price = stop_price

    @property
    def cum_fill(self):
        """Gets the cum_fill of this OrderStatus.  # noqa: E501

        Cumulative fill  # noqa: E501

        :return: The cum_fill of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._cum_fill

    @cum_fill.setter
    def cum_fill(self, cum_fill):
        """Sets the cum_fill of this OrderStatus.

        Cumulative fill  # noqa: E501

        :param cum_fill: The cum_fill of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._cum_fill = cum_fill

    @property
    def order_status(self):
        """Gets the order_status of this OrderStatus.  # noqa: E501

        *  PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                    Occurs most commonly if an exchange is closed. *  PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. *  PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                   The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified. *  Submitted - Indicates that the order has been accepted at the order destination and is working. *  Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.                This could occur unexpectedly when IB or the destination has rejected the order. *  Filled - Indicates that the order has been completely filled. *  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,               or if the order was to short a security and shares have not yet been located.   # noqa: E501

        :return: The order_status of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this OrderStatus.

        *  PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                    Occurs most commonly if an exchange is closed. *  PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. *  PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                   The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified. *  Submitted - Indicates that the order has been accepted at the order destination and is working. *  Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.                This could occur unexpectedly when IB or the destination has rejected the order. *  Filled - Indicates that the order has been completely filled. *  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,               or if the order was to short a security and shares have not yet been located.   # noqa: E501

        :param order_status: The order_status of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._order_status = order_status

    @property
    def order_status_description(self):
        """Gets the order_status_description of this OrderStatus.  # noqa: E501

        Description of the order status  # noqa: E501

        :return: The order_status_description of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._order_status_description

    @order_status_description.setter
    def order_status_description(self, order_status_description):
        """Sets the order_status_description of this OrderStatus.

        Description of the order status  # noqa: E501

        :param order_status_description: The order_status_description of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._order_status_description = order_status_description

    @property
    def tif(self):
        """Gets the tif of this OrderStatus.  # noqa: E501

        Time-in-Force - length of time order will continue working before it is canceled.  # noqa: E501

        :return: The tif of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._tif

    @tif.setter
    def tif(self, tif):
        """Sets the tif of this OrderStatus.

        Time-in-Force - length of time order will continue working before it is canceled.  # noqa: E501

        :param tif: The tif of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._tif = tif

    @property
    def fg_color(self):
        """Gets the fg_color of this OrderStatus.  # noqa: E501

        Foreground color in hex format  # noqa: E501

        :return: The fg_color of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._fg_color

    @fg_color.setter
    def fg_color(self, fg_color):
        """Sets the fg_color of this OrderStatus.

        Foreground color in hex format  # noqa: E501

        :param fg_color: The fg_color of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._fg_color = fg_color

    @property
    def bg_color(self):
        """Gets the bg_color of this OrderStatus.  # noqa: E501

        Background color in hex format  # noqa: E501

        :return: The bg_color of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._bg_color

    @bg_color.setter
    def bg_color(self, bg_color):
        """Sets the bg_color of this OrderStatus.

        Background color in hex format  # noqa: E501

        :param bg_color: The bg_color of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._bg_color = bg_color

    @property
    def order_not_editable(self):
        """Gets the order_not_editable of this OrderStatus.  # noqa: E501

        If true not allowed to modify order  # noqa: E501

        :return: The order_not_editable of this OrderStatus.  # noqa: E501
        :rtype: bool
        """
        return self._order_not_editable

    @order_not_editable.setter
    def order_not_editable(self, order_not_editable):
        """Sets the order_not_editable of this OrderStatus.

        If true not allowed to modify order  # noqa: E501

        :param order_not_editable: The order_not_editable of this OrderStatus.  # noqa: E501
        :type: bool
        """

        self._order_not_editable = order_not_editable

    @property
    def editable_fields(self):
        """Gets the editable_fields of this OrderStatus.  # noqa: E501

        Fields that can be edited in escaped unicode characters  # noqa: E501

        :return: The editable_fields of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._editable_fields

    @editable_fields.setter
    def editable_fields(self, editable_fields):
        """Sets the editable_fields of this OrderStatus.

        Fields that can be edited in escaped unicode characters  # noqa: E501

        :param editable_fields: The editable_fields of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._editable_fields = editable_fields

    @property
    def cannot_cancel_order(self):
        """Gets the cannot_cancel_order of this OrderStatus.  # noqa: E501

        If true not allowed to cancel order  # noqa: E501

        :return: The cannot_cancel_order of this OrderStatus.  # noqa: E501
        :rtype: bool
        """
        return self._cannot_cancel_order

    @cannot_cancel_order.setter
    def cannot_cancel_order(self, cannot_cancel_order):
        """Sets the cannot_cancel_order of this OrderStatus.

        If true not allowed to cancel order  # noqa: E501

        :param cannot_cancel_order: The cannot_cancel_order of this OrderStatus.  # noqa: E501
        :type: bool
        """

        self._cannot_cancel_order = cannot_cancel_order

    @property
    def outside_rth(self):
        """Gets the outside_rth of this OrderStatus.  # noqa: E501

        If true order trades outside regular trading hours  # noqa: E501

        :return: The outside_rth of this OrderStatus.  # noqa: E501
        :rtype: bool
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this OrderStatus.

        If true order trades outside regular trading hours  # noqa: E501

        :param outside_rth: The outside_rth of this OrderStatus.  # noqa: E501
        :type: bool
        """

        self._outside_rth = outside_rth

    @property
    def deactivate_order(self):
        """Gets the deactivate_order of this OrderStatus.  # noqa: E501

        If true order is de-activated  # noqa: E501

        :return: The deactivate_order of this OrderStatus.  # noqa: E501
        :rtype: bool
        """
        return self._deactivate_order

    @deactivate_order.setter
    def deactivate_order(self, deactivate_order):
        """Sets the deactivate_order of this OrderStatus.

        If true order is de-activated  # noqa: E501

        :param deactivate_order: The deactivate_order of this OrderStatus.  # noqa: E501
        :type: bool
        """

        self._deactivate_order = deactivate_order

    @property
    def use_price_mgmt_algo(self):
        """Gets the use_price_mgmt_algo of this OrderStatus.  # noqa: E501

        If true price management algo is enabled, refer to https://www.interactivebrokers.com/en/index.php?f=43423  # noqa: E501

        :return: The use_price_mgmt_algo of this OrderStatus.  # noqa: E501
        :rtype: bool
        """
        return self._use_price_mgmt_algo

    @use_price_mgmt_algo.setter
    def use_price_mgmt_algo(self, use_price_mgmt_algo):
        """Sets the use_price_mgmt_algo of this OrderStatus.

        If true price management algo is enabled, refer to https://www.interactivebrokers.com/en/index.php?f=43423  # noqa: E501

        :param use_price_mgmt_algo: The use_price_mgmt_algo of this OrderStatus.  # noqa: E501
        :type: bool
        """

        self._use_price_mgmt_algo = use_price_mgmt_algo

    @property
    def sec_type(self):
        """Gets the sec_type of this OrderStatus.  # noqa: E501

        Asset class  # noqa: E501

        :return: The sec_type of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this OrderStatus.

        Asset class  # noqa: E501

        :param sec_type: The sec_type of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    @property
    def available_chart_periods(self):
        """Gets the available_chart_periods of this OrderStatus.  # noqa: E501

        List of available chart periods  # noqa: E501

        :return: The available_chart_periods of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._available_chart_periods

    @available_chart_periods.setter
    def available_chart_periods(self, available_chart_periods):
        """Sets the available_chart_periods of this OrderStatus.

        List of available chart periods  # noqa: E501

        :param available_chart_periods: The available_chart_periods of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._available_chart_periods = available_chart_periods

    @property
    def order_description(self):
        """Gets the order_description of this OrderStatus.  # noqa: E501

        Format description of order  # noqa: E501

        :return: The order_description of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._order_description

    @order_description.setter
    def order_description(self, order_description):
        """Sets the order_description of this OrderStatus.

        Format description of order  # noqa: E501

        :param order_description: The order_description of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._order_description = order_description

    @property
    def order_description_with_contract(self):
        """Gets the order_description_with_contract of this OrderStatus.  # noqa: E501

        order_description with the symbol  # noqa: E501

        :return: The order_description_with_contract of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._order_description_with_contract

    @order_description_with_contract.setter
    def order_description_with_contract(self, order_description_with_contract):
        """Sets the order_description_with_contract of this OrderStatus.

        order_description with the symbol  # noqa: E501

        :param order_description_with_contract: The order_description_with_contract of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._order_description_with_contract = order_description_with_contract

    @property
    def alert_active(self):
        """Gets the alert_active of this OrderStatus.  # noqa: E501


        :return: The alert_active of this OrderStatus.  # noqa: E501
        :rtype: int
        """
        return self._alert_active

    @alert_active.setter
    def alert_active(self, alert_active):
        """Sets the alert_active of this OrderStatus.


        :param alert_active: The alert_active of this OrderStatus.  # noqa: E501
        :type: int
        """

        self._alert_active = alert_active

    @property
    def child_order_type(self):
        """Gets the child_order_type of this OrderStatus.  # noqa: E501

        type of the child order  # noqa: E501

        :return: The child_order_type of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._child_order_type

    @child_order_type.setter
    def child_order_type(self, child_order_type):
        """Sets the child_order_type of this OrderStatus.

        type of the child order  # noqa: E501

        :param child_order_type: The child_order_type of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._child_order_type = child_order_type

    @property
    def size_and_fills(self):
        """Gets the size_and_fills of this OrderStatus.  # noqa: E501

        Format fillQuantity\\totalQuantity  # noqa: E501

        :return: The size_and_fills of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._size_and_fills

    @size_and_fills.setter
    def size_and_fills(self, size_and_fills):
        """Sets the size_and_fills of this OrderStatus.

        Format fillQuantity\\totalQuantity  # noqa: E501

        :param size_and_fills: The size_and_fills of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._size_and_fills = size_and_fills

    @property
    def exit_strategy_display_price(self):
        """Gets the exit_strategy_display_price of this OrderStatus.  # noqa: E501

        Position display price  # noqa: E501

        :return: The exit_strategy_display_price of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._exit_strategy_display_price

    @exit_strategy_display_price.setter
    def exit_strategy_display_price(self, exit_strategy_display_price):
        """Sets the exit_strategy_display_price of this OrderStatus.

        Position display price  # noqa: E501

        :param exit_strategy_display_price: The exit_strategy_display_price of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._exit_strategy_display_price = exit_strategy_display_price

    @property
    def exit_strategy_chart_description(self):
        """Gets the exit_strategy_chart_description of this OrderStatus.  # noqa: E501

        Position description to display on chart  # noqa: E501

        :return: The exit_strategy_chart_description of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._exit_strategy_chart_description

    @exit_strategy_chart_description.setter
    def exit_strategy_chart_description(self, exit_strategy_chart_description):
        """Sets the exit_strategy_chart_description of this OrderStatus.

        Position description to display on chart  # noqa: E501

        :param exit_strategy_chart_description: The exit_strategy_chart_description of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._exit_strategy_chart_description = exit_strategy_chart_description

    @property
    def exit_strategy_tool_availability(self):
        """Gets the exit_strategy_tool_availability of this OrderStatus.  # noqa: E501

        * 1: If your account has position or order for contract * 0: If your account has no position or order for contract   # noqa: E501

        :return: The exit_strategy_tool_availability of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._exit_strategy_tool_availability

    @exit_strategy_tool_availability.setter
    def exit_strategy_tool_availability(self, exit_strategy_tool_availability):
        """Sets the exit_strategy_tool_availability of this OrderStatus.

        * 1: If your account has position or order for contract * 0: If your account has no position or order for contract   # noqa: E501

        :param exit_strategy_tool_availability: The exit_strategy_tool_availability of this OrderStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "0"]  # noqa: E501
        if exit_strategy_tool_availability not in allowed_values:
            raise ValueError(
                "Invalid value for `exit_strategy_tool_availability` ({0}), must be one of {1}"  # noqa: E501
                .format(exit_strategy_tool_availability, allowed_values)
            )

        self._exit_strategy_tool_availability = exit_strategy_tool_availability

    @property
    def allowed_duplicate_opposite(self):
        """Gets the allowed_duplicate_opposite of this OrderStatus.  # noqa: E501

        Returns true if contract supports duplicate/opposite side order.  # noqa: E501

        :return: The allowed_duplicate_opposite of this OrderStatus.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_duplicate_opposite

    @allowed_duplicate_opposite.setter
    def allowed_duplicate_opposite(self, allowed_duplicate_opposite):
        """Sets the allowed_duplicate_opposite of this OrderStatus.

        Returns true if contract supports duplicate/opposite side order.  # noqa: E501

        :param allowed_duplicate_opposite: The allowed_duplicate_opposite of this OrderStatus.  # noqa: E501
        :type: bool
        """

        self._allowed_duplicate_opposite = allowed_duplicate_opposite

    @property
    def order_time(self):
        """Gets the order_time of this OrderStatus.  # noqa: E501

        Time of status update in unix time  # noqa: E501

        :return: The order_time of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._order_time

    @order_time.setter
    def order_time(self, order_time):
        """Sets the order_time of this OrderStatus.

        Time of status update in unix time  # noqa: E501

        :param order_time: The order_time of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._order_time = order_time

    @property
    def oca_group_id(self):
        """Gets the oca_group_id of this OrderStatus.  # noqa: E501

        only exists for oca orders, oca orders in same group will have same id  # noqa: E501

        :return: The oca_group_id of this OrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._oca_group_id

    @oca_group_id.setter
    def oca_group_id(self, oca_group_id):
        """Sets the oca_group_id of this OrderStatus.

        only exists for oca orders, oca orders in same group will have same id  # noqa: E501

        :param oca_group_id: The oca_group_id of this OrderStatus.  # noqa: E501
        :type: str
        """

        self._oca_group_id = oca_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
