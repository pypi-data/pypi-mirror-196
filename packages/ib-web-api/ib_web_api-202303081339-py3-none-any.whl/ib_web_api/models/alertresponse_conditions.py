# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertresponseConditions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_type': 'int',
        'conidex': 'str',
        'contract_description_1': 'str',
        'condition_operator': 'str',
        'condition_trigger_method': 'str',
        'condition_value': 'str',
        'condition_logic_bind': 'str',
        'condition_time_zone': 'str'
    }

    attribute_map = {
        'condition_type': 'condition_type',
        'conidex': 'conidex',
        'contract_description_1': 'contract_description_1',
        'condition_operator': 'condition_operator',
        'condition_trigger_method': 'condition_trigger_method',
        'condition_value': 'condition_value',
        'condition_logic_bind': 'condition_logic_bind',
        'condition_time_zone': 'condition_time_zone'
    }

    def __init__(self, condition_type=None, conidex=None, contract_description_1=None, condition_operator=None, condition_trigger_method=None, condition_value=None, condition_logic_bind=None, condition_time_zone=None):  # noqa: E501
        """AlertresponseConditions - a model defined in Swagger"""  # noqa: E501
        self._condition_type = None
        self._conidex = None
        self._contract_description_1 = None
        self._condition_operator = None
        self._condition_trigger_method = None
        self._condition_value = None
        self._condition_logic_bind = None
        self._condition_time_zone = None
        self.discriminator = None
        if condition_type is not None:
            self.condition_type = condition_type
        if conidex is not None:
            self.conidex = conidex
        if contract_description_1 is not None:
            self.contract_description_1 = contract_description_1
        if condition_operator is not None:
            self.condition_operator = condition_operator
        if condition_trigger_method is not None:
            self.condition_trigger_method = condition_trigger_method
        if condition_value is not None:
            self.condition_value = condition_value
        if condition_logic_bind is not None:
            self.condition_logic_bind = condition_logic_bind
        if condition_time_zone is not None:
            self.condition_time_zone = condition_time_zone

    @property
    def condition_type(self):
        """Gets the condition_type of this AlertresponseConditions.  # noqa: E501

        Types: 1-Price, 3-Time, 4-Margin, 5-Trade, 6-Volume, 7: MTA market 8: MTA Position, 9: MTA Acc. Daily PN&   # noqa: E501

        :return: The condition_type of this AlertresponseConditions.  # noqa: E501
        :rtype: int
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this AlertresponseConditions.

        Types: 1-Price, 3-Time, 4-Margin, 5-Trade, 6-Volume, 7: MTA market 8: MTA Position, 9: MTA Acc. Daily PN&   # noqa: E501

        :param condition_type: The condition_type of this AlertresponseConditions.  # noqa: E501
        :type: int
        """

        self._condition_type = condition_type

    @property
    def conidex(self):
        """Gets the conidex of this AlertresponseConditions.  # noqa: E501

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :return: The conidex of this AlertresponseConditions.  # noqa: E501
        :rtype: str
        """
        return self._conidex

    @conidex.setter
    def conidex(self, conidex):
        """Sets the conidex of this AlertresponseConditions.

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :param conidex: The conidex of this AlertresponseConditions.  # noqa: E501
        :type: str
        """

        self._conidex = conidex

    @property
    def contract_description_1(self):
        """Gets the contract_description_1 of this AlertresponseConditions.  # noqa: E501

        Format contract name  # noqa: E501

        :return: The contract_description_1 of this AlertresponseConditions.  # noqa: E501
        :rtype: str
        """
        return self._contract_description_1

    @contract_description_1.setter
    def contract_description_1(self, contract_description_1):
        """Sets the contract_description_1 of this AlertresponseConditions.

        Format contract name  # noqa: E501

        :param contract_description_1: The contract_description_1 of this AlertresponseConditions.  # noqa: E501
        :type: str
        """

        self._contract_description_1 = contract_description_1

    @property
    def condition_operator(self):
        """Gets the condition_operator of this AlertresponseConditions.  # noqa: E501

        optional, operator for the current condition   * >= Greater than or equal to   * <= Less than or equal to   # noqa: E501

        :return: The condition_operator of this AlertresponseConditions.  # noqa: E501
        :rtype: str
        """
        return self._condition_operator

    @condition_operator.setter
    def condition_operator(self, condition_operator):
        """Sets the condition_operator of this AlertresponseConditions.

        optional, operator for the current condition   * >= Greater than or equal to   * <= Less than or equal to   # noqa: E501

        :param condition_operator: The condition_operator of this AlertresponseConditions.  # noqa: E501
        :type: str
        """

        self._condition_operator = condition_operator

    @property
    def condition_trigger_method(self):
        """Gets the condition_trigger_method of this AlertresponseConditions.  # noqa: E501

        optional, only some type of conditions have triggerMethod  # noqa: E501

        :return: The condition_trigger_method of this AlertresponseConditions.  # noqa: E501
        :rtype: str
        """
        return self._condition_trigger_method

    @condition_trigger_method.setter
    def condition_trigger_method(self, condition_trigger_method):
        """Sets the condition_trigger_method of this AlertresponseConditions.

        optional, only some type of conditions have triggerMethod  # noqa: E501

        :param condition_trigger_method: The condition_trigger_method of this AlertresponseConditions.  # noqa: E501
        :type: str
        """

        self._condition_trigger_method = condition_trigger_method

    @property
    def condition_value(self):
        """Gets the condition_value of this AlertresponseConditions.  # noqa: E501

        can not be empty, can pass default value \"*\"  # noqa: E501

        :return: The condition_value of this AlertresponseConditions.  # noqa: E501
        :rtype: str
        """
        return self._condition_value

    @condition_value.setter
    def condition_value(self, condition_value):
        """Sets the condition_value of this AlertresponseConditions.

        can not be empty, can pass default value \"*\"  # noqa: E501

        :param condition_value: The condition_value of this AlertresponseConditions.  # noqa: E501
        :type: str
        """

        self._condition_value = condition_value

    @property
    def condition_logic_bind(self):
        """Gets the condition_logic_bind of this AlertresponseConditions.  # noqa: E501

        Condition array should end with \"n\"   * a - AND   * o - OR   * n - END   # noqa: E501

        :return: The condition_logic_bind of this AlertresponseConditions.  # noqa: E501
        :rtype: str
        """
        return self._condition_logic_bind

    @condition_logic_bind.setter
    def condition_logic_bind(self, condition_logic_bind):
        """Sets the condition_logic_bind of this AlertresponseConditions.

        Condition array should end with \"n\"   * a - AND   * o - OR   * n - END   # noqa: E501

        :param condition_logic_bind: The condition_logic_bind of this AlertresponseConditions.  # noqa: E501
        :type: str
        """

        self._condition_logic_bind = condition_logic_bind

    @property
    def condition_time_zone(self):
        """Gets the condition_time_zone of this AlertresponseConditions.  # noqa: E501

        only needed for some MTA alert condition  # noqa: E501

        :return: The condition_time_zone of this AlertresponseConditions.  # noqa: E501
        :rtype: str
        """
        return self._condition_time_zone

    @condition_time_zone.setter
    def condition_time_zone(self, condition_time_zone):
        """Sets the condition_time_zone of this AlertresponseConditions.

        only needed for some MTA alert condition  # noqa: E501

        :param condition_time_zone: The condition_time_zone of this AlertresponseConditions.  # noqa: E501
        :type: str
        """

        self._condition_time_zone = condition_time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertresponseConditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertresponseConditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
