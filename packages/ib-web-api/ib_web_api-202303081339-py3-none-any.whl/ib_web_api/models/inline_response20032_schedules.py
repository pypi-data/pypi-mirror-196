# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20032Schedules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clearing_cycle_end_time': 'int',
        'trading_schedule_date': 'int',
        'sessions': 'InlineResponse20032Sessions',
        'trading_times': 'InlineResponse20032TradingTimes'
    }

    attribute_map = {
        'clearing_cycle_end_time': 'clearingCycleEndTime',
        'trading_schedule_date': 'tradingScheduleDate',
        'sessions': 'sessions',
        'trading_times': 'tradingTimes'
    }

    def __init__(self, clearing_cycle_end_time=None, trading_schedule_date=None, sessions=None, trading_times=None):  # noqa: E501
        """InlineResponse20032Schedules - a model defined in Swagger"""  # noqa: E501
        self._clearing_cycle_end_time = None
        self._trading_schedule_date = None
        self._sessions = None
        self._trading_times = None
        self.discriminator = None
        if clearing_cycle_end_time is not None:
            self.clearing_cycle_end_time = clearing_cycle_end_time
        if trading_schedule_date is not None:
            self.trading_schedule_date = trading_schedule_date
        if sessions is not None:
            self.sessions = sessions
        if trading_times is not None:
            self.trading_times = trading_times

    @property
    def clearing_cycle_end_time(self):
        """Gets the clearing_cycle_end_time of this InlineResponse20032Schedules.  # noqa: E501


        :return: The clearing_cycle_end_time of this InlineResponse20032Schedules.  # noqa: E501
        :rtype: int
        """
        return self._clearing_cycle_end_time

    @clearing_cycle_end_time.setter
    def clearing_cycle_end_time(self, clearing_cycle_end_time):
        """Sets the clearing_cycle_end_time of this InlineResponse20032Schedules.


        :param clearing_cycle_end_time: The clearing_cycle_end_time of this InlineResponse20032Schedules.  # noqa: E501
        :type: int
        """

        self._clearing_cycle_end_time = clearing_cycle_end_time

    @property
    def trading_schedule_date(self):
        """Gets the trading_schedule_date of this InlineResponse20032Schedules.  # noqa: E501

        20000101 stands for any Sat, 20000102 stands for any Sun, ... 20000107 stands for any Fri. Any other date stands for itself.  # noqa: E501

        :return: The trading_schedule_date of this InlineResponse20032Schedules.  # noqa: E501
        :rtype: int
        """
        return self._trading_schedule_date

    @trading_schedule_date.setter
    def trading_schedule_date(self, trading_schedule_date):
        """Sets the trading_schedule_date of this InlineResponse20032Schedules.

        20000101 stands for any Sat, 20000102 stands for any Sun, ... 20000107 stands for any Fri. Any other date stands for itself.  # noqa: E501

        :param trading_schedule_date: The trading_schedule_date of this InlineResponse20032Schedules.  # noqa: E501
        :type: int
        """

        self._trading_schedule_date = trading_schedule_date

    @property
    def sessions(self):
        """Gets the sessions of this InlineResponse20032Schedules.  # noqa: E501


        :return: The sessions of this InlineResponse20032Schedules.  # noqa: E501
        :rtype: InlineResponse20032Sessions
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """Sets the sessions of this InlineResponse20032Schedules.


        :param sessions: The sessions of this InlineResponse20032Schedules.  # noqa: E501
        :type: InlineResponse20032Sessions
        """

        self._sessions = sessions

    @property
    def trading_times(self):
        """Gets the trading_times of this InlineResponse20032Schedules.  # noqa: E501


        :return: The trading_times of this InlineResponse20032Schedules.  # noqa: E501
        :rtype: InlineResponse20032TradingTimes
        """
        return self._trading_times

    @trading_times.setter
    def trading_times(self, trading_times):
        """Sets the trading_times of this InlineResponse20032Schedules.


        :param trading_times: The trading_times of this InlineResponse20032Schedules.  # noqa: E501
        :type: InlineResponse20032TradingTimes
        """

        self._trading_times = trading_times

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20032Schedules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20032Schedules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
