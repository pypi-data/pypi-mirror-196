# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScannerparamsLocationTreeLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instruments': 'str',
        'display_name': 'str',
        'location_code': 'str',
        'route_exchange': 'str'
    }

    attribute_map = {
        'instruments': 'instruments',
        'display_name': 'displayName',
        'location_code': 'locationCode',
        'route_exchange': 'routeExchange'
    }

    def __init__(self, instruments=None, display_name=None, location_code=None, route_exchange=None):  # noqa: E501
        """ScannerparamsLocationTreeLocation - a model defined in Swagger"""  # noqa: E501
        self._instruments = None
        self._display_name = None
        self._location_code = None
        self._route_exchange = None
        self.discriminator = None
        if instruments is not None:
            self.instruments = instruments
        if display_name is not None:
            self.display_name = display_name
        if location_code is not None:
            self.location_code = location_code
        if route_exchange is not None:
            self.route_exchange = route_exchange

    @property
    def instruments(self):
        """Gets the instruments of this ScannerparamsLocationTreeLocation.  # noqa: E501


        :return: The instruments of this ScannerparamsLocationTreeLocation.  # noqa: E501
        :rtype: str
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this ScannerparamsLocationTreeLocation.


        :param instruments: The instruments of this ScannerparamsLocationTreeLocation.  # noqa: E501
        :type: str
        """

        self._instruments = instruments

    @property
    def display_name(self):
        """Gets the display_name of this ScannerparamsLocationTreeLocation.  # noqa: E501


        :return: The display_name of this ScannerparamsLocationTreeLocation.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ScannerparamsLocationTreeLocation.


        :param display_name: The display_name of this ScannerparamsLocationTreeLocation.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def location_code(self):
        """Gets the location_code of this ScannerparamsLocationTreeLocation.  # noqa: E501


        :return: The location_code of this ScannerparamsLocationTreeLocation.  # noqa: E501
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this ScannerparamsLocationTreeLocation.


        :param location_code: The location_code of this ScannerparamsLocationTreeLocation.  # noqa: E501
        :type: str
        """

        self._location_code = location_code

    @property
    def route_exchange(self):
        """Gets the route_exchange of this ScannerparamsLocationTreeLocation.  # noqa: E501


        :return: The route_exchange of this ScannerparamsLocationTreeLocation.  # noqa: E501
        :rtype: str
        """
        return self._route_exchange

    @route_exchange.setter
    def route_exchange(self, route_exchange):
        """Sets the route_exchange of this ScannerparamsLocationTreeLocation.


        :param route_exchange: The route_exchange of this ScannerparamsLocationTreeLocation.  # noqa: E501
        :type: str
        """

        self._route_exchange = route_exchange

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScannerparamsLocationTreeLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScannerparamsLocationTreeLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
