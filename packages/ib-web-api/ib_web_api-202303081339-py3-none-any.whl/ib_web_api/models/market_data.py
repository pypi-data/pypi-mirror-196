# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarketData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conid': 'float',
        'exchange': 'str',
        'min_tick': 'float',
        'last': 'float',
        'last_size': 'float',
        'bid': 'float',
        'bid_size': 'float',
        'ask': 'float',
        'ask_size': 'float'
    }

    attribute_map = {
        'conid': 'Conid',
        'exchange': 'Exchange',
        'min_tick': 'minTick',
        'last': 'Last',
        'last_size': 'LastSize',
        'bid': 'Bid',
        'bid_size': 'BidSize',
        'ask': 'Ask',
        'ask_size': 'AskSize'
    }

    def __init__(self, conid=None, exchange=None, min_tick=None, last=None, last_size=None, bid=None, bid_size=None, ask=None, ask_size=None):  # noqa: E501
        """MarketData - a model defined in Swagger"""  # noqa: E501
        self._conid = None
        self._exchange = None
        self._min_tick = None
        self._last = None
        self._last_size = None
        self._bid = None
        self._bid_size = None
        self._ask = None
        self._ask_size = None
        self.discriminator = None
        if conid is not None:
            self.conid = conid
        if exchange is not None:
            self.exchange = exchange
        if min_tick is not None:
            self.min_tick = min_tick
        if last is not None:
            self.last = last
        if last_size is not None:
            self.last_size = last_size
        if bid is not None:
            self.bid = bid
        if bid_size is not None:
            self.bid_size = bid_size
        if ask is not None:
            self.ask = ask
        if ask_size is not None:
            self.ask_size = ask_size

    @property
    def conid(self):
        """Gets the conid of this MarketData.  # noqa: E501

        IBKR Contract ID  # noqa: E501

        :return: The conid of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this MarketData.

        IBKR Contract ID  # noqa: E501

        :param conid: The conid of this MarketData.  # noqa: E501
        :type: float
        """

        self._conid = conid

    @property
    def exchange(self):
        """Gets the exchange of this MarketData.  # noqa: E501

        Exchange  # noqa: E501

        :return: The exchange of this MarketData.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this MarketData.

        Exchange  # noqa: E501

        :param exchange: The exchange of this MarketData.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def min_tick(self):
        """Gets the min_tick of this MarketData.  # noqa: E501


        :return: The min_tick of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._min_tick

    @min_tick.setter
    def min_tick(self, min_tick):
        """Sets the min_tick of this MarketData.


        :param min_tick: The min_tick of this MarketData.  # noqa: E501
        :type: float
        """

        self._min_tick = min_tick

    @property
    def last(self):
        """Gets the last of this MarketData.  # noqa: E501


        :return: The last of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this MarketData.


        :param last: The last of this MarketData.  # noqa: E501
        :type: float
        """

        self._last = last

    @property
    def last_size(self):
        """Gets the last_size of this MarketData.  # noqa: E501


        :return: The last_size of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._last_size

    @last_size.setter
    def last_size(self, last_size):
        """Sets the last_size of this MarketData.


        :param last_size: The last_size of this MarketData.  # noqa: E501
        :type: float
        """

        self._last_size = last_size

    @property
    def bid(self):
        """Gets the bid of this MarketData.  # noqa: E501


        :return: The bid of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this MarketData.


        :param bid: The bid of this MarketData.  # noqa: E501
        :type: float
        """

        self._bid = bid

    @property
    def bid_size(self):
        """Gets the bid_size of this MarketData.  # noqa: E501


        :return: The bid_size of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._bid_size

    @bid_size.setter
    def bid_size(self, bid_size):
        """Sets the bid_size of this MarketData.


        :param bid_size: The bid_size of this MarketData.  # noqa: E501
        :type: float
        """

        self._bid_size = bid_size

    @property
    def ask(self):
        """Gets the ask of this MarketData.  # noqa: E501


        :return: The ask of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this MarketData.


        :param ask: The ask of this MarketData.  # noqa: E501
        :type: float
        """

        self._ask = ask

    @property
    def ask_size(self):
        """Gets the ask_size of this MarketData.  # noqa: E501


        :return: The ask_size of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._ask_size

    @ask_size.setter
    def ask_size(self, ask_size):
        """Sets the ask_size of this MarketData.


        :param ask_size: The ask_size of this MarketData.  # noqa: E501
        :type: float
        """

        self._ask_size = ask_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
