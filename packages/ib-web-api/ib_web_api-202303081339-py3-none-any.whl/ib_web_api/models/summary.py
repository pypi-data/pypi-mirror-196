# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Summary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'SummaryTotal',
        'start_date': 'str',
        'excluded_accounts': 'list[SummaryExcludedAccounts]',
        'last_successful_update': 'str',
        'account_summaries': 'list[SummaryAccountSummaries]',
        'end_date': 'str',
        'has_external_accounts': 'bool',
        'rc': 'int',
        'currency': 'str',
        'user_id': 'str',
        'pm': 'str',
        'view': 'str',
        'balance_by_date': 'SummaryBalanceByDate'
    }

    attribute_map = {
        'total': 'total',
        'start_date': 'startDate',
        'excluded_accounts': 'excludedAccounts',
        'last_successful_update': 'lastSuccessfulUpdate',
        'account_summaries': 'accountSummaries',
        'end_date': 'endDate',
        'has_external_accounts': 'hasExternalAccounts',
        'rc': 'rc',
        'currency': 'currency',
        'user_id': 'userId',
        'pm': 'pm',
        'view': 'view',
        'balance_by_date': 'balanceByDate'
    }

    def __init__(self, total=None, start_date=None, excluded_accounts=None, last_successful_update=None, account_summaries=None, end_date=None, has_external_accounts=None, rc=None, currency=None, user_id=None, pm=None, view=None, balance_by_date=None):  # noqa: E501
        """Summary - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._start_date = None
        self._excluded_accounts = None
        self._last_successful_update = None
        self._account_summaries = None
        self._end_date = None
        self._has_external_accounts = None
        self._rc = None
        self._currency = None
        self._user_id = None
        self._pm = None
        self._view = None
        self._balance_by_date = None
        self.discriminator = None
        if total is not None:
            self.total = total
        if start_date is not None:
            self.start_date = start_date
        if excluded_accounts is not None:
            self.excluded_accounts = excluded_accounts
        if last_successful_update is not None:
            self.last_successful_update = last_successful_update
        if account_summaries is not None:
            self.account_summaries = account_summaries
        if end_date is not None:
            self.end_date = end_date
        if has_external_accounts is not None:
            self.has_external_accounts = has_external_accounts
        if rc is not None:
            self.rc = rc
        if currency is not None:
            self.currency = currency
        if user_id is not None:
            self.user_id = user_id
        if pm is not None:
            self.pm = pm
        if view is not None:
            self.view = view
        if balance_by_date is not None:
            self.balance_by_date = balance_by_date

    @property
    def total(self):
        """Gets the total of this Summary.  # noqa: E501


        :return: The total of this Summary.  # noqa: E501
        :rtype: SummaryTotal
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Summary.


        :param total: The total of this Summary.  # noqa: E501
        :type: SummaryTotal
        """

        self._total = total

    @property
    def start_date(self):
        """Gets the start_date of this Summary.  # noqa: E501

        date format-- yyyy-MM-dd  # noqa: E501

        :return: The start_date of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Summary.

        date format-- yyyy-MM-dd  # noqa: E501

        :param start_date: The start_date of this Summary.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def excluded_accounts(self):
        """Gets the excluded_accounts of this Summary.  # noqa: E501


        :return: The excluded_accounts of this Summary.  # noqa: E501
        :rtype: list[SummaryExcludedAccounts]
        """
        return self._excluded_accounts

    @excluded_accounts.setter
    def excluded_accounts(self, excluded_accounts):
        """Sets the excluded_accounts of this Summary.


        :param excluded_accounts: The excluded_accounts of this Summary.  # noqa: E501
        :type: list[SummaryExcludedAccounts]
        """

        self._excluded_accounts = excluded_accounts

    @property
    def last_successful_update(self):
        """Gets the last_successful_update of this Summary.  # noqa: E501


        :return: The last_successful_update of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._last_successful_update

    @last_successful_update.setter
    def last_successful_update(self, last_successful_update):
        """Sets the last_successful_update of this Summary.


        :param last_successful_update: The last_successful_update of this Summary.  # noqa: E501
        :type: str
        """

        self._last_successful_update = last_successful_update

    @property
    def account_summaries(self):
        """Gets the account_summaries of this Summary.  # noqa: E501


        :return: The account_summaries of this Summary.  # noqa: E501
        :rtype: list[SummaryAccountSummaries]
        """
        return self._account_summaries

    @account_summaries.setter
    def account_summaries(self, account_summaries):
        """Sets the account_summaries of this Summary.


        :param account_summaries: The account_summaries of this Summary.  # noqa: E501
        :type: list[SummaryAccountSummaries]
        """

        self._account_summaries = account_summaries

    @property
    def end_date(self):
        """Gets the end_date of this Summary.  # noqa: E501


        :return: The end_date of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Summary.


        :param end_date: The end_date of this Summary.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def has_external_accounts(self):
        """Gets the has_external_accounts of this Summary.  # noqa: E501

        indicator of user having configured any external accounts  # noqa: E501

        :return: The has_external_accounts of this Summary.  # noqa: E501
        :rtype: bool
        """
        return self._has_external_accounts

    @has_external_accounts.setter
    def has_external_accounts(self, has_external_accounts):
        """Sets the has_external_accounts of this Summary.

        indicator of user having configured any external accounts  # noqa: E501

        :param has_external_accounts: The has_external_accounts of this Summary.  # noqa: E501
        :type: bool
        """

        self._has_external_accounts = has_external_accounts

    @property
    def rc(self):
        """Gets the rc of this Summary.  # noqa: E501


        :return: The rc of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._rc

    @rc.setter
    def rc(self, rc):
        """Sets the rc of this Summary.


        :param rc: The rc of this Summary.  # noqa: E501
        :type: int
        """

        self._rc = rc

    @property
    def currency(self):
        """Gets the currency of this Summary.  # noqa: E501


        :return: The currency of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Summary.


        :param currency: The currency of this Summary.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def user_id(self):
        """Gets the user_id of this Summary.  # noqa: E501


        :return: The user_id of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Summary.


        :param user_id: The user_id of this Summary.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def pm(self):
        """Gets the pm of this Summary.  # noqa: E501


        :return: The pm of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._pm

    @pm.setter
    def pm(self, pm):
        """Sets the pm of this Summary.


        :param pm: The pm of this Summary.  # noqa: E501
        :type: str
        """

        self._pm = pm

    @property
    def view(self):
        """Gets the view of this Summary.  # noqa: E501


        :return: The view of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this Summary.


        :param view: The view of this Summary.  # noqa: E501
        :type: str
        """

        self._view = view

    @property
    def balance_by_date(self):
        """Gets the balance_by_date of this Summary.  # noqa: E501


        :return: The balance_by_date of this Summary.  # noqa: E501
        :rtype: SummaryBalanceByDate
        """
        return self._balance_by_date

    @balance_by_date.setter
    def balance_by_date(self, balance_by_date):
        """Sets the balance_by_date of this Summary.


        :param balance_by_date: The balance_by_date of this Summary.  # noqa: E501
        :type: SummaryBalanceByDate
        """

        self._balance_by_date = balance_by_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Summary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Summary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
