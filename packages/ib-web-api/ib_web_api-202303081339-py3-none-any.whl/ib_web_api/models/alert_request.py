# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'int',
        'alert_name': 'str',
        'alert_message': 'str',
        'alert_repeatable': 'int',
        'email': 'str',
        'send_message': 'int',
        'tif': 'str',
        'expire_time': 'str',
        'outside_rth': 'int',
        'i_tws_orders_only': 'int',
        'show_popup': 'int',
        'tool_id': 'int',
        'play_audio': 'str',
        'conditions': 'list[AlertrequestConditions]'
    }

    attribute_map = {
        'order_id': 'orderId',
        'alert_name': 'alertName',
        'alert_message': 'alertMessage',
        'alert_repeatable': 'alertRepeatable',
        'email': 'email',
        'send_message': 'sendMessage',
        'tif': 'tif',
        'expire_time': 'expireTime',
        'outside_rth': 'outsideRth',
        'i_tws_orders_only': 'iTWSOrdersOnly',
        'show_popup': 'showPopup',
        'tool_id': 'toolId',
        'play_audio': 'playAudio',
        'conditions': 'conditions'
    }

    def __init__(self, order_id=None, alert_name=None, alert_message=None, alert_repeatable=None, email=None, send_message=None, tif=None, expire_time=None, outside_rth=None, i_tws_orders_only=None, show_popup=None, tool_id=None, play_audio=None, conditions=None):  # noqa: E501
        """AlertRequest - a model defined in Swagger"""  # noqa: E501
        self._order_id = None
        self._alert_name = None
        self._alert_message = None
        self._alert_repeatable = None
        self._email = None
        self._send_message = None
        self._tif = None
        self._expire_time = None
        self._outside_rth = None
        self._i_tws_orders_only = None
        self._show_popup = None
        self._tool_id = None
        self._play_audio = None
        self._conditions = None
        self.discriminator = None
        if order_id is not None:
            self.order_id = order_id
        if alert_name is not None:
            self.alert_name = alert_name
        if alert_message is not None:
            self.alert_message = alert_message
        if alert_repeatable is not None:
            self.alert_repeatable = alert_repeatable
        if email is not None:
            self.email = email
        if send_message is not None:
            self.send_message = send_message
        if tif is not None:
            self.tif = tif
        if expire_time is not None:
            self.expire_time = expire_time
        if outside_rth is not None:
            self.outside_rth = outside_rth
        if i_tws_orders_only is not None:
            self.i_tws_orders_only = i_tws_orders_only
        if show_popup is not None:
            self.show_popup = show_popup
        if tool_id is not None:
            self.tool_id = tool_id
        if play_audio is not None:
            self.play_audio = play_audio
        if conditions is not None:
            self.conditions = conditions

    @property
    def order_id(self):
        """Gets the order_id of this AlertRequest.  # noqa: E501

        orderId is required when modifying alert. You can get it from /iserver/account/:accountId/alerts   # noqa: E501

        :return: The order_id of this AlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this AlertRequest.

        orderId is required when modifying alert. You can get it from /iserver/account/:accountId/alerts   # noqa: E501

        :param order_id: The order_id of this AlertRequest.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def alert_name(self):
        """Gets the alert_name of this AlertRequest.  # noqa: E501

        name of alert  # noqa: E501

        :return: The alert_name of this AlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._alert_name

    @alert_name.setter
    def alert_name(self, alert_name):
        """Sets the alert_name of this AlertRequest.

        name of alert  # noqa: E501

        :param alert_name: The alert_name of this AlertRequest.  # noqa: E501
        :type: str
        """

        self._alert_name = alert_name

    @property
    def alert_message(self):
        """Gets the alert_message of this AlertRequest.  # noqa: E501

        The message you want to receive via email or text message  # noqa: E501

        :return: The alert_message of this AlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._alert_message

    @alert_message.setter
    def alert_message(self, alert_message):
        """Sets the alert_message of this AlertRequest.

        The message you want to receive via email or text message  # noqa: E501

        :param alert_message: The alert_message of this AlertRequest.  # noqa: E501
        :type: str
        """

        self._alert_message = alert_message

    @property
    def alert_repeatable(self):
        """Gets the alert_repeatable of this AlertRequest.  # noqa: E501

        whether alert is repeatable or not, so value can only be 0 or 1, this has to be 1 for MTA alert  # noqa: E501

        :return: The alert_repeatable of this AlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._alert_repeatable

    @alert_repeatable.setter
    def alert_repeatable(self, alert_repeatable):
        """Sets the alert_repeatable of this AlertRequest.

        whether alert is repeatable or not, so value can only be 0 or 1, this has to be 1 for MTA alert  # noqa: E501

        :param alert_repeatable: The alert_repeatable of this AlertRequest.  # noqa: E501
        :type: int
        """

        self._alert_repeatable = alert_repeatable

    @property
    def email(self):
        """Gets the email of this AlertRequest.  # noqa: E501

        email address to receive alert  # noqa: E501

        :return: The email of this AlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AlertRequest.

        email address to receive alert  # noqa: E501

        :param email: The email of this AlertRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def send_message(self):
        """Gets the send_message of this AlertRequest.  # noqa: E501

        whether allowing to send email or not, so value can only be 0 or 1,   # noqa: E501

        :return: The send_message of this AlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._send_message

    @send_message.setter
    def send_message(self, send_message):
        """Sets the send_message of this AlertRequest.

        whether allowing to send email or not, so value can only be 0 or 1,   # noqa: E501

        :param send_message: The send_message of this AlertRequest.  # noqa: E501
        :type: int
        """

        self._send_message = send_message

    @property
    def tif(self):
        """Gets the tif of this AlertRequest.  # noqa: E501

        time in force, can only be GTC or GTD  # noqa: E501

        :return: The tif of this AlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._tif

    @tif.setter
    def tif(self, tif):
        """Sets the tif of this AlertRequest.

        time in force, can only be GTC or GTD  # noqa: E501

        :param tif: The tif of this AlertRequest.  # noqa: E501
        :type: str
        """

        self._tif = tif

    @property
    def expire_time(self):
        """Gets the expire_time of this AlertRequest.  # noqa: E501

        format, YYYYMMDD-HH:mm:ss, please NOTE this will only work when tif is GTD   # noqa: E501

        :return: The expire_time of this AlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this AlertRequest.

        format, YYYYMMDD-HH:mm:ss, please NOTE this will only work when tif is GTD   # noqa: E501

        :param expire_time: The expire_time of this AlertRequest.  # noqa: E501
        :type: str
        """

        self._expire_time = expire_time

    @property
    def outside_rth(self):
        """Gets the outside_rth of this AlertRequest.  # noqa: E501

        value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours.   # noqa: E501

        :return: The outside_rth of this AlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this AlertRequest.

        value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours.   # noqa: E501

        :param outside_rth: The outside_rth of this AlertRequest.  # noqa: E501
        :type: int
        """

        self._outside_rth = outside_rth

    @property
    def i_tws_orders_only(self):
        """Gets the i_tws_orders_only of this AlertRequest.  # noqa: E501

        value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile   # noqa: E501

        :return: The i_tws_orders_only of this AlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._i_tws_orders_only

    @i_tws_orders_only.setter
    def i_tws_orders_only(self, i_tws_orders_only):
        """Sets the i_tws_orders_only of this AlertRequest.

        value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile   # noqa: E501

        :param i_tws_orders_only: The i_tws_orders_only of this AlertRequest.  # noqa: E501
        :type: int
        """

        self._i_tws_orders_only = i_tws_orders_only

    @property
    def show_popup(self):
        """Gets the show_popup of this AlertRequest.  # noqa: E501

        value can only be 0 or 1, set to 1 to allow to show alert in pop-ups  # noqa: E501

        :return: The show_popup of this AlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._show_popup

    @show_popup.setter
    def show_popup(self, show_popup):
        """Sets the show_popup of this AlertRequest.

        value can only be 0 or 1, set to 1 to allow to show alert in pop-ups  # noqa: E501

        :param show_popup: The show_popup of this AlertRequest.  # noqa: E501
        :type: int
        """

        self._show_popup = show_popup

    @property
    def tool_id(self):
        """Gets the tool_id of this AlertRequest.  # noqa: E501

        for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert   # noqa: E501

        :return: The tool_id of this AlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._tool_id

    @tool_id.setter
    def tool_id(self, tool_id):
        """Sets the tool_id of this AlertRequest.

        for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert   # noqa: E501

        :param tool_id: The tool_id of this AlertRequest.  # noqa: E501
        :type: int
        """

        self._tool_id = tool_id

    @property
    def play_audio(self):
        """Gets the play_audio of this AlertRequest.  # noqa: E501

        audio message to play when alert is triggered  # noqa: E501

        :return: The play_audio of this AlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._play_audio

    @play_audio.setter
    def play_audio(self, play_audio):
        """Sets the play_audio of this AlertRequest.

        audio message to play when alert is triggered  # noqa: E501

        :param play_audio: The play_audio of this AlertRequest.  # noqa: E501
        :type: str
        """

        self._play_audio = play_audio

    @property
    def conditions(self):
        """Gets the conditions of this AlertRequest.  # noqa: E501


        :return: The conditions of this AlertRequest.  # noqa: E501
        :rtype: list[AlertrequestConditions]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AlertRequest.


        :param conditions: The conditions of this AlertRequest.  # noqa: E501
        :type: list[AlertrequestConditions]
        """

        self._conditions = conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
