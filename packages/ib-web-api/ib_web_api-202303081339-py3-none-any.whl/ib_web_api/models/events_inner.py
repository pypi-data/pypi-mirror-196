# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index_date_type': 'str',
        'event_type': 'str',
        'data': 'object',
        'conids': 'list[str]',
        'index_date': 'str',
        'source': 'str',
        'event_key': 'str',
        'tooltips': 'object',
        'status': 'str'
    }

    attribute_map = {
        'index_date_type': 'index_date_type',
        'event_type': 'event_type',
        'data': 'data',
        'conids': 'conids',
        'index_date': 'index_date',
        'source': 'source',
        'event_key': 'event_key',
        'tooltips': 'tooltips',
        'status': 'status'
    }

    def __init__(self, index_date_type=None, event_type=None, data=None, conids=None, index_date=None, source=None, event_key=None, tooltips=None, status=None):  # noqa: E501
        """EventsInner - a model defined in Swagger"""  # noqa: E501
        self._index_date_type = None
        self._event_type = None
        self._data = None
        self._conids = None
        self._index_date = None
        self._source = None
        self._event_key = None
        self._tooltips = None
        self._status = None
        self.discriminator = None
        if index_date_type is not None:
            self.index_date_type = index_date_type
        if event_type is not None:
            self.event_type = event_type
        if data is not None:
            self.data = data
        if conids is not None:
            self.conids = conids
        if index_date is not None:
            self.index_date = index_date
        if source is not None:
            self.source = source
        if event_key is not None:
            self.event_key = event_key
        if tooltips is not None:
            self.tooltips = tooltips
        if status is not None:
            self.status = status

    @property
    def index_date_type(self):
        """Gets the index_date_type of this EventsInner.  # noqa: E501


        :return: The index_date_type of this EventsInner.  # noqa: E501
        :rtype: str
        """
        return self._index_date_type

    @index_date_type.setter
    def index_date_type(self, index_date_type):
        """Sets the index_date_type of this EventsInner.


        :param index_date_type: The index_date_type of this EventsInner.  # noqa: E501
        :type: str
        """

        self._index_date_type = index_date_type

    @property
    def event_type(self):
        """Gets the event_type of this EventsInner.  # noqa: E501


        :return: The event_type of this EventsInner.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventsInner.


        :param event_type: The event_type of this EventsInner.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def data(self):
        """Gets the data of this EventsInner.  # noqa: E501

        will be different for different event types  # noqa: E501

        :return: The data of this EventsInner.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EventsInner.

        will be different for different event types  # noqa: E501

        :param data: The data of this EventsInner.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def conids(self):
        """Gets the conids of this EventsInner.  # noqa: E501


        :return: The conids of this EventsInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._conids

    @conids.setter
    def conids(self, conids):
        """Sets the conids of this EventsInner.


        :param conids: The conids of this EventsInner.  # noqa: E501
        :type: list[str]
        """

        self._conids = conids

    @property
    def index_date(self):
        """Gets the index_date of this EventsInner.  # noqa: E501

        for exmple 20180817T040000+0000  # noqa: E501

        :return: The index_date of this EventsInner.  # noqa: E501
        :rtype: str
        """
        return self._index_date

    @index_date.setter
    def index_date(self, index_date):
        """Sets the index_date of this EventsInner.

        for exmple 20180817T040000+0000  # noqa: E501

        :param index_date: The index_date of this EventsInner.  # noqa: E501
        :type: str
        """

        self._index_date = index_date

    @property
    def source(self):
        """Gets the source of this EventsInner.  # noqa: E501

        for example RSE  # noqa: E501

        :return: The source of this EventsInner.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EventsInner.

        for example RSE  # noqa: E501

        :param source: The source of this EventsInner.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def event_key(self):
        """Gets the event_key of this EventsInner.  # noqa: E501

        for example 11662135  # noqa: E501

        :return: The event_key of this EventsInner.  # noqa: E501
        :rtype: str
        """
        return self._event_key

    @event_key.setter
    def event_key(self, event_key):
        """Sets the event_key of this EventsInner.

        for example 11662135  # noqa: E501

        :param event_key: The event_key of this EventsInner.  # noqa: E501
        :type: str
        """

        self._event_key = event_key

    @property
    def tooltips(self):
        """Gets the tooltips of this EventsInner.  # noqa: E501


        :return: The tooltips of this EventsInner.  # noqa: E501
        :rtype: object
        """
        return self._tooltips

    @tooltips.setter
    def tooltips(self, tooltips):
        """Sets the tooltips of this EventsInner.


        :param tooltips: The tooltips of this EventsInner.  # noqa: E501
        :type: object
        """

        self._tooltips = tooltips

    @property
    def status(self):
        """Gets the status of this EventsInner.  # noqa: E501


        :return: The status of this EventsInner.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventsInner.


        :param status: The status of this EventsInner.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
