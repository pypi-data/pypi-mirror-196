# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20028String(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'orth': 'bool',
        'sp': 'str',
        'lp': 'str',
        'pc': 'str',
        'ta': 'str',
        'tu': 'str',
        'roa': 'str',
        'rop': 'str',
        'tt': 'str',
        'unp': 'bool'
    }

    attribute_map = {
        'orth': 'ORTH',
        'sp': 'SP',
        'lp': 'LP',
        'pc': 'PC',
        'ta': 'TA',
        'tu': 'TU',
        'roa': 'ROA',
        'rop': 'ROP',
        'tt': 'TT',
        'unp': 'UNP'
    }

    def __init__(self, orth=None, sp=None, lp=None, pc=None, ta=None, tu=None, roa=None, rop=None, tt=None, unp=None):  # noqa: E501
        """InlineResponse20028String - a model defined in Swagger"""  # noqa: E501
        self._orth = None
        self._sp = None
        self._lp = None
        self._pc = None
        self._ta = None
        self._tu = None
        self._roa = None
        self._rop = None
        self._tt = None
        self._unp = None
        self.discriminator = None
        if orth is not None:
            self.orth = orth
        if sp is not None:
            self.sp = sp
        if lp is not None:
            self.lp = lp
        if pc is not None:
            self.pc = pc
        if ta is not None:
            self.ta = ta
        if tu is not None:
            self.tu = tu
        if roa is not None:
            self.roa = roa
        if rop is not None:
            self.rop = rop
        if tt is not None:
            self.tt = tt
        if unp is not None:
            self.unp = unp

    @property
    def orth(self):
        """Gets the orth of this InlineResponse20028String.  # noqa: E501

        Outside of Regular Trading Hours  # noqa: E501

        :return: The orth of this InlineResponse20028String.  # noqa: E501
        :rtype: bool
        """
        return self._orth

    @orth.setter
    def orth(self, orth):
        """Sets the orth of this InlineResponse20028String.

        Outside of Regular Trading Hours  # noqa: E501

        :param orth: The orth of this InlineResponse20028String.  # noqa: E501
        :type: bool
        """

        self._orth = orth

    @property
    def sp(self):
        """Gets the sp of this InlineResponse20028String.  # noqa: E501

        Stop Price value  # noqa: E501

        :return: The sp of this InlineResponse20028String.  # noqa: E501
        :rtype: str
        """
        return self._sp

    @sp.setter
    def sp(self, sp):
        """Sets the sp of this InlineResponse20028String.

        Stop Price value  # noqa: E501

        :param sp: The sp of this InlineResponse20028String.  # noqa: E501
        :type: str
        """

        self._sp = sp

    @property
    def lp(self):
        """Gets the lp of this InlineResponse20028String.  # noqa: E501

        Limit Price value  # noqa: E501

        :return: The lp of this InlineResponse20028String.  # noqa: E501
        :rtype: str
        """
        return self._lp

    @lp.setter
    def lp(self, lp):
        """Sets the lp of this InlineResponse20028String.

        Limit Price value  # noqa: E501

        :param lp: The lp of this InlineResponse20028String.  # noqa: E501
        :type: str
        """

        self._lp = lp

    @property
    def pc(self):
        """Gets the pc of this InlineResponse20028String.  # noqa: E501

        Price Cap value  # noqa: E501

        :return: The pc of this InlineResponse20028String.  # noqa: E501
        :rtype: str
        """
        return self._pc

    @pc.setter
    def pc(self, pc):
        """Sets the pc of this InlineResponse20028String.

        Price Cap value  # noqa: E501

        :param pc: The pc of this InlineResponse20028String.  # noqa: E501
        :type: str
        """

        self._pc = pc

    @property
    def ta(self):
        """Gets the ta of this InlineResponse20028String.  # noqa: E501

        Trailing amount value  # noqa: E501

        :return: The ta of this InlineResponse20028String.  # noqa: E501
        :rtype: str
        """
        return self._ta

    @ta.setter
    def ta(self, ta):
        """Sets the ta of this InlineResponse20028String.

        Trailing amount value  # noqa: E501

        :param ta: The ta of this InlineResponse20028String.  # noqa: E501
        :type: str
        """

        self._ta = ta

    @property
    def tu(self):
        """Gets the tu of this InlineResponse20028String.  # noqa: E501

        Trailing unit  # noqa: E501

        :return: The tu of this InlineResponse20028String.  # noqa: E501
        :rtype: str
        """
        return self._tu

    @tu.setter
    def tu(self, tu):
        """Sets the tu of this InlineResponse20028String.

        Trailing unit  # noqa: E501

        :param tu: The tu of this InlineResponse20028String.  # noqa: E501
        :type: str
        """

        self._tu = tu

    @property
    def roa(self):
        """Gets the roa of this InlineResponse20028String.  # noqa: E501

        Releative offset amount  # noqa: E501

        :return: The roa of this InlineResponse20028String.  # noqa: E501
        :rtype: str
        """
        return self._roa

    @roa.setter
    def roa(self, roa):
        """Sets the roa of this InlineResponse20028String.

        Releative offset amount  # noqa: E501

        :param roa: The roa of this InlineResponse20028String.  # noqa: E501
        :type: str
        """

        self._roa = roa

    @property
    def rop(self):
        """Gets the rop of this InlineResponse20028String.  # noqa: E501

        Relative offset percent  # noqa: E501

        :return: The rop of this InlineResponse20028String.  # noqa: E501
        :rtype: str
        """
        return self._rop

    @rop.setter
    def rop(self, rop):
        """Sets the rop of this InlineResponse20028String.

        Relative offset percent  # noqa: E501

        :param rop: The rop of this InlineResponse20028String.  # noqa: E501
        :type: str
        """

        self._rop = rop

    @property
    def tt(self):
        """Gets the tt of this InlineResponse20028String.  # noqa: E501

        Touch trigger price  # noqa: E501

        :return: The tt of this InlineResponse20028String.  # noqa: E501
        :rtype: str
        """
        return self._tt

    @tt.setter
    def tt(self, tt):
        """Sets the tt of this InlineResponse20028String.

        Touch trigger price  # noqa: E501

        :param tt: The tt of this InlineResponse20028String.  # noqa: E501
        :type: str
        """

        self._tt = tt

    @property
    def unp(self):
        """Gets the unp of this InlineResponse20028String.  # noqa: E501

        Use Net Price for Bonds  # noqa: E501

        :return: The unp of this InlineResponse20028String.  # noqa: E501
        :rtype: bool
        """
        return self._unp

    @unp.setter
    def unp(self, unp):
        """Sets the unp of this InlineResponse20028String.

        Use Net Price for Bonds  # noqa: E501

        :param unp: The unp of this InlineResponse20028String.  # noqa: E501
        :type: bool
        """

        self._unp = unp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20028String, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20028String):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
