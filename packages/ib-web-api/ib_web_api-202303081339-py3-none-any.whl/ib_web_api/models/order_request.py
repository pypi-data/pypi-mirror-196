# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acct_id': 'str',
        'conid': 'int',
        'sec_type': 'str',
        'c_oid': 'str',
        'parent_id': 'str',
        'order_type': 'str',
        'listing_exchange': 'str',
        'is_single_group': 'bool',
        'outside_rth': 'bool',
        'price': 'float',
        'aux_price': 'object',
        'side': 'str',
        'ticker': 'str',
        'tif': 'str',
        'referrer': 'str',
        'quantity': 'float',
        'fx_qty': 'float',
        'use_adaptive': 'bool',
        'is_ccy_conv': 'bool',
        'allocation_method': 'str',
        'strategy': 'str',
        'strategy_parameters': 'object'
    }

    attribute_map = {
        'acct_id': 'acctId',
        'conid': 'conid',
        'sec_type': 'secType',
        'c_oid': 'cOID',
        'parent_id': 'parentId',
        'order_type': 'orderType',
        'listing_exchange': 'listingExchange',
        'is_single_group': 'isSingleGroup',
        'outside_rth': 'outsideRTH',
        'price': 'price',
        'aux_price': 'auxPrice',
        'side': 'side',
        'ticker': 'ticker',
        'tif': 'tif',
        'referrer': 'referrer',
        'quantity': 'quantity',
        'fx_qty': 'fxQty',
        'use_adaptive': 'useAdaptive',
        'is_ccy_conv': 'isCcyConv',
        'allocation_method': 'allocationMethod',
        'strategy': 'strategy',
        'strategy_parameters': 'strategyParameters'
    }

    def __init__(self, acct_id=None, conid=None, sec_type=None, c_oid=None, parent_id=None, order_type=None, listing_exchange=None, is_single_group=None, outside_rth=None, price=None, aux_price=None, side=None, ticker=None, tif=None, referrer=None, quantity=None, fx_qty=None, use_adaptive=None, is_ccy_conv=None, allocation_method=None, strategy=None, strategy_parameters=None):  # noqa: E501
        """OrderRequest - a model defined in Swagger"""  # noqa: E501
        self._acct_id = None
        self._conid = None
        self._sec_type = None
        self._c_oid = None
        self._parent_id = None
        self._order_type = None
        self._listing_exchange = None
        self._is_single_group = None
        self._outside_rth = None
        self._price = None
        self._aux_price = None
        self._side = None
        self._ticker = None
        self._tif = None
        self._referrer = None
        self._quantity = None
        self._fx_qty = None
        self._use_adaptive = None
        self._is_ccy_conv = None
        self._allocation_method = None
        self._strategy = None
        self._strategy_parameters = None
        self.discriminator = None
        if acct_id is not None:
            self.acct_id = acct_id
        if conid is not None:
            self.conid = conid
        if sec_type is not None:
            self.sec_type = sec_type
        if c_oid is not None:
            self.c_oid = c_oid
        if parent_id is not None:
            self.parent_id = parent_id
        if order_type is not None:
            self.order_type = order_type
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if is_single_group is not None:
            self.is_single_group = is_single_group
        if outside_rth is not None:
            self.outside_rth = outside_rth
        if price is not None:
            self.price = price
        if aux_price is not None:
            self.aux_price = aux_price
        if side is not None:
            self.side = side
        if ticker is not None:
            self.ticker = ticker
        if tif is not None:
            self.tif = tif
        if referrer is not None:
            self.referrer = referrer
        if quantity is not None:
            self.quantity = quantity
        if fx_qty is not None:
            self.fx_qty = fx_qty
        if use_adaptive is not None:
            self.use_adaptive = use_adaptive
        if is_ccy_conv is not None:
            self.is_ccy_conv = is_ccy_conv
        if allocation_method is not None:
            self.allocation_method = allocation_method
        if strategy is not None:
            self.strategy = strategy
        if strategy_parameters is not None:
            self.strategy_parameters = strategy_parameters

    @property
    def acct_id(self):
        """Gets the acct_id of this OrderRequest.  # noqa: E501

        acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected.   # noqa: E501

        :return: The acct_id of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._acct_id

    @acct_id.setter
    def acct_id(self, acct_id):
        """Sets the acct_id of this OrderRequest.

        acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected.   # noqa: E501

        :param acct_id: The acct_id of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._acct_id = acct_id

    @property
    def conid(self):
        """Gets the conid of this OrderRequest.  # noqa: E501

        conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search.   # noqa: E501

        :return: The conid of this OrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this OrderRequest.

        conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search.   # noqa: E501

        :param conid: The conid of this OrderRequest.  # noqa: E501
        :type: int
        """

        self._conid = conid

    @property
    def sec_type(self):
        """Gets the sec_type of this OrderRequest.  # noqa: E501

        The contract-identifier (conid) and security type (type) specified as a concatenated value, conid:type  # noqa: E501

        :return: The sec_type of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this OrderRequest.

        The contract-identifier (conid) and security type (type) specified as a concatenated value, conid:type  # noqa: E501

        :param sec_type: The sec_type of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._sec_type = sec_type

    @property
    def c_oid(self):
        """Gets the c_oid of this OrderRequest.  # noqa: E501

        Customer Order ID. An arbitrary string that can be used to identify the order, e.g \"my-fb-order\". The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order.   # noqa: E501

        :return: The c_oid of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._c_oid

    @c_oid.setter
    def c_oid(self, c_oid):
        """Sets the c_oid of this OrderRequest.

        Customer Order ID. An arbitrary string that can be used to identify the order, e.g \"my-fb-order\". The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order.   # noqa: E501

        :param c_oid: The c_oid of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._c_oid = c_oid

    @property
    def parent_id(self):
        """Gets the parent_id of this OrderRequest.  # noqa: E501

        Only specify for child orders when placing bracket orders. The parentId for the child order(s) must be equal to the cOId (customer order id) of the parent.   # noqa: E501

        :return: The parent_id of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this OrderRequest.

        Only specify for child orders when placing bracket orders. The parentId for the child order(s) must be equal to the cOId (customer order id) of the parent.   # noqa: E501

        :param parent_id: The parent_id of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def order_type(self):
        """Gets the order_type of this OrderRequest.  # noqa: E501

        The order-type determines what type of order you want to send. LMT - A limit order is an order to buy or sell at the specified price or better. MKT - A market order is an order to buy or sell at the markets current NBBO. STP - A stop order becomes a market order once the specified stop price is attained or penetrated. STOP_LIMIT - A stop limit order becomes a limit order once the specified stop price is attained or penetrated. MIDPRICE - A MidPrice order attempts to fill at the current midpoint of the NBBO or better.   # noqa: E501

        :return: The order_type of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this OrderRequest.

        The order-type determines what type of order you want to send. LMT - A limit order is an order to buy or sell at the specified price or better. MKT - A market order is an order to buy or sell at the markets current NBBO. STP - A stop order becomes a market order once the specified stop price is attained or penetrated. STOP_LIMIT - A stop limit order becomes a limit order once the specified stop price is attained or penetrated. MIDPRICE - A MidPrice order attempts to fill at the current midpoint of the NBBO or better.   # noqa: E501

        :param order_type: The order_type of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this OrderRequest.  # noqa: E501

        listingExchange is optional. By default we use \"SMART\" routing. Possible values are available via this end point: /v1/portal/iserver/contract/{conid}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX   # noqa: E501

        :return: The listing_exchange of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this OrderRequest.

        listingExchange is optional. By default we use \"SMART\" routing. Possible values are available via this end point: /v1/portal/iserver/contract/{conid}/info, see valid_exchange: e.g: SMART,AMEX,NYSE, CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX   # noqa: E501

        :param listing_exchange: The listing_exchange of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def is_single_group(self):
        """Gets the is_single_group of this OrderRequest.  # noqa: E501

        set to true if you want to place a single group orders(OCA)   # noqa: E501

        :return: The is_single_group of this OrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_single_group

    @is_single_group.setter
    def is_single_group(self, is_single_group):
        """Sets the is_single_group of this OrderRequest.

        set to true if you want to place a single group orders(OCA)   # noqa: E501

        :param is_single_group: The is_single_group of this OrderRequest.  # noqa: E501
        :type: bool
        """

        self._is_single_group = is_single_group

    @property
    def outside_rth(self):
        """Gets the outside_rth of this OrderRequest.  # noqa: E501

        set to true if the order can be executed outside regular trading hours.   # noqa: E501

        :return: The outside_rth of this OrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this OrderRequest.

        set to true if the order can be executed outside regular trading hours.   # noqa: E501

        :param outside_rth: The outside_rth of this OrderRequest.  # noqa: E501
        :type: bool
        """

        self._outside_rth = outside_rth

    @property
    def price(self):
        """Gets the price of this OrderRequest.  # noqa: E501

        optional if order is LMT, or STOP_LIMIT, this is the limit price. For STP this is the stop price. For MIDPRICE this is the option price cap.   # noqa: E501

        :return: The price of this OrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderRequest.

        optional if order is LMT, or STOP_LIMIT, this is the limit price. For STP this is the stop price. For MIDPRICE this is the option price cap.   # noqa: E501

        :param price: The price of this OrderRequest.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def aux_price(self):
        """Gets the aux_price of this OrderRequest.  # noqa: E501

        optional if order is STOP_LIMIT, this is the stop price. You must specify both price and auxPrice for STOP_LIMIT orders.   # noqa: E501

        :return: The aux_price of this OrderRequest.  # noqa: E501
        :rtype: object
        """
        return self._aux_price

    @aux_price.setter
    def aux_price(self, aux_price):
        """Sets the aux_price of this OrderRequest.

        optional if order is STOP_LIMIT, this is the stop price. You must specify both price and auxPrice for STOP_LIMIT orders.   # noqa: E501

        :param aux_price: The aux_price of this OrderRequest.  # noqa: E501
        :type: object
        """

        self._aux_price = aux_price

    @property
    def side(self):
        """Gets the side of this OrderRequest.  # noqa: E501

        SELL or BUY  # noqa: E501

        :return: The side of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderRequest.

        SELL or BUY  # noqa: E501

        :param side: The side of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def ticker(self):
        """Gets the ticker of this OrderRequest.  # noqa: E501

        This is the  underlying symbol for the contract.   # noqa: E501

        :return: The ticker of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this OrderRequest.

        This is the  underlying symbol for the contract.   # noqa: E501

        :param ticker: The ticker of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def tif(self):
        """Gets the tif of this OrderRequest.  # noqa: E501

        The Time-In-Force determines how long the order remains active on the market.   * GTC - use Good-Till-Cancel for orders to remain active until it executes or cancelled.   * OPG - use Open-Price-Guarantee for Limit-On-Open (LOO) or Market-On-Open (MOO) orders.   * DAY - if not executed a Day order will automatically cancel at the end of the markets regular trading hours.   * IOC - any portion of an Immediate-or-Cancel order that is not filled as soon as it becomes available in the market is cancelled.   # noqa: E501

        :return: The tif of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._tif

    @tif.setter
    def tif(self, tif):
        """Sets the tif of this OrderRequest.

        The Time-In-Force determines how long the order remains active on the market.   * GTC - use Good-Till-Cancel for orders to remain active until it executes or cancelled.   * OPG - use Open-Price-Guarantee for Limit-On-Open (LOO) or Market-On-Open (MOO) orders.   * DAY - if not executed a Day order will automatically cancel at the end of the markets regular trading hours.   * IOC - any portion of an Immediate-or-Cancel order that is not filled as soon as it becomes available in the market is cancelled.   # noqa: E501

        :param tif: The tif of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._tif = tif

    @property
    def referrer(self):
        """Gets the referrer of this OrderRequest.  # noqa: E501

        Custom order reference   # noqa: E501

        :return: The referrer of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this OrderRequest.

        Custom order reference   # noqa: E501

        :param referrer: The referrer of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def quantity(self):
        """Gets the quantity of this OrderRequest.  # noqa: E501

        usually integer, for some special cases can be float numbers  # noqa: E501

        :return: The quantity of this OrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderRequest.

        usually integer, for some special cases can be float numbers  # noqa: E501

        :param quantity: The quantity of this OrderRequest.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def fx_qty(self):
        """Gets the fx_qty of this OrderRequest.  # noqa: E501

        double number, this is the cash quantity field which can only be used for FX conversion order. When using 'fxQty' you don't need to specify 'quantity'.   # noqa: E501

        :return: The fx_qty of this OrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._fx_qty

    @fx_qty.setter
    def fx_qty(self, fx_qty):
        """Sets the fx_qty of this OrderRequest.

        double number, this is the cash quantity field which can only be used for FX conversion order. When using 'fxQty' you don't need to specify 'quantity'.   # noqa: E501

        :param fx_qty: The fx_qty of this OrderRequest.  # noqa: E501
        :type: float
        """

        self._fx_qty = fx_qty

    @property
    def use_adaptive(self):
        """Gets the use_adaptive of this OrderRequest.  # noqa: E501

        If true, the system will use the Price Management Algo to submit the order. https://www.interactivebrokers.com/en/index.php?f=43423   # noqa: E501

        :return: The use_adaptive of this OrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_adaptive

    @use_adaptive.setter
    def use_adaptive(self, use_adaptive):
        """Sets the use_adaptive of this OrderRequest.

        If true, the system will use the Price Management Algo to submit the order. https://www.interactivebrokers.com/en/index.php?f=43423   # noqa: E501

        :param use_adaptive: The use_adaptive of this OrderRequest.  # noqa: E501
        :type: bool
        """

        self._use_adaptive = use_adaptive

    @property
    def is_ccy_conv(self):
        """Gets the is_ccy_conv of this OrderRequest.  # noqa: E501

        set to true if the order is a FX conversion order   # noqa: E501

        :return: The is_ccy_conv of this OrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_ccy_conv

    @is_ccy_conv.setter
    def is_ccy_conv(self, is_ccy_conv):
        """Sets the is_ccy_conv of this OrderRequest.

        set to true if the order is a FX conversion order   # noqa: E501

        :param is_ccy_conv: The is_ccy_conv of this OrderRequest.  # noqa: E501
        :type: bool
        """

        self._is_ccy_conv = is_ccy_conv

    @property
    def allocation_method(self):
        """Gets the allocation_method of this OrderRequest.  # noqa: E501

        Set the allocation method when placing an order using an FA account for a group Possible allocation methods are \"NetLiquidity\", \"AvailableEquity\", \"EqualQuantity\" and \"PctChange\".   # noqa: E501

        :return: The allocation_method of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._allocation_method

    @allocation_method.setter
    def allocation_method(self, allocation_method):
        """Sets the allocation_method of this OrderRequest.

        Set the allocation method when placing an order using an FA account for a group Possible allocation methods are \"NetLiquidity\", \"AvailableEquity\", \"EqualQuantity\" and \"PctChange\".   # noqa: E501

        :param allocation_method: The allocation_method of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._allocation_method = allocation_method

    @property
    def strategy(self):
        """Gets the strategy of this OrderRequest.  # noqa: E501

        Specify which IB Algo algorithm to use for this order.   # noqa: E501

        :return: The strategy of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this OrderRequest.

        Specify which IB Algo algorithm to use for this order.   # noqa: E501

        :param strategy: The strategy of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    @property
    def strategy_parameters(self):
        """Gets the strategy_parameters of this OrderRequest.  # noqa: E501

        The IB Algo parameters for the specified algorithm.   # noqa: E501

        :return: The strategy_parameters of this OrderRequest.  # noqa: E501
        :rtype: object
        """
        return self._strategy_parameters

    @strategy_parameters.setter
    def strategy_parameters(self, strategy_parameters):
        """Sets the strategy_parameters of this OrderRequest.

        The IB Algo parameters for the specified algorithm.   # noqa: E501

        :param strategy_parameters: The strategy_parameters of this OrderRequest.  # noqa: E501
        :type: object
        """

        self._strategy_parameters = strategy_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
