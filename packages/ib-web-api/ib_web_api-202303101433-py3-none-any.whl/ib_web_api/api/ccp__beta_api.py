# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ib_web_api.api_client import ApiClient


class CCPBetaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ccp_account_get(self, **kwargs):  # noqa: E501
        """Brokerage Accounts  # noqa: E501

        Provides the list of tradeable accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_account_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_account_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ccp_account_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ccp_account_get_with_http_info(self, **kwargs):  # noqa: E501
        """Brokerage Accounts  # noqa: E501

        Provides the list of tradeable accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_account_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_account_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ccp_auth_init_post(self, **kwargs):  # noqa: E501
        """Start CCP Session  # noqa: E501

        Initiate a brokerage session to CCP. Only one brokerage session type can run at a time. If an existing brokerage session to iServer is running then call the endpoint /logout first. Note at this time only order management is possible from CCP session, market data and scanner endpoints can't be used since they are only available from iServer session. Work is in progress to provide new CCP endpoints for market data and scanners.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_auth_init_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool compete:
        :param str locale:
        :param str mac:
        :param str machine_id:
        :param str username:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_auth_init_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ccp_auth_init_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def ccp_auth_init_post_with_http_info(self, **kwargs):  # noqa: E501
        """Start CCP Session  # noqa: E501

        Initiate a brokerage session to CCP. Only one brokerage session type can run at a time. If an existing brokerage session to iServer is running then call the endpoint /logout first. Note at this time only order management is possible from CCP session, market data and scanner endpoints can't be used since they are only available from iServer session. Work is in progress to provide new CCP endpoints for market data and scanners.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_auth_init_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool compete:
        :param str locale:
        :param str mac:
        :param str machine_id:
        :param str username:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compete', 'locale', 'mac', 'machine_id', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_auth_init_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'compete' in params:
            form_params.append(('compete', params['compete']))  # noqa: E501
        if 'locale' in params:
            form_params.append(('locale', params['locale']))  # noqa: E501
        if 'mac' in params:
            form_params.append(('mac', params['mac']))  # noqa: E501
        if 'machine_id' in params:
            form_params.append(('machineId', params['machine_id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/auth/init', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ccp_auth_response_post(self, **kwargs):  # noqa: E501
        """Complete CCP Session  # noqa: E501

        Session Token Authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_auth_response_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthResponseBody body:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_auth_response_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ccp_auth_response_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def ccp_auth_response_post_with_http_info(self, **kwargs):  # noqa: E501
        """Complete CCP Session  # noqa: E501

        Session Token Authentication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_auth_response_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthResponseBody body:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_auth_response_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/auth/response', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ccp_order_delete(self, acct, id, **kwargs):  # noqa: E501
        """Delete Order  # noqa: E501

        Sends an Order cancellation request. The status of the order can be queried through /ccp/order. Passing arguments as GET is also supported (requires passing action=delete) (GET is meant for development only)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_order_delete(acct, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acct: Account Number (required)
        :param float id: Order Identifier of original submit order (required)
        :return: OrderData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_order_delete_with_http_info(acct, id, **kwargs)  # noqa: E501
        else:
            (data) = self.ccp_order_delete_with_http_info(acct, id, **kwargs)  # noqa: E501
            return data

    def ccp_order_delete_with_http_info(self, acct, id, **kwargs):  # noqa: E501
        """Delete Order  # noqa: E501

        Sends an Order cancellation request. The status of the order can be queried through /ccp/order. Passing arguments as GET is also supported (requires passing action=delete) (GET is meant for development only)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_order_delete_with_http_info(acct, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acct: Account Number (required)
        :param float id: Order Identifier of original submit order (required)
        :return: OrderData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acct', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_order_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acct' is set
        if ('acct' not in params or
                params['acct'] is None):
            raise ValueError("Missing the required parameter `acct` when calling `ccp_order_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ccp_order_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'acct' in params:
            query_params.append(('acct', params['acct']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/order', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ccp_order_post(self, acct, conid, ccy, exchange, qty, **kwargs):  # noqa: E501
        """Submit Order  # noqa: E501

        Submits an Order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_order_post(acct, conid, ccy, exchange, qty, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acct: User Account (required)
        :param float conid: Contract identifier from IBKR's database. (required)
        :param str ccy: Contract Currency (required)
        :param str exchange: Exchange (required)
        :param float qty: Order Quantity (required)
        :param str type: Order Price; required if order type is limit
        :param str side: Side
        :param float price: Order Price; required if order type is limit
        :param str tif: Time in Force
        :return: OrderData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_order_post_with_http_info(acct, conid, ccy, exchange, qty, **kwargs)  # noqa: E501
        else:
            (data) = self.ccp_order_post_with_http_info(acct, conid, ccy, exchange, qty, **kwargs)  # noqa: E501
            return data

    def ccp_order_post_with_http_info(self, acct, conid, ccy, exchange, qty, **kwargs):  # noqa: E501
        """Submit Order  # noqa: E501

        Submits an Order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_order_post_with_http_info(acct, conid, ccy, exchange, qty, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acct: User Account (required)
        :param float conid: Contract identifier from IBKR's database. (required)
        :param str ccy: Contract Currency (required)
        :param str exchange: Exchange (required)
        :param float qty: Order Quantity (required)
        :param str type: Order Price; required if order type is limit
        :param str side: Side
        :param float price: Order Price; required if order type is limit
        :param str tif: Time in Force
        :return: OrderData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acct', 'conid', 'ccy', 'exchange', 'qty', 'type', 'side', 'price', 'tif']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_order_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acct' is set
        if ('acct' not in params or
                params['acct'] is None):
            raise ValueError("Missing the required parameter `acct` when calling `ccp_order_post`")  # noqa: E501
        # verify the required parameter 'conid' is set
        if ('conid' not in params or
                params['conid'] is None):
            raise ValueError("Missing the required parameter `conid` when calling `ccp_order_post`")  # noqa: E501
        # verify the required parameter 'ccy' is set
        if ('ccy' not in params or
                params['ccy'] is None):
            raise ValueError("Missing the required parameter `ccy` when calling `ccp_order_post`")  # noqa: E501
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `ccp_order_post`")  # noqa: E501
        # verify the required parameter 'qty' is set
        if ('qty' not in params or
                params['qty'] is None):
            raise ValueError("Missing the required parameter `qty` when calling `ccp_order_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'acct' in params:
            query_params.append(('acct', params['acct']))  # noqa: E501
        if 'conid' in params:
            query_params.append(('conid', params['conid']))  # noqa: E501
        if 'ccy' in params:
            query_params.append(('ccy', params['ccy']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'qty' in params:
            query_params.append(('qty', params['qty']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'side' in params:
            query_params.append(('side', params['side']))  # noqa: E501
        if 'price' in params:
            query_params.append(('price', params['price']))  # noqa: E501
        if 'tif' in params:
            query_params.append(('tif', params['tif']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/order', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ccp_order_put(self, acct, id, **kwargs):  # noqa: E501
        """Update Order  # noqa: E501

        Updates an Order. Updating an order requires the same arguments as placing an order besides the conid. Note: The status of the order can be queried through GET /ccp/order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_order_put(acct, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acct: User Account (required)
        :param float id: Order ID to be modified (required)
        :return: OrderData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_order_put_with_http_info(acct, id, **kwargs)  # noqa: E501
        else:
            (data) = self.ccp_order_put_with_http_info(acct, id, **kwargs)  # noqa: E501
            return data

    def ccp_order_put_with_http_info(self, acct, id, **kwargs):  # noqa: E501
        """Update Order  # noqa: E501

        Updates an Order. Updating an order requires the same arguments as placing an order besides the conid. Note: The status of the order can be queried through GET /ccp/order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_order_put_with_http_info(acct, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acct: User Account (required)
        :param float id: Order ID to be modified (required)
        :return: OrderData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acct', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_order_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acct' is set
        if ('acct' not in params or
                params['acct'] is None):
            raise ValueError("Missing the required parameter `acct` when calling `ccp_order_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ccp_order_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'acct' in params:
            query_params.append(('acct', params['acct']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/order', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ccp_orders_get(self, acct, **kwargs):  # noqa: E501
        """Order Status  # noqa: E501

        Get status for all orders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_orders_get(acct, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acct: User Account (required)
        :param bool cancelled: Return only Rejected or Cancelled orders since today midnight
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_orders_get_with_http_info(acct, **kwargs)  # noqa: E501
        else:
            (data) = self.ccp_orders_get_with_http_info(acct, **kwargs)  # noqa: E501
            return data

    def ccp_orders_get_with_http_info(self, acct, **kwargs):  # noqa: E501
        """Order Status  # noqa: E501

        Get status for all orders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_orders_get_with_http_info(acct, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acct: User Account (required)
        :param bool cancelled: Return only Rejected or Cancelled orders since today midnight
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acct', 'cancelled']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acct' is set
        if ('acct' not in params or
                params['acct'] is None):
            raise ValueError("Missing the required parameter `acct` when calling `ccp_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'acct' in params:
            query_params.append(('acct', params['acct']))  # noqa: E501
        if 'cancelled' in params:
            query_params.append(('cancelled', params['cancelled']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ccp_positions_get(self, **kwargs):  # noqa: E501
        """Positions  # noqa: E501

        List of positions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_positions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PositionData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_positions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ccp_positions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ccp_positions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Positions  # noqa: E501

        List of positions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_positions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PositionData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_positions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PositionData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ccp_status_get(self, **kwargs):  # noqa: E501
        """CCP Status  # noqa: E501

        Provide the current CCP session status. When using the Gateway this endpoint will also initiate a brokerage session to CCP by sending /auth/init and response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ccp_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ccp_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """CCP Status  # noqa: E501

        Provide the current CCP session status. When using the Gateway this endpoint will also initiate a brokerage session to CCP by sending /auth/init and response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ccp_trades_get(self, **kwargs):  # noqa: E501
        """Trades  # noqa: E501

        Get a list of Trades, by default, the list is from today midnight to Date.now().   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_trades_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _from: From Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..)
        :param str to: To Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..). To value should be bigger than from value. 
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ccp_trades_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ccp_trades_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ccp_trades_get_with_http_info(self, **kwargs):  # noqa: E501
        """Trades  # noqa: E501

        Get a list of Trades, by default, the list is from today midnight to Date.now().   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ccp_trades_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _from: From Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..)
        :param str to: To Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..). To value should be bigger than from value. 
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ccp_trades_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ccp/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
