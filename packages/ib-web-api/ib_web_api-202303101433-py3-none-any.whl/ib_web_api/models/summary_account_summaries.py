# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SummaryAccountSummaries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chg': 'str',
        'has_accounts': 'bool',
        'account_type_name': 'str',
        'rtn': 'str',
        'end_val': 'str',
        'account_type_code': 'str',
        'start_val': 'str'
    }

    attribute_map = {
        'chg': 'chg',
        'has_accounts': 'hasAccounts',
        'account_type_name': 'accountTypeName',
        'rtn': 'rtn',
        'end_val': 'endVal',
        'account_type_code': 'accountTypeCode',
        'start_val': 'startVal'
    }

    def __init__(self, chg=None, has_accounts=None, account_type_name=None, rtn=None, end_val=None, account_type_code=None, start_val=None):  # noqa: E501
        """SummaryAccountSummaries - a model defined in Swagger"""  # noqa: E501
        self._chg = None
        self._has_accounts = None
        self._account_type_name = None
        self._rtn = None
        self._end_val = None
        self._account_type_code = None
        self._start_val = None
        self.discriminator = None
        if chg is not None:
            self.chg = chg
        if has_accounts is not None:
            self.has_accounts = has_accounts
        if account_type_name is not None:
            self.account_type_name = account_type_name
        if rtn is not None:
            self.rtn = rtn
        if end_val is not None:
            self.end_val = end_val
        if account_type_code is not None:
            self.account_type_code = account_type_code
        if start_val is not None:
            self.start_val = start_val

    @property
    def chg(self):
        """Gets the chg of this SummaryAccountSummaries.  # noqa: E501


        :return: The chg of this SummaryAccountSummaries.  # noqa: E501
        :rtype: str
        """
        return self._chg

    @chg.setter
    def chg(self, chg):
        """Sets the chg of this SummaryAccountSummaries.


        :param chg: The chg of this SummaryAccountSummaries.  # noqa: E501
        :type: str
        """

        self._chg = chg

    @property
    def has_accounts(self):
        """Gets the has_accounts of this SummaryAccountSummaries.  # noqa: E501


        :return: The has_accounts of this SummaryAccountSummaries.  # noqa: E501
        :rtype: bool
        """
        return self._has_accounts

    @has_accounts.setter
    def has_accounts(self, has_accounts):
        """Sets the has_accounts of this SummaryAccountSummaries.


        :param has_accounts: The has_accounts of this SummaryAccountSummaries.  # noqa: E501
        :type: bool
        """

        self._has_accounts = has_accounts

    @property
    def account_type_name(self):
        """Gets the account_type_name of this SummaryAccountSummaries.  # noqa: E501


        :return: The account_type_name of this SummaryAccountSummaries.  # noqa: E501
        :rtype: str
        """
        return self._account_type_name

    @account_type_name.setter
    def account_type_name(self, account_type_name):
        """Sets the account_type_name of this SummaryAccountSummaries.


        :param account_type_name: The account_type_name of this SummaryAccountSummaries.  # noqa: E501
        :type: str
        """

        self._account_type_name = account_type_name

    @property
    def rtn(self):
        """Gets the rtn of this SummaryAccountSummaries.  # noqa: E501


        :return: The rtn of this SummaryAccountSummaries.  # noqa: E501
        :rtype: str
        """
        return self._rtn

    @rtn.setter
    def rtn(self, rtn):
        """Sets the rtn of this SummaryAccountSummaries.


        :param rtn: The rtn of this SummaryAccountSummaries.  # noqa: E501
        :type: str
        """

        self._rtn = rtn

    @property
    def end_val(self):
        """Gets the end_val of this SummaryAccountSummaries.  # noqa: E501


        :return: The end_val of this SummaryAccountSummaries.  # noqa: E501
        :rtype: str
        """
        return self._end_val

    @end_val.setter
    def end_val(self, end_val):
        """Sets the end_val of this SummaryAccountSummaries.


        :param end_val: The end_val of this SummaryAccountSummaries.  # noqa: E501
        :type: str
        """

        self._end_val = end_val

    @property
    def account_type_code(self):
        """Gets the account_type_code of this SummaryAccountSummaries.  # noqa: E501


        :return: The account_type_code of this SummaryAccountSummaries.  # noqa: E501
        :rtype: str
        """
        return self._account_type_code

    @account_type_code.setter
    def account_type_code(self, account_type_code):
        """Sets the account_type_code of this SummaryAccountSummaries.


        :param account_type_code: The account_type_code of this SummaryAccountSummaries.  # noqa: E501
        :type: str
        """

        self._account_type_code = account_type_code

    @property
    def start_val(self):
        """Gets the start_val of this SummaryAccountSummaries.  # noqa: E501


        :return: The start_val of this SummaryAccountSummaries.  # noqa: E501
        :rtype: str
        """
        return self._start_val

    @start_val.setter
    def start_val(self, start_val):
        """Sets the start_val of this SummaryAccountSummaries.


        :param start_val: The start_val of this SummaryAccountSummaries.  # noqa: E501
        :type: str
        """

        self._start_val = start_val

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SummaryAccountSummaries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryAccountSummaries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
