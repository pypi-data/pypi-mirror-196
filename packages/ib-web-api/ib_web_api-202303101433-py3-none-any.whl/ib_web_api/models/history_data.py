# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistoryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'text': 'str',
        'price_factor': 'int',
        'start_time': 'str',
        'high': 'str',
        'low': 'str',
        'time_period': 'str',
        'bar_length': 'int',
        'md_availability': 'str',
        'mkt_data_delay': 'int',
        'outside_rth': 'bool',
        'trading_day_duration': 'int',
        'volume_factor': 'int',
        'price_display_rule': 'int',
        'price_display_value': 'str',
        'negative_capable': 'bool',
        'message_version': 'int',
        'data': 'list[HistorydataData]',
        'points': 'int',
        'travel_time': 'int'
    }

    attribute_map = {
        'symbol': 'symbol',
        'text': 'text',
        'price_factor': 'priceFactor',
        'start_time': 'startTime',
        'high': 'high',
        'low': 'low',
        'time_period': 'timePeriod',
        'bar_length': 'barLength',
        'md_availability': 'mdAvailability',
        'mkt_data_delay': 'mktDataDelay',
        'outside_rth': 'outsideRth',
        'trading_day_duration': 'tradingDayDuration',
        'volume_factor': 'volumeFactor',
        'price_display_rule': 'priceDisplayRule',
        'price_display_value': 'priceDisplayValue',
        'negative_capable': 'negativeCapable',
        'message_version': 'messageVersion',
        'data': 'data',
        'points': 'points',
        'travel_time': 'travelTime'
    }

    def __init__(self, symbol=None, text=None, price_factor=None, start_time=None, high=None, low=None, time_period=None, bar_length=None, md_availability=None, mkt_data_delay=None, outside_rth=None, trading_day_duration=None, volume_factor=None, price_display_rule=None, price_display_value=None, negative_capable=None, message_version=None, data=None, points=None, travel_time=None):  # noqa: E501
        """HistoryData - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._text = None
        self._price_factor = None
        self._start_time = None
        self._high = None
        self._low = None
        self._time_period = None
        self._bar_length = None
        self._md_availability = None
        self._mkt_data_delay = None
        self._outside_rth = None
        self._trading_day_duration = None
        self._volume_factor = None
        self._price_display_rule = None
        self._price_display_value = None
        self._negative_capable = None
        self._message_version = None
        self._data = None
        self._points = None
        self._travel_time = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if text is not None:
            self.text = text
        if price_factor is not None:
            self.price_factor = price_factor
        if start_time is not None:
            self.start_time = start_time
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if time_period is not None:
            self.time_period = time_period
        if bar_length is not None:
            self.bar_length = bar_length
        if md_availability is not None:
            self.md_availability = md_availability
        if mkt_data_delay is not None:
            self.mkt_data_delay = mkt_data_delay
        if outside_rth is not None:
            self.outside_rth = outside_rth
        if trading_day_duration is not None:
            self.trading_day_duration = trading_day_duration
        if volume_factor is not None:
            self.volume_factor = volume_factor
        if price_display_rule is not None:
            self.price_display_rule = price_display_rule
        if price_display_value is not None:
            self.price_display_value = price_display_value
        if negative_capable is not None:
            self.negative_capable = negative_capable
        if message_version is not None:
            self.message_version = message_version
        if data is not None:
            self.data = data
        if points is not None:
            self.points = points
        if travel_time is not None:
            self.travel_time = travel_time

    @property
    def symbol(self):
        """Gets the symbol of this HistoryData.  # noqa: E501

        Underlying symbol  # noqa: E501

        :return: The symbol of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this HistoryData.

        Underlying symbol  # noqa: E501

        :param symbol: The symbol of this HistoryData.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def text(self):
        """Gets the text of this HistoryData.  # noqa: E501

        companyName  # noqa: E501

        :return: The text of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this HistoryData.

        companyName  # noqa: E501

        :param text: The text of this HistoryData.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def price_factor(self):
        """Gets the price_factor of this HistoryData.  # noqa: E501

        priceFactor is price increment obtained from display rule  # noqa: E501

        :return: The price_factor of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._price_factor

    @price_factor.setter
    def price_factor(self, price_factor):
        """Sets the price_factor of this HistoryData.

        priceFactor is price increment obtained from display rule  # noqa: E501

        :param price_factor: The price_factor of this HistoryData.  # noqa: E501
        :type: int
        """

        self._price_factor = price_factor

    @property
    def start_time(self):
        """Gets the start_time of this HistoryData.  # noqa: E501

        start date time in the format YYYYMMDD-HH:mm:ss  # noqa: E501

        :return: The start_time of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this HistoryData.

        start date time in the format YYYYMMDD-HH:mm:ss  # noqa: E501

        :param start_time: The start_time of this HistoryData.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def high(self):
        """Gets the high of this HistoryData.  # noqa: E501

        High value during this time series with format %h/%v/%t. %h is the high price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart   # noqa: E501

        :return: The high of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this HistoryData.

        High value during this time series with format %h/%v/%t. %h is the high price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart   # noqa: E501

        :param high: The high of this HistoryData.  # noqa: E501
        :type: str
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this HistoryData.  # noqa: E501

        Low value during this time series with format %l/%v/%t. %l is the low price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart   # noqa: E501

        :return: The low of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this HistoryData.

        Low value during this time series with format %l/%v/%t. %l is the low price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart   # noqa: E501

        :param low: The low of this HistoryData.  # noqa: E501
        :type: str
        """

        self._low = low

    @property
    def time_period(self):
        """Gets the time_period of this HistoryData.  # noqa: E501

        The duration for the historical data request  # noqa: E501

        :return: The time_period of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this HistoryData.

        The duration for the historical data request  # noqa: E501

        :param time_period: The time_period of this HistoryData.  # noqa: E501
        :type: str
        """

        self._time_period = time_period

    @property
    def bar_length(self):
        """Gets the bar_length of this HistoryData.  # noqa: E501

        The number of seconds in a bar  # noqa: E501

        :return: The bar_length of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._bar_length

    @bar_length.setter
    def bar_length(self, bar_length):
        """Sets the bar_length of this HistoryData.

        The number of seconds in a bar  # noqa: E501

        :param bar_length: The bar_length of this HistoryData.  # noqa: E501
        :type: int
        """

        self._bar_length = bar_length

    @property
    def md_availability(self):
        """Gets the md_availability of this HistoryData.  # noqa: E501

        Market Data Availability. The field may contain two chars. The first char is the primary code: S = Streaming, R = Realtime, D = Delayed, Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated.   # noqa: E501

        :return: The md_availability of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._md_availability

    @md_availability.setter
    def md_availability(self, md_availability):
        """Sets the md_availability of this HistoryData.

        Market Data Availability. The field may contain two chars. The first char is the primary code: S = Streaming, R = Realtime, D = Delayed, Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated.   # noqa: E501

        :param md_availability: The md_availability of this HistoryData.  # noqa: E501
        :type: str
        """

        self._md_availability = md_availability

    @property
    def mkt_data_delay(self):
        """Gets the mkt_data_delay of this HistoryData.  # noqa: E501

        The time it takes, in milliseconds, to process the historical data request  # noqa: E501

        :return: The mkt_data_delay of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._mkt_data_delay

    @mkt_data_delay.setter
    def mkt_data_delay(self, mkt_data_delay):
        """Sets the mkt_data_delay of this HistoryData.

        The time it takes, in milliseconds, to process the historical data request  # noqa: E501

        :param mkt_data_delay: The mkt_data_delay of this HistoryData.  # noqa: E501
        :type: int
        """

        self._mkt_data_delay = mkt_data_delay

    @property
    def outside_rth(self):
        """Gets the outside_rth of this HistoryData.  # noqa: E501

        The historical data returned includes outside of regular trading hours   # noqa: E501

        :return: The outside_rth of this HistoryData.  # noqa: E501
        :rtype: bool
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this HistoryData.

        The historical data returned includes outside of regular trading hours   # noqa: E501

        :param outside_rth: The outside_rth of this HistoryData.  # noqa: E501
        :type: bool
        """

        self._outside_rth = outside_rth

    @property
    def trading_day_duration(self):
        """Gets the trading_day_duration of this HistoryData.  # noqa: E501

        The number of seconds in the trading day  # noqa: E501

        :return: The trading_day_duration of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._trading_day_duration

    @trading_day_duration.setter
    def trading_day_duration(self, trading_day_duration):
        """Sets the trading_day_duration of this HistoryData.

        The number of seconds in the trading day  # noqa: E501

        :param trading_day_duration: The trading_day_duration of this HistoryData.  # noqa: E501
        :type: int
        """

        self._trading_day_duration = trading_day_duration

    @property
    def volume_factor(self):
        """Gets the volume_factor of this HistoryData.  # noqa: E501


        :return: The volume_factor of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._volume_factor

    @volume_factor.setter
    def volume_factor(self, volume_factor):
        """Sets the volume_factor of this HistoryData.


        :param volume_factor: The volume_factor of this HistoryData.  # noqa: E501
        :type: int
        """

        self._volume_factor = volume_factor

    @property
    def price_display_rule(self):
        """Gets the price_display_rule of this HistoryData.  # noqa: E501


        :return: The price_display_rule of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._price_display_rule

    @price_display_rule.setter
    def price_display_rule(self, price_display_rule):
        """Sets the price_display_rule of this HistoryData.


        :param price_display_rule: The price_display_rule of this HistoryData.  # noqa: E501
        :type: int
        """

        self._price_display_rule = price_display_rule

    @property
    def price_display_value(self):
        """Gets the price_display_value of this HistoryData.  # noqa: E501


        :return: The price_display_value of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._price_display_value

    @price_display_value.setter
    def price_display_value(self, price_display_value):
        """Sets the price_display_value of this HistoryData.


        :param price_display_value: The price_display_value of this HistoryData.  # noqa: E501
        :type: str
        """

        self._price_display_value = price_display_value

    @property
    def negative_capable(self):
        """Gets the negative_capable of this HistoryData.  # noqa: E501


        :return: The negative_capable of this HistoryData.  # noqa: E501
        :rtype: bool
        """
        return self._negative_capable

    @negative_capable.setter
    def negative_capable(self, negative_capable):
        """Sets the negative_capable of this HistoryData.


        :param negative_capable: The negative_capable of this HistoryData.  # noqa: E501
        :type: bool
        """

        self._negative_capable = negative_capable

    @property
    def message_version(self):
        """Gets the message_version of this HistoryData.  # noqa: E501


        :return: The message_version of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._message_version

    @message_version.setter
    def message_version(self, message_version):
        """Sets the message_version of this HistoryData.


        :param message_version: The message_version of this HistoryData.  # noqa: E501
        :type: int
        """

        self._message_version = message_version

    @property
    def data(self):
        """Gets the data of this HistoryData.  # noqa: E501


        :return: The data of this HistoryData.  # noqa: E501
        :rtype: list[HistorydataData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HistoryData.


        :param data: The data of this HistoryData.  # noqa: E501
        :type: list[HistorydataData]
        """

        self._data = data

    @property
    def points(self):
        """Gets the points of this HistoryData.  # noqa: E501

        total number of points  # noqa: E501

        :return: The points of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this HistoryData.

        total number of points  # noqa: E501

        :param points: The points of this HistoryData.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def travel_time(self):
        """Gets the travel_time of this HistoryData.  # noqa: E501


        :return: The travel_time of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._travel_time

    @travel_time.setter
    def travel_time(self, travel_time):
        """Sets the travel_time of this HistoryData.


        :param travel_time: The travel_time of this HistoryData.  # noqa: E501
        :type: int
        """

        self._travel_time = travel_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
