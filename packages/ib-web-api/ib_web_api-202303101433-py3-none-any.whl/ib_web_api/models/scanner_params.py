# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScannerParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instrument': 'str',
        'type': 'str',
        'location': 'str',
        'filter': 'list[ScannerparamsFilter]'
    }

    attribute_map = {
        'instrument': 'instrument',
        'type': 'type',
        'location': 'location',
        'filter': 'filter'
    }

    def __init__(self, instrument=None, type=None, location=None, filter=None):  # noqa: E501
        """ScannerParams - a model defined in Swagger"""  # noqa: E501
        self._instrument = None
        self._type = None
        self._location = None
        self._filter = None
        self.discriminator = None
        if instrument is not None:
            self.instrument = instrument
        if type is not None:
            self.type = type
        if location is not None:
            self.location = location
        if filter is not None:
            self.filter = filter

    @property
    def instrument(self):
        """Gets the instrument of this ScannerParams.  # noqa: E501

        Contains an instrument, which to scan for. For example - \"STK\"  # noqa: E501

        :return: The instrument of this ScannerParams.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this ScannerParams.

        Contains an instrument, which to scan for. For example - \"STK\"  # noqa: E501

        :param instrument: The instrument of this ScannerParams.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def type(self):
        """Gets the type of this ScannerParams.  # noqa: E501

        Specify the scan type to use. For example - \"MOST_ACTIVE_USD\"  # noqa: E501

        :return: The type of this ScannerParams.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScannerParams.

        Specify the scan type to use. For example - \"MOST_ACTIVE_USD\"  # noqa: E501

        :param type: The type of this ScannerParams.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def location(self):
        """Gets the location of this ScannerParams.  # noqa: E501

        Contains location code, where to look for specified instrument. For example - \"STK.US.MAJOR\"  # noqa: E501

        :return: The location of this ScannerParams.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ScannerParams.

        Contains location code, where to look for specified instrument. For example - \"STK.US.MAJOR\"  # noqa: E501

        :param location: The location of this ScannerParams.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def filter(self):
        """Gets the filter of this ScannerParams.  # noqa: E501

        Contains list of filters supported for the scanner  # noqa: E501

        :return: The filter of this ScannerParams.  # noqa: E501
        :rtype: list[ScannerparamsFilter]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ScannerParams.

        Contains list of filters supported for the scanner  # noqa: E501

        :param filter: The filter of this ScannerParams.  # noqa: E501
        :type: list[ScannerparamsFilter]
        """

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScannerParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScannerParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
