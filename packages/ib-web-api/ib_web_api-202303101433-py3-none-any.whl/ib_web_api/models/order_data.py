# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_order_id': 'str',
        'exec_id': 'str',
        'exec_type': 'str',
        'order_type': 'str',
        'order_status': 'str',
        'symbol': 'str',
        'order_qty': 'str',
        'price': 'str',
        'last_shares': 'str',
        'last_price': 'str',
        'cum_qty': 'str',
        'leaves_qty': 'str',
        'avg_price': 'str',
        'side': 'str',
        'order_id': 'str',
        'account': 'str',
        'sec_type': 'str',
        'tx_time': 'str',
        'rcpt_time': 'str',
        'tif': 'str',
        'conid': 'str',
        'currency': 'str',
        'exchange': 'str',
        'listing_exchange': 'str',
        'text': 'float',
        'warnings': 'OrderdataWarnings',
        'comm_curr': 'str',
        'comms': 'str',
        'realized_pnl': 'str'
    }

    attribute_map = {
        'client_order_id': 'clientOrderId',
        'exec_id': 'execId',
        'exec_type': 'execType',
        'order_type': 'orderType',
        'order_status': 'orderStatus',
        'symbol': 'symbol',
        'order_qty': 'orderQty',
        'price': 'price',
        'last_shares': 'lastShares',
        'last_price': 'lastPrice',
        'cum_qty': 'cumQty',
        'leaves_qty': 'leavesQty',
        'avg_price': 'avgPrice',
        'side': 'side',
        'order_id': 'orderId',
        'account': 'account',
        'sec_type': 'secType',
        'tx_time': 'txTime',
        'rcpt_time': 'rcptTime',
        'tif': 'tif',
        'conid': 'conid',
        'currency': 'currency',
        'exchange': 'exchange',
        'listing_exchange': 'listingExchange',
        'text': 'text',
        'warnings': 'warnings',
        'comm_curr': 'commCurr',
        'comms': 'comms',
        'realized_pnl': 'realizedPnl'
    }

    def __init__(self, client_order_id=None, exec_id=None, exec_type=None, order_type=None, order_status=None, symbol=None, order_qty=None, price=None, last_shares=None, last_price=None, cum_qty=None, leaves_qty=None, avg_price=None, side=None, order_id=None, account=None, sec_type=None, tx_time=None, rcpt_time=None, tif=None, conid=None, currency=None, exchange=None, listing_exchange=None, text=None, warnings=None, comm_curr=None, comms=None, realized_pnl=None):  # noqa: E501
        """OrderData - a model defined in Swagger"""  # noqa: E501
        self._client_order_id = None
        self._exec_id = None
        self._exec_type = None
        self._order_type = None
        self._order_status = None
        self._symbol = None
        self._order_qty = None
        self._price = None
        self._last_shares = None
        self._last_price = None
        self._cum_qty = None
        self._leaves_qty = None
        self._avg_price = None
        self._side = None
        self._order_id = None
        self._account = None
        self._sec_type = None
        self._tx_time = None
        self._rcpt_time = None
        self._tif = None
        self._conid = None
        self._currency = None
        self._exchange = None
        self._listing_exchange = None
        self._text = None
        self._warnings = None
        self._comm_curr = None
        self._comms = None
        self._realized_pnl = None
        self.discriminator = None
        if client_order_id is not None:
            self.client_order_id = client_order_id
        if exec_id is not None:
            self.exec_id = exec_id
        if exec_type is not None:
            self.exec_type = exec_type
        if order_type is not None:
            self.order_type = order_type
        if order_status is not None:
            self.order_status = order_status
        if symbol is not None:
            self.symbol = symbol
        if order_qty is not None:
            self.order_qty = order_qty
        if price is not None:
            self.price = price
        if last_shares is not None:
            self.last_shares = last_shares
        if last_price is not None:
            self.last_price = last_price
        if cum_qty is not None:
            self.cum_qty = cum_qty
        if leaves_qty is not None:
            self.leaves_qty = leaves_qty
        if avg_price is not None:
            self.avg_price = avg_price
        if side is not None:
            self.side = side
        if order_id is not None:
            self.order_id = order_id
        if account is not None:
            self.account = account
        if sec_type is not None:
            self.sec_type = sec_type
        if tx_time is not None:
            self.tx_time = tx_time
        if rcpt_time is not None:
            self.rcpt_time = rcpt_time
        if tif is not None:
            self.tif = tif
        if conid is not None:
            self.conid = conid
        if currency is not None:
            self.currency = currency
        if exchange is not None:
            self.exchange = exchange
        if listing_exchange is not None:
            self.listing_exchange = listing_exchange
        if text is not None:
            self.text = text
        if warnings is not None:
            self.warnings = warnings
        if comm_curr is not None:
            self.comm_curr = comm_curr
        if comms is not None:
            self.comms = comms
        if realized_pnl is not None:
            self.realized_pnl = realized_pnl

    @property
    def client_order_id(self):
        """Gets the client_order_id of this OrderData.  # noqa: E501


        :return: The client_order_id of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._client_order_id

    @client_order_id.setter
    def client_order_id(self, client_order_id):
        """Sets the client_order_id of this OrderData.


        :param client_order_id: The client_order_id of this OrderData.  # noqa: E501
        :type: str
        """

        self._client_order_id = client_order_id

    @property
    def exec_id(self):
        """Gets the exec_id of this OrderData.  # noqa: E501


        :return: The exec_id of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._exec_id

    @exec_id.setter
    def exec_id(self, exec_id):
        """Sets the exec_id of this OrderData.


        :param exec_id: The exec_id of this OrderData.  # noqa: E501
        :type: str
        """

        self._exec_id = exec_id

    @property
    def exec_type(self):
        """Gets the exec_type of this OrderData.  # noqa: E501

        * -1 - Invalid * 0 - New * 1 - Partially Filled * 2 - Filled * 3 - Done for the Day * 4 - Canceled * 5 - Replaced * 6 - Pending Cancel * 7 - Stopped * 8 - Rejected * 9 - Suspended * A - Pending New * B - Calculated * C - Expired * D - Restated * E - Pending Replace * F - Trade * G - Trade Correct * H - Trade Cancel * I - Order Status  # noqa: E501

        :return: The exec_type of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._exec_type

    @exec_type.setter
    def exec_type(self, exec_type):
        """Sets the exec_type of this OrderData.

        * -1 - Invalid * 0 - New * 1 - Partially Filled * 2 - Filled * 3 - Done for the Day * 4 - Canceled * 5 - Replaced * 6 - Pending Cancel * 7 - Stopped * 8 - Rejected * 9 - Suspended * A - Pending New * B - Calculated * C - Expired * D - Restated * E - Pending Replace * F - Trade * G - Trade Correct * H - Trade Cancel * I - Order Status  # noqa: E501

        :param exec_type: The exec_type of this OrderData.  # noqa: E501
        :type: str
        """
        allowed_values = ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I"]  # noqa: E501
        if exec_type not in allowed_values:
            raise ValueError(
                "Invalid value for `exec_type` ({0}), must be one of {1}"  # noqa: E501
                .format(exec_type, allowed_values)
            )

        self._exec_type = exec_type

    @property
    def order_type(self):
        """Gets the order_type of this OrderData.  # noqa: E501

        * 1 - Market * 2 - Limit * 3 - Stop * 4 - Stop Limit * 5 - Market on Close * 6 - With or Without * 7 - Limit or Better * 8 - Limit With or Without * 9 - On Basis * A - On Close * B - Limit On Close * C - Forex Market * D - Previously Quoted * E - Previously Indicated * F - Forex Limit * G - Forex Swap * H - Forex Previously Quoted * I - Funari * K - Market To Limit * P - Pegged  # noqa: E501

        :return: The order_type of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this OrderData.

        * 1 - Market * 2 - Limit * 3 - Stop * 4 - Stop Limit * 5 - Market on Close * 6 - With or Without * 7 - Limit or Better * 8 - Limit With or Without * 9 - On Basis * A - On Close * B - Limit On Close * C - Forex Market * D - Previously Quoted * E - Previously Indicated * F - Forex Limit * G - Forex Swap * H - Forex Previously Quoted * I - Funari * K - Market To Limit * P - Pegged  # noqa: E501

        :param order_type: The order_type of this OrderData.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "K", "P"]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"  # noqa: E501
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def order_status(self):
        """Gets the order_status of this OrderData.  # noqa: E501

        * -1 - Invalid Order Status * 0 - New * 1 - Partially Filled * 2 - Filled * 3 - Done for the Day * 4 - Canceled * 5 - Replaced * 6 - Pending Cancel * 7 - Stopped * 8 - Rejected * 9 - Suspended * A - Pending New * B - Calculated * C - Expired * D - Restated * E - Pending Replace  # noqa: E501

        :return: The order_status of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this OrderData.

        * -1 - Invalid Order Status * 0 - New * 1 - Partially Filled * 2 - Filled * 3 - Done for the Day * 4 - Canceled * 5 - Replaced * 6 - Pending Cancel * 7 - Stopped * 8 - Rejected * 9 - Suspended * A - Pending New * B - Calculated * C - Expired * D - Restated * E - Pending Replace  # noqa: E501

        :param order_status: The order_status of this OrderData.  # noqa: E501
        :type: str
        """
        allowed_values = ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E"]  # noqa: E501
        if order_status not in allowed_values:
            raise ValueError(
                "Invalid value for `order_status` ({0}), must be one of {1}"  # noqa: E501
                .format(order_status, allowed_values)
            )

        self._order_status = order_status

    @property
    def symbol(self):
        """Gets the symbol of this OrderData.  # noqa: E501

        Underlying symbol for contract  # noqa: E501

        :return: The symbol of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this OrderData.

        Underlying symbol for contract  # noqa: E501

        :param symbol: The symbol of this OrderData.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def order_qty(self):
        """Gets the order_qty of this OrderData.  # noqa: E501

        Quantity of active order  # noqa: E501

        :return: The order_qty of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._order_qty

    @order_qty.setter
    def order_qty(self, order_qty):
        """Sets the order_qty of this OrderData.

        Quantity of active order  # noqa: E501

        :param order_qty: The order_qty of this OrderData.  # noqa: E501
        :type: str
        """

        self._order_qty = order_qty

    @property
    def price(self):
        """Gets the price of this OrderData.  # noqa: E501

        Price of active order  # noqa: E501

        :return: The price of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderData.

        Price of active order  # noqa: E501

        :param price: The price of this OrderData.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def last_shares(self):
        """Gets the last_shares of this OrderData.  # noqa: E501

        Quantity of the last partial fill  # noqa: E501

        :return: The last_shares of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._last_shares

    @last_shares.setter
    def last_shares(self, last_shares):
        """Sets the last_shares of this OrderData.

        Quantity of the last partial fill  # noqa: E501

        :param last_shares: The last_shares of this OrderData.  # noqa: E501
        :type: str
        """

        self._last_shares = last_shares

    @property
    def last_price(self):
        """Gets the last_price of this OrderData.  # noqa: E501

        Price of the last partial fill  # noqa: E501

        :return: The last_price of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """Sets the last_price of this OrderData.

        Price of the last partial fill  # noqa: E501

        :param last_price: The last_price of this OrderData.  # noqa: E501
        :type: str
        """

        self._last_price = last_price

    @property
    def cum_qty(self):
        """Gets the cum_qty of this OrderData.  # noqa: E501

        Cumulative fill quantity  # noqa: E501

        :return: The cum_qty of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._cum_qty

    @cum_qty.setter
    def cum_qty(self, cum_qty):
        """Sets the cum_qty of this OrderData.

        Cumulative fill quantity  # noqa: E501

        :param cum_qty: The cum_qty of this OrderData.  # noqa: E501
        :type: str
        """

        self._cum_qty = cum_qty

    @property
    def leaves_qty(self):
        """Gets the leaves_qty of this OrderData.  # noqa: E501

        Remaining quantity to be filled  # noqa: E501

        :return: The leaves_qty of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._leaves_qty

    @leaves_qty.setter
    def leaves_qty(self, leaves_qty):
        """Sets the leaves_qty of this OrderData.

        Remaining quantity to be filled  # noqa: E501

        :param leaves_qty: The leaves_qty of this OrderData.  # noqa: E501
        :type: str
        """

        self._leaves_qty = leaves_qty

    @property
    def avg_price(self):
        """Gets the avg_price of this OrderData.  # noqa: E501

        Average fill price  # noqa: E501

        :return: The avg_price of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this OrderData.

        Average fill price  # noqa: E501

        :param avg_price: The avg_price of this OrderData.  # noqa: E501
        :type: str
        """

        self._avg_price = avg_price

    @property
    def side(self):
        """Gets the side of this OrderData.  # noqa: E501

        * 1 - Buy * 2 - Sell * 3 - Buy Minus * 4 - Sell Plus * 5 - Sell Short * 6 - Sell Short Exempt  # noqa: E501

        :return: The side of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderData.

        * 1 - Buy * 2 - Sell * 3 - Buy Minus * 4 - Sell Plus * 5 - Sell Short * 6 - Sell Short Exempt  # noqa: E501

        :param side: The side of this OrderData.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "2", "3", "4", "5", "6"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def order_id(self):
        """Gets the order_id of this OrderData.  # noqa: E501

        Order identifier  # noqa: E501

        :return: The order_id of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderData.

        Order identifier  # noqa: E501

        :param order_id: The order_id of this OrderData.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def account(self):
        """Gets the account of this OrderData.  # noqa: E501

        Account number  # noqa: E501

        :return: The account of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this OrderData.

        Account number  # noqa: E501

        :param account: The account of this OrderData.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def sec_type(self):
        """Gets the sec_type of this OrderData.  # noqa: E501

        * CS - Stock * CASH - Forex * CFD - Contract for Difference * FUT - Future * OPT - Option  # noqa: E501

        :return: The sec_type of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._sec_type

    @sec_type.setter
    def sec_type(self, sec_type):
        """Sets the sec_type of this OrderData.

        * CS - Stock * CASH - Forex * CFD - Contract for Difference * FUT - Future * OPT - Option  # noqa: E501

        :param sec_type: The sec_type of this OrderData.  # noqa: E501
        :type: str
        """
        allowed_values = ["CS", "CASH", "CFD", "FUT", "OPT"]  # noqa: E501
        if sec_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sec_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sec_type, allowed_values)
            )

        self._sec_type = sec_type

    @property
    def tx_time(self):
        """Gets the tx_time of this OrderData.  # noqa: E501

        Time of transaction in GMT, format YYYYMMDD-hh:m:ss  # noqa: E501

        :return: The tx_time of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._tx_time

    @tx_time.setter
    def tx_time(self, tx_time):
        """Sets the tx_time of this OrderData.

        Time of transaction in GMT, format YYYYMMDD-hh:m:ss  # noqa: E501

        :param tx_time: The tx_time of this OrderData.  # noqa: E501
        :type: str
        """

        self._tx_time = tx_time

    @property
    def rcpt_time(self):
        """Gets the rcpt_time of this OrderData.  # noqa: E501

        Time of receipt in GMT, format YYYYMMDD-hh:mm:ss  # noqa: E501

        :return: The rcpt_time of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._rcpt_time

    @rcpt_time.setter
    def rcpt_time(self, rcpt_time):
        """Sets the rcpt_time of this OrderData.

        Time of receipt in GMT, format YYYYMMDD-hh:mm:ss  # noqa: E501

        :param rcpt_time: The rcpt_time of this OrderData.  # noqa: E501
        :type: str
        """

        self._rcpt_time = rcpt_time

    @property
    def tif(self):
        """Gets the tif of this OrderData.  # noqa: E501

        * 0 - Day * 1 - GTC * 2 - At the Opening  # noqa: E501

        :return: The tif of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._tif

    @tif.setter
    def tif(self, tif):
        """Sets the tif of this OrderData.

        * 0 - Day * 1 - GTC * 2 - At the Opening  # noqa: E501

        :param tif: The tif of this OrderData.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2"]  # noqa: E501
        if tif not in allowed_values:
            raise ValueError(
                "Invalid value for `tif` ({0}), must be one of {1}"  # noqa: E501
                .format(tif, allowed_values)
            )

        self._tif = tif

    @property
    def conid(self):
        """Gets the conid of this OrderData.  # noqa: E501

        Contract identifier from IBKR's database.  # noqa: E501

        :return: The conid of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this OrderData.

        Contract identifier from IBKR's database.  # noqa: E501

        :param conid: The conid of this OrderData.  # noqa: E501
        :type: str
        """

        self._conid = conid

    @property
    def currency(self):
        """Gets the currency of this OrderData.  # noqa: E501

        Trading currency  # noqa: E501

        :return: The currency of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderData.

        Trading currency  # noqa: E501

        :param currency: The currency of this OrderData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def exchange(self):
        """Gets the exchange of this OrderData.  # noqa: E501

        Exchange or venue  # noqa: E501

        :return: The exchange of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this OrderData.

        Exchange or venue  # noqa: E501

        :param exchange: The exchange of this OrderData.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this OrderData.  # noqa: E501

        Listing Exchange  # noqa: E501

        :return: The listing_exchange of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this OrderData.

        Listing Exchange  # noqa: E501

        :param listing_exchange: The listing_exchange of this OrderData.  # noqa: E501
        :type: str
        """

        self._listing_exchange = listing_exchange

    @property
    def text(self):
        """Gets the text of this OrderData.  # noqa: E501

        error message  # noqa: E501

        :return: The text of this OrderData.  # noqa: E501
        :rtype: float
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this OrderData.

        error message  # noqa: E501

        :param text: The text of this OrderData.  # noqa: E501
        :type: float
        """

        self._text = text

    @property
    def warnings(self):
        """Gets the warnings of this OrderData.  # noqa: E501


        :return: The warnings of this OrderData.  # noqa: E501
        :rtype: OrderdataWarnings
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this OrderData.


        :param warnings: The warnings of this OrderData.  # noqa: E501
        :type: OrderdataWarnings
        """

        self._warnings = warnings

    @property
    def comm_curr(self):
        """Gets the comm_curr of this OrderData.  # noqa: E501

        Commission currency  # noqa: E501

        :return: The comm_curr of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._comm_curr

    @comm_curr.setter
    def comm_curr(self, comm_curr):
        """Sets the comm_curr of this OrderData.

        Commission currency  # noqa: E501

        :param comm_curr: The comm_curr of this OrderData.  # noqa: E501
        :type: str
        """

        self._comm_curr = comm_curr

    @property
    def comms(self):
        """Gets the comms of this OrderData.  # noqa: E501

        Commissions  # noqa: E501

        :return: The comms of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._comms

    @comms.setter
    def comms(self, comms):
        """Sets the comms of this OrderData.

        Commissions  # noqa: E501

        :param comms: The comms of this OrderData.  # noqa: E501
        :type: str
        """

        self._comms = comms

    @property
    def realized_pnl(self):
        """Gets the realized_pnl of this OrderData.  # noqa: E501

        Realized PnL  # noqa: E501

        :return: The realized_pnl of this OrderData.  # noqa: E501
        :rtype: str
        """
        return self._realized_pnl

    @realized_pnl.setter
    def realized_pnl(self, realized_pnl):
        """Sets the realized_pnl of this OrderData.

        Realized PnL  # noqa: E501

        :param realized_pnl: The realized_pnl of this OrderData.  # noqa: E501
        :type: str
        """

        self._realized_pnl = realized_pnl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
