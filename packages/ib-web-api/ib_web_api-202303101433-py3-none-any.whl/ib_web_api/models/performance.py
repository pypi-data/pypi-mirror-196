# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Performance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'cps': 'PerformanceCps',
        'tpps': 'PerformanceTpps',
        'nav': 'PerformanceNav',
        'pm': 'str',
        'included': 'list[str]',
        'currency_type': 'str',
        'rc': 'int'
    }

    attribute_map = {
        'id': 'id',
        'cps': 'cps',
        'tpps': 'tpps',
        'nav': 'nav',
        'pm': 'pm',
        'included': 'included',
        'currency_type': 'currencyType',
        'rc': 'rc'
    }

    def __init__(self, id=None, cps=None, tpps=None, nav=None, pm=None, included=None, currency_type=None, rc=None):  # noqa: E501
        """Performance - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._cps = None
        self._tpps = None
        self._nav = None
        self._pm = None
        self._included = None
        self._currency_type = None
        self._rc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if cps is not None:
            self.cps = cps
        if tpps is not None:
            self.tpps = tpps
        if nav is not None:
            self.nav = nav
        if pm is not None:
            self.pm = pm
        if included is not None:
            self.included = included
        if currency_type is not None:
            self.currency_type = currency_type
        if rc is not None:
            self.rc = rc

    @property
    def id(self):
        """Gets the id of this Performance.  # noqa: E501


        :return: The id of this Performance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Performance.


        :param id: The id of this Performance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def cps(self):
        """Gets the cps of this Performance.  # noqa: E501


        :return: The cps of this Performance.  # noqa: E501
        :rtype: PerformanceCps
        """
        return self._cps

    @cps.setter
    def cps(self, cps):
        """Sets the cps of this Performance.


        :param cps: The cps of this Performance.  # noqa: E501
        :type: PerformanceCps
        """

        self._cps = cps

    @property
    def tpps(self):
        """Gets the tpps of this Performance.  # noqa: E501


        :return: The tpps of this Performance.  # noqa: E501
        :rtype: PerformanceTpps
        """
        return self._tpps

    @tpps.setter
    def tpps(self, tpps):
        """Sets the tpps of this Performance.


        :param tpps: The tpps of this Performance.  # noqa: E501
        :type: PerformanceTpps
        """

        self._tpps = tpps

    @property
    def nav(self):
        """Gets the nav of this Performance.  # noqa: E501


        :return: The nav of this Performance.  # noqa: E501
        :rtype: PerformanceNav
        """
        return self._nav

    @nav.setter
    def nav(self, nav):
        """Sets the nav of this Performance.


        :param nav: The nav of this Performance.  # noqa: E501
        :type: PerformanceNav
        """

        self._nav = nav

    @property
    def pm(self):
        """Gets the pm of this Performance.  # noqa: E501


        :return: The pm of this Performance.  # noqa: E501
        :rtype: str
        """
        return self._pm

    @pm.setter
    def pm(self, pm):
        """Sets the pm of this Performance.


        :param pm: The pm of this Performance.  # noqa: E501
        :type: str
        """

        self._pm = pm

    @property
    def included(self):
        """Gets the included of this Performance.  # noqa: E501


        :return: The included of this Performance.  # noqa: E501
        :rtype: list[str]
        """
        return self._included

    @included.setter
    def included(self, included):
        """Sets the included of this Performance.


        :param included: The included of this Performance.  # noqa: E501
        :type: list[str]
        """

        self._included = included

    @property
    def currency_type(self):
        """Gets the currency_type of this Performance.  # noqa: E501


        :return: The currency_type of this Performance.  # noqa: E501
        :rtype: str
        """
        return self._currency_type

    @currency_type.setter
    def currency_type(self, currency_type):
        """Sets the currency_type of this Performance.


        :param currency_type: The currency_type of this Performance.  # noqa: E501
        :type: str
        """

        self._currency_type = currency_type

    @property
    def rc(self):
        """Gets the rc of this Performance.  # noqa: E501


        :return: The rc of this Performance.  # noqa: E501
        :rtype: int
        """
        return self._rc

    @rc.setter
    def rc(self, rc):
        """Sets the rc of this Performance.


        :param rc: The rc of this Performance.  # noqa: E501
        :type: int
        """

        self._rc = rc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Performance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Performance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
