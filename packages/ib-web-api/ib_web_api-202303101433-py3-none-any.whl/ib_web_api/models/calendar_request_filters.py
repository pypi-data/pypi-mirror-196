# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalendarRequestFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recently_held': 'str',
        'corporate_earnings': 'str',
        'div_ex_dates': 'str',
        'ipo': 'str',
        'splits': 'str',
        'corporate_events': 'str',
        'economic_events': 'str',
        'option_show_monthly': 'str',
        'option_show_weekly': 'str',
        'country': 'str',
        'limit': 'str',
        'limit_region': 'str'
    }

    attribute_map = {
        'recently_held': 'recently_held',
        'corporate_earnings': 'corporate_earnings',
        'div_ex_dates': 'DivExDates',
        'ipo': 'ipo',
        'splits': 'splits',
        'corporate_events': 'corporate_events',
        'economic_events': 'economic_events',
        'option_show_monthly': 'option_show_monthly',
        'option_show_weekly': 'option_show_weekly',
        'country': 'country',
        'limit': 'limit',
        'limit_region': 'limit_region'
    }

    def __init__(self, recently_held=None, corporate_earnings=None, div_ex_dates=None, ipo=None, splits=None, corporate_events=None, economic_events=None, option_show_monthly=None, option_show_weekly=None, country=None, limit=None, limit_region=None):  # noqa: E501
        """CalendarRequestFilters - a model defined in Swagger"""  # noqa: E501
        self._recently_held = None
        self._corporate_earnings = None
        self._div_ex_dates = None
        self._ipo = None
        self._splits = None
        self._corporate_events = None
        self._economic_events = None
        self._option_show_monthly = None
        self._option_show_weekly = None
        self._country = None
        self._limit = None
        self._limit_region = None
        self.discriminator = None
        if recently_held is not None:
            self.recently_held = recently_held
        if corporate_earnings is not None:
            self.corporate_earnings = corporate_earnings
        if div_ex_dates is not None:
            self.div_ex_dates = div_ex_dates
        if ipo is not None:
            self.ipo = ipo
        if splits is not None:
            self.splits = splits
        if corporate_events is not None:
            self.corporate_events = corporate_events
        if economic_events is not None:
            self.economic_events = economic_events
        if option_show_monthly is not None:
            self.option_show_monthly = option_show_monthly
        if option_show_weekly is not None:
            self.option_show_weekly = option_show_weekly
        if country is not None:
            self.country = country
        if limit is not None:
            self.limit = limit
        if limit_region is not None:
            self.limit_region = limit_region

    @property
    def recently_held(self):
        """Gets the recently_held of this CalendarRequestFilters.  # noqa: E501

        value can be 'true' or 'false'.  # noqa: E501

        :return: The recently_held of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._recently_held

    @recently_held.setter
    def recently_held(self, recently_held):
        """Sets the recently_held of this CalendarRequestFilters.

        value can be 'true' or 'false'.  # noqa: E501

        :param recently_held: The recently_held of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._recently_held = recently_held

    @property
    def corporate_earnings(self):
        """Gets the corporate_earnings of this CalendarRequestFilters.  # noqa: E501

        value can be 'true' or 'false'.  # noqa: E501

        :return: The corporate_earnings of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._corporate_earnings

    @corporate_earnings.setter
    def corporate_earnings(self, corporate_earnings):
        """Sets the corporate_earnings of this CalendarRequestFilters.

        value can be 'true' or 'false'.  # noqa: E501

        :param corporate_earnings: The corporate_earnings of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._corporate_earnings = corporate_earnings

    @property
    def div_ex_dates(self):
        """Gets the div_ex_dates of this CalendarRequestFilters.  # noqa: E501

        value can be 'true' or 'false'.  # noqa: E501

        :return: The div_ex_dates of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._div_ex_dates

    @div_ex_dates.setter
    def div_ex_dates(self, div_ex_dates):
        """Sets the div_ex_dates of this CalendarRequestFilters.

        value can be 'true' or 'false'.  # noqa: E501

        :param div_ex_dates: The div_ex_dates of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._div_ex_dates = div_ex_dates

    @property
    def ipo(self):
        """Gets the ipo of this CalendarRequestFilters.  # noqa: E501

        value can be 'true' or 'false'.  # noqa: E501

        :return: The ipo of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._ipo

    @ipo.setter
    def ipo(self, ipo):
        """Sets the ipo of this CalendarRequestFilters.

        value can be 'true' or 'false'.  # noqa: E501

        :param ipo: The ipo of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._ipo = ipo

    @property
    def splits(self):
        """Gets the splits of this CalendarRequestFilters.  # noqa: E501

        value can be 'true' or 'false'.  # noqa: E501

        :return: The splits of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this CalendarRequestFilters.

        value can be 'true' or 'false'.  # noqa: E501

        :param splits: The splits of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._splits = splits

    @property
    def corporate_events(self):
        """Gets the corporate_events of this CalendarRequestFilters.  # noqa: E501

        value can be 'true' or 'false'.  # noqa: E501

        :return: The corporate_events of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._corporate_events

    @corporate_events.setter
    def corporate_events(self, corporate_events):
        """Sets the corporate_events of this CalendarRequestFilters.

        value can be 'true' or 'false'.  # noqa: E501

        :param corporate_events: The corporate_events of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._corporate_events = corporate_events

    @property
    def economic_events(self):
        """Gets the economic_events of this CalendarRequestFilters.  # noqa: E501

        value can be 'true' or 'false'.  # noqa: E501

        :return: The economic_events of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._economic_events

    @economic_events.setter
    def economic_events(self, economic_events):
        """Sets the economic_events of this CalendarRequestFilters.

        value can be 'true' or 'false'.  # noqa: E501

        :param economic_events: The economic_events of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._economic_events = economic_events

    @property
    def option_show_monthly(self):
        """Gets the option_show_monthly of this CalendarRequestFilters.  # noqa: E501

        value can be 'true' or 'false'.  # noqa: E501

        :return: The option_show_monthly of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._option_show_monthly

    @option_show_monthly.setter
    def option_show_monthly(self, option_show_monthly):
        """Sets the option_show_monthly of this CalendarRequestFilters.

        value can be 'true' or 'false'.  # noqa: E501

        :param option_show_monthly: The option_show_monthly of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._option_show_monthly = option_show_monthly

    @property
    def option_show_weekly(self):
        """Gets the option_show_weekly of this CalendarRequestFilters.  # noqa: E501

        value can be 'true' or 'false'.  # noqa: E501

        :return: The option_show_weekly of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._option_show_weekly

    @option_show_weekly.setter
    def option_show_weekly(self, option_show_weekly):
        """Sets the option_show_weekly of this CalendarRequestFilters.

        value can be 'true' or 'false'.  # noqa: E501

        :param option_show_weekly: The option_show_weekly of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._option_show_weekly = option_show_weekly

    @property
    def country(self):
        """Gets the country of this CalendarRequestFilters.  # noqa: E501

        default is 'All'.  # noqa: E501

        :return: The country of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CalendarRequestFilters.

        default is 'All'.  # noqa: E501

        :param country: The country of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def limit(self):
        """Gets the limit of this CalendarRequestFilters.  # noqa: E501

        default is '250'.  # noqa: E501

        :return: The limit of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this CalendarRequestFilters.

        default is '250'.  # noqa: E501

        :param limit: The limit of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._limit = limit

    @property
    def limit_region(self):
        """Gets the limit_region of this CalendarRequestFilters.  # noqa: E501

        default is '50'.  # noqa: E501

        :return: The limit_region of this CalendarRequestFilters.  # noqa: E501
        :rtype: str
        """
        return self._limit_region

    @limit_region.setter
    def limit_region(self, limit_region):
        """Sets the limit_region of this CalendarRequestFilters.

        default is '50'.  # noqa: E501

        :param limit_region: The limit_region of this CalendarRequestFilters.  # noqa: E501
        :type: str
        """

        self._limit_region = limit_region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalendarRequestFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalendarRequestFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
