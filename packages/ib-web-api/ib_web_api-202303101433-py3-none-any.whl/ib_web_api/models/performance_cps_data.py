# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PerformanceCpsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'id_type': 'str',
        'start': 'str',
        'base_currency': 'str',
        'returns': 'list[float]',
        'end': 'str'
    }

    attribute_map = {
        'id': 'id',
        'id_type': 'idType',
        'start': 'start',
        'base_currency': 'baseCurrency',
        'returns': 'returns',
        'end': 'end'
    }

    def __init__(self, id=None, id_type=None, start=None, base_currency=None, returns=None, end=None):  # noqa: E501
        """PerformanceCpsData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_type = None
        self._start = None
        self._base_currency = None
        self._returns = None
        self._end = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_type is not None:
            self.id_type = id_type
        if start is not None:
            self.start = start
        if base_currency is not None:
            self.base_currency = base_currency
        if returns is not None:
            self.returns = returns
        if end is not None:
            self.end = end

    @property
    def id(self):
        """Gets the id of this PerformanceCpsData.  # noqa: E501


        :return: The id of this PerformanceCpsData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PerformanceCpsData.


        :param id: The id of this PerformanceCpsData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_type(self):
        """Gets the id_type of this PerformanceCpsData.  # noqa: E501

        for example-- acctid  # noqa: E501

        :return: The id_type of this PerformanceCpsData.  # noqa: E501
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this PerformanceCpsData.

        for example-- acctid  # noqa: E501

        :param id_type: The id_type of this PerformanceCpsData.  # noqa: E501
        :type: str
        """

        self._id_type = id_type

    @property
    def start(self):
        """Gets the start of this PerformanceCpsData.  # noqa: E501

        start date-- yyyyMMdd  # noqa: E501

        :return: The start of this PerformanceCpsData.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PerformanceCpsData.

        start date-- yyyyMMdd  # noqa: E501

        :param start: The start of this PerformanceCpsData.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def base_currency(self):
        """Gets the base_currency of this PerformanceCpsData.  # noqa: E501


        :return: The base_currency of this PerformanceCpsData.  # noqa: E501
        :rtype: str
        """
        return self._base_currency

    @base_currency.setter
    def base_currency(self, base_currency):
        """Sets the base_currency of this PerformanceCpsData.


        :param base_currency: The base_currency of this PerformanceCpsData.  # noqa: E501
        :type: str
        """

        self._base_currency = base_currency

    @property
    def returns(self):
        """Gets the returns of this PerformanceCpsData.  # noqa: E501

        each value stands for price change percent of corresponding date in dates array  # noqa: E501

        :return: The returns of this PerformanceCpsData.  # noqa: E501
        :rtype: list[float]
        """
        return self._returns

    @returns.setter
    def returns(self, returns):
        """Sets the returns of this PerformanceCpsData.

        each value stands for price change percent of corresponding date in dates array  # noqa: E501

        :param returns: The returns of this PerformanceCpsData.  # noqa: E501
        :type: list[float]
        """

        self._returns = returns

    @property
    def end(self):
        """Gets the end of this PerformanceCpsData.  # noqa: E501

        end date-- yyyyMMdd  # noqa: E501

        :return: The end of this PerformanceCpsData.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PerformanceCpsData.

        end date-- yyyyMMdd  # noqa: E501

        :param end: The end of this PerformanceCpsData.  # noqa: E501
        :type: str
        """

        self._end = end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PerformanceCpsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceCpsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
