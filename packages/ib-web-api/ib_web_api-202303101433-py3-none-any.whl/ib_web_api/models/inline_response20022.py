# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20022(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'int',
        'account': 'str',
        'alert_name': 'str',
        'alert_active': 'int',
        'order_time': 'str',
        'alert_triggered': 'bool',
        'alert_repeatable': 'int'
    }

    attribute_map = {
        'order_id': 'order_id',
        'account': 'account',
        'alert_name': 'alert_name',
        'alert_active': 'alert_active',
        'order_time': 'order_time',
        'alert_triggered': 'alert_triggered',
        'alert_repeatable': 'alert_repeatable'
    }

    def __init__(self, order_id=None, account=None, alert_name=None, alert_active=None, order_time=None, alert_triggered=None, alert_repeatable=None):  # noqa: E501
        """InlineResponse20022 - a model defined in Swagger"""  # noqa: E501
        self._order_id = None
        self._account = None
        self._alert_name = None
        self._alert_active = None
        self._order_time = None
        self._alert_triggered = None
        self._alert_repeatable = None
        self.discriminator = None
        if order_id is not None:
            self.order_id = order_id
        if account is not None:
            self.account = account
        if alert_name is not None:
            self.alert_name = alert_name
        if alert_active is not None:
            self.alert_active = alert_active
        if order_time is not None:
            self.order_time = order_time
        if alert_triggered is not None:
            self.alert_triggered = alert_triggered
        if alert_repeatable is not None:
            self.alert_repeatable = alert_repeatable

    @property
    def order_id(self):
        """Gets the order_id of this InlineResponse20022.  # noqa: E501


        :return: The order_id of this InlineResponse20022.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this InlineResponse20022.


        :param order_id: The order_id of this InlineResponse20022.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def account(self):
        """Gets the account of this InlineResponse20022.  # noqa: E501

        account id  # noqa: E501

        :return: The account of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this InlineResponse20022.

        account id  # noqa: E501

        :param account: The account of this InlineResponse20022.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def alert_name(self):
        """Gets the alert_name of this InlineResponse20022.  # noqa: E501


        :return: The alert_name of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._alert_name

    @alert_name.setter
    def alert_name(self, alert_name):
        """Sets the alert_name of this InlineResponse20022.


        :param alert_name: The alert_name of this InlineResponse20022.  # noqa: E501
        :type: str
        """

        self._alert_name = alert_name

    @property
    def alert_active(self):
        """Gets the alert_active of this InlineResponse20022.  # noqa: E501

        Value can only be 0 or 1, 1 means active  # noqa: E501

        :return: The alert_active of this InlineResponse20022.  # noqa: E501
        :rtype: int
        """
        return self._alert_active

    @alert_active.setter
    def alert_active(self, alert_active):
        """Sets the alert_active of this InlineResponse20022.

        Value can only be 0 or 1, 1 means active  # noqa: E501

        :param alert_active: The alert_active of this InlineResponse20022.  # noqa: E501
        :type: int
        """

        self._alert_active = alert_active

    @property
    def order_time(self):
        """Gets the order_time of this InlineResponse20022.  # noqa: E501

        format, YYYYMMDD-HH:mm:ss, the time when you created the alert   # noqa: E501

        :return: The order_time of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._order_time

    @order_time.setter
    def order_time(self, order_time):
        """Sets the order_time of this InlineResponse20022.

        format, YYYYMMDD-HH:mm:ss, the time when you created the alert   # noqa: E501

        :param order_time: The order_time of this InlineResponse20022.  # noqa: E501
        :type: str
        """

        self._order_time = order_time

    @property
    def alert_triggered(self):
        """Gets the alert_triggered of this InlineResponse20022.  # noqa: E501

        whether the alert has been triggered or not  # noqa: E501

        :return: The alert_triggered of this InlineResponse20022.  # noqa: E501
        :rtype: bool
        """
        return self._alert_triggered

    @alert_triggered.setter
    def alert_triggered(self, alert_triggered):
        """Sets the alert_triggered of this InlineResponse20022.

        whether the alert has been triggered or not  # noqa: E501

        :param alert_triggered: The alert_triggered of this InlineResponse20022.  # noqa: E501
        :type: bool
        """

        self._alert_triggered = alert_triggered

    @property
    def alert_repeatable(self):
        """Gets the alert_repeatable of this InlineResponse20022.  # noqa: E501

        whether the alert can be repeatable or not, value can be 1 or 0. 1 means true  # noqa: E501

        :return: The alert_repeatable of this InlineResponse20022.  # noqa: E501
        :rtype: int
        """
        return self._alert_repeatable

    @alert_repeatable.setter
    def alert_repeatable(self, alert_repeatable):
        """Sets the alert_repeatable of this InlineResponse20022.

        whether the alert can be repeatable or not, value can be 1 or 0. 1 means true  # noqa: E501

        :param alert_repeatable: The alert_repeatable of this InlineResponse20022.  # noqa: E501
        :type: int
        """

        self._alert_repeatable = alert_repeatable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20022, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20022):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
