# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'account_van': 'str',
        'account_title': 'str',
        'display_name': 'str',
        'account_alias': 'str',
        'account_status': 'float',
        'currency': 'str',
        'type': 'str',
        'trading_type': 'str',
        'faclient': 'bool',
        'clearing_status': 'str',
        'covestor': 'bool',
        'parent': 'AccountParent',
        'desc': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'account_van': 'accountVan',
        'account_title': 'accountTitle',
        'display_name': 'displayName',
        'account_alias': 'accountAlias',
        'account_status': 'accountStatus',
        'currency': 'currency',
        'type': 'type',
        'trading_type': 'tradingType',
        'faclient': 'faclient',
        'clearing_status': 'clearingStatus',
        'covestor': 'covestor',
        'parent': 'parent',
        'desc': 'desc'
    }

    def __init__(self, id=None, account_id=None, account_van=None, account_title=None, display_name=None, account_alias=None, account_status=None, currency=None, type=None, trading_type=None, faclient=None, clearing_status=None, covestor=None, parent=None, desc=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._account_van = None
        self._account_title = None
        self._display_name = None
        self._account_alias = None
        self._account_status = None
        self._currency = None
        self._type = None
        self._trading_type = None
        self._faclient = None
        self._clearing_status = None
        self._covestor = None
        self._parent = None
        self._desc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if account_van is not None:
            self.account_van = account_van
        if account_title is not None:
            self.account_title = account_title
        if display_name is not None:
            self.display_name = display_name
        if account_alias is not None:
            self.account_alias = account_alias
        if account_status is not None:
            self.account_status = account_status
        if currency is not None:
            self.currency = currency
        if type is not None:
            self.type = type
        if trading_type is not None:
            self.trading_type = trading_type
        if faclient is not None:
            self.faclient = faclient
        if clearing_status is not None:
            self.clearing_status = clearing_status
        if covestor is not None:
            self.covestor = covestor
        if parent is not None:
            self.parent = parent
        if desc is not None:
            self.desc = desc

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501

        The account identification value  # noqa: E501

        :return: The id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        The account identification value  # noqa: E501

        :param id: The id of this Account.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Account.  # noqa: E501

        The account number  # noqa: E501

        :return: The account_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.

        The account number  # noqa: E501

        :param account_id: The account_id of this Account.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_van(self):
        """Gets the account_van of this Account.  # noqa: E501

        The accountAlias  # noqa: E501

        :return: The account_van of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_van

    @account_van.setter
    def account_van(self, account_van):
        """Sets the account_van of this Account.

        The accountAlias  # noqa: E501

        :param account_van: The account_van of this Account.  # noqa: E501
        :type: str
        """

        self._account_van = account_van

    @property
    def account_title(self):
        """Gets the account_title of this Account.  # noqa: E501

        Title of the account  # noqa: E501

        :return: The account_title of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_title

    @account_title.setter
    def account_title(self, account_title):
        """Sets the account_title of this Account.

        Title of the account  # noqa: E501

        :param account_title: The account_title of this Account.  # noqa: E501
        :type: str
        """

        self._account_title = account_title

    @property
    def display_name(self):
        """Gets the display_name of this Account.  # noqa: E501

        Whichever value is not null in this priority  # noqa: E501

        :return: The display_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Account.

        Whichever value is not null in this priority  # noqa: E501

        :param display_name: The display_name of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["accountTitle", "accountVan", "accountId"]  # noqa: E501
        if display_name not in allowed_values:
            raise ValueError(
                "Invalid value for `display_name` ({0}), must be one of {1}"  # noqa: E501
                .format(display_name, allowed_values)
            )

        self._display_name = display_name

    @property
    def account_alias(self):
        """Gets the account_alias of this Account.  # noqa: E501

        User customizable account alias. Refer to [Configure Account Alias](https://guides.interactivebrokers.com/cp/cp.htm#am/settings/accountalias.htm) for details.  # noqa: E501

        :return: The account_alias of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_alias

    @account_alias.setter
    def account_alias(self, account_alias):
        """Sets the account_alias of this Account.

        User customizable account alias. Refer to [Configure Account Alias](https://guides.interactivebrokers.com/cp/cp.htm#am/settings/accountalias.htm) for details.  # noqa: E501

        :param account_alias: The account_alias of this Account.  # noqa: E501
        :type: str
        """

        self._account_alias = account_alias

    @property
    def account_status(self):
        """Gets the account_status of this Account.  # noqa: E501

        When the account was opened in unix time.  # noqa: E501

        :return: The account_status of this Account.  # noqa: E501
        :rtype: float
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this Account.

        When the account was opened in unix time.  # noqa: E501

        :param account_status: The account_status of this Account.  # noqa: E501
        :type: float
        """

        self._account_status = account_status

    @property
    def currency(self):
        """Gets the currency of this Account.  # noqa: E501

        Base currency of the account.  # noqa: E501

        :return: The currency of this Account.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Account.

        Base currency of the account.  # noqa: E501

        :param currency: The currency of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUD", "GBP", "CAD", "CNH", "CZK", "DKK", "EUR", "HKD", "HUF", "INR", "ILS", "JPY", "MXN", "NOK", "NZD", "PLN", "RUB", "SGD", "SEK", "CHF", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def type(self):
        """Gets the type of this Account.  # noqa: E501

        Account Type  # noqa: E501

        :return: The type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.

        Account Type  # noqa: E501

        :param type: The type of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["INDIVIDUAL", "JOINT", "ORG", "TRUST", "DEMO"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def trading_type(self):
        """Gets the trading_type of this Account.  # noqa: E501

        UNI - Deprecated property  # noqa: E501

        :return: The trading_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._trading_type

    @trading_type.setter
    def trading_type(self, trading_type):
        """Sets the trading_type of this Account.

        UNI - Deprecated property  # noqa: E501

        :param trading_type: The trading_type of this Account.  # noqa: E501
        :type: str
        """

        self._trading_type = trading_type

    @property
    def faclient(self):
        """Gets the faclient of this Account.  # noqa: E501

        If an account is a sub-account to a Financial Advisor.  # noqa: E501

        :return: The faclient of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._faclient

    @faclient.setter
    def faclient(self, faclient):
        """Sets the faclient of this Account.

        If an account is a sub-account to a Financial Advisor.  # noqa: E501

        :param faclient: The faclient of this Account.  # noqa: E501
        :type: bool
        """

        self._faclient = faclient

    @property
    def clearing_status(self):
        """Gets the clearing_status of this Account.  # noqa: E501

        Status of the Account   * O = Open   * P or N = Pending   * A = Abandoned   * R = Rejected   * C = Closed   # noqa: E501

        :return: The clearing_status of this Account.  # noqa: E501
        :rtype: str
        """
        return self._clearing_status

    @clearing_status.setter
    def clearing_status(self, clearing_status):
        """Sets the clearing_status of this Account.

        Status of the Account   * O = Open   * P or N = Pending   * A = Abandoned   * R = Rejected   * C = Closed   # noqa: E501

        :param clearing_status: The clearing_status of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["O", "P", "N", "A", "R", "C"]  # noqa: E501
        if clearing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `clearing_status` ({0}), must be one of {1}"  # noqa: E501
                .format(clearing_status, allowed_values)
            )

        self._clearing_status = clearing_status

    @property
    def covestor(self):
        """Gets the covestor of this Account.  # noqa: E501

        Is a Covestor Account  # noqa: E501

        :return: The covestor of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._covestor

    @covestor.setter
    def covestor(self, covestor):
        """Sets the covestor of this Account.

        Is a Covestor Account  # noqa: E501

        :param covestor: The covestor of this Account.  # noqa: E501
        :type: bool
        """

        self._covestor = covestor

    @property
    def parent(self):
        """Gets the parent of this Account.  # noqa: E501


        :return: The parent of this Account.  # noqa: E501
        :rtype: AccountParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Account.


        :param parent: The parent of this Account.  # noqa: E501
        :type: AccountParent
        """

        self._parent = parent

    @property
    def desc(self):
        """Gets the desc of this Account.  # noqa: E501

        Formatted \"accountId - accountAlias\"  # noqa: E501

        :return: The desc of this Account.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Account.

        Formatted \"accountId - accountAlias\"  # noqa: E501

        :param desc: The desc of this Account.  # noqa: E501
        :type: str
        """

        self._desc = desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
