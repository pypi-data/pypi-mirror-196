# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertrequestConditions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'int',
        'conidex': 'str',
        'operator': 'str',
        'trigger_method': 'str',
        'value': 'str',
        'logic_bind': 'str',
        'time_zone': 'str'
    }

    attribute_map = {
        'type': 'type',
        'conidex': 'conidex',
        'operator': 'operator',
        'trigger_method': 'triggerMethod',
        'value': 'value',
        'logic_bind': 'logicBind',
        'time_zone': 'timeZone'
    }

    def __init__(self, type=None, conidex=None, operator=None, trigger_method=None, value=None, logic_bind=None, time_zone=None):  # noqa: E501
        """AlertrequestConditions - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._conidex = None
        self._operator = None
        self._trigger_method = None
        self._value = None
        self._logic_bind = None
        self._time_zone = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if conidex is not None:
            self.conidex = conidex
        if operator is not None:
            self.operator = operator
        if trigger_method is not None:
            self.trigger_method = trigger_method
        if value is not None:
            self.value = value
        if logic_bind is not None:
            self.logic_bind = logic_bind
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def type(self):
        """Gets the type of this AlertrequestConditions.  # noqa: E501

        Types: 1-Price, 3-Time, 4-Margin, 5-Trade, 6-Volume, 7: MTA market 8: MTA Position, 9: MTA Acc. Daily PN&   # noqa: E501

        :return: The type of this AlertrequestConditions.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertrequestConditions.

        Types: 1-Price, 3-Time, 4-Margin, 5-Trade, 6-Volume, 7: MTA market 8: MTA Position, 9: MTA Acc. Daily PN&   # noqa: E501

        :param type: The type of this AlertrequestConditions.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def conidex(self):
        """Gets the conidex of this AlertrequestConditions.  # noqa: E501

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :return: The conidex of this AlertrequestConditions.  # noqa: E501
        :rtype: str
        """
        return self._conidex

    @conidex.setter
    def conidex(self, conidex):
        """Sets the conidex of this AlertrequestConditions.

        conid and exchange. Format supports conid or conid@exchange  # noqa: E501

        :param conidex: The conidex of this AlertrequestConditions.  # noqa: E501
        :type: str
        """

        self._conidex = conidex

    @property
    def operator(self):
        """Gets the operator of this AlertrequestConditions.  # noqa: E501

        optional, operator for the current condition, can be >= or <=  # noqa: E501

        :return: The operator of this AlertrequestConditions.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this AlertrequestConditions.

        optional, operator for the current condition, can be >= or <=  # noqa: E501

        :param operator: The operator of this AlertrequestConditions.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def trigger_method(self):
        """Gets the trigger_method of this AlertrequestConditions.  # noqa: E501

        optional, only some type of conditions have triggerMethod  # noqa: E501

        :return: The trigger_method of this AlertrequestConditions.  # noqa: E501
        :rtype: str
        """
        return self._trigger_method

    @trigger_method.setter
    def trigger_method(self, trigger_method):
        """Sets the trigger_method of this AlertrequestConditions.

        optional, only some type of conditions have triggerMethod  # noqa: E501

        :param trigger_method: The trigger_method of this AlertrequestConditions.  # noqa: E501
        :type: str
        """

        self._trigger_method = trigger_method

    @property
    def value(self):
        """Gets the value of this AlertrequestConditions.  # noqa: E501

        can not be empty, can pass default value \"*\"  # noqa: E501

        :return: The value of this AlertrequestConditions.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AlertrequestConditions.

        can not be empty, can pass default value \"*\"  # noqa: E501

        :param value: The value of this AlertrequestConditions.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def logic_bind(self):
        """Gets the logic_bind of this AlertrequestConditions.  # noqa: E501

        \"a\" means \"AND\", \"o\" means \"OR\", \"n\" means \"END\", the last one condition in the condition array should \"n\"   # noqa: E501

        :return: The logic_bind of this AlertrequestConditions.  # noqa: E501
        :rtype: str
        """
        return self._logic_bind

    @logic_bind.setter
    def logic_bind(self, logic_bind):
        """Sets the logic_bind of this AlertrequestConditions.

        \"a\" means \"AND\", \"o\" means \"OR\", \"n\" means \"END\", the last one condition in the condition array should \"n\"   # noqa: E501

        :param logic_bind: The logic_bind of this AlertrequestConditions.  # noqa: E501
        :type: str
        """

        self._logic_bind = logic_bind

    @property
    def time_zone(self):
        """Gets the time_zone of this AlertrequestConditions.  # noqa: E501

        only needed for some MTA alert condition  # noqa: E501

        :return: The time_zone of this AlertrequestConditions.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this AlertrequestConditions.

        only needed for some MTA alert condition  # noqa: E501

        :param time_zone: The time_zone of this AlertrequestConditions.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertrequestConditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertrequestConditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
