# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Ledger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commoditymarketvalue': 'float',
        'futuremarketvalue': 'float',
        'settledcash': 'float',
        'exchangerate': 'float',
        'sessionid': 'int',
        'cashbalance': 'float',
        'corporatebondsmarketvalue': 'float',
        'warrantsmarketvalue': 'float',
        'netliquidationvalue': 'float',
        'interest': 'float',
        'unrealizedpnl': 'float',
        'stockmarketvalue': 'float',
        'moneyfunds': 'float',
        'currency': 'str',
        'realizedpnl': 'float',
        'funds': 'float',
        'acctcode': 'str',
        'issueroptionsmarketvalue': 'float',
        'key': 'str',
        'timestamp': 'int',
        'severity': 'int'
    }

    attribute_map = {
        'commoditymarketvalue': 'commoditymarketvalue',
        'futuremarketvalue': 'futuremarketvalue',
        'settledcash': 'settledcash',
        'exchangerate': 'exchangerate',
        'sessionid': 'sessionid',
        'cashbalance': 'cashbalance',
        'corporatebondsmarketvalue': 'corporatebondsmarketvalue',
        'warrantsmarketvalue': 'warrantsmarketvalue',
        'netliquidationvalue': 'netliquidationvalue',
        'interest': 'interest',
        'unrealizedpnl': 'unrealizedpnl',
        'stockmarketvalue': 'stockmarketvalue',
        'moneyfunds': 'moneyfunds',
        'currency': 'currency',
        'realizedpnl': 'realizedpnl',
        'funds': 'funds',
        'acctcode': 'acctcode',
        'issueroptionsmarketvalue': 'issueroptionsmarketvalue',
        'key': 'key',
        'timestamp': 'timestamp',
        'severity': 'severity'
    }

    def __init__(self, commoditymarketvalue=None, futuremarketvalue=None, settledcash=None, exchangerate=None, sessionid=None, cashbalance=None, corporatebondsmarketvalue=None, warrantsmarketvalue=None, netliquidationvalue=None, interest=None, unrealizedpnl=None, stockmarketvalue=None, moneyfunds=None, currency=None, realizedpnl=None, funds=None, acctcode=None, issueroptionsmarketvalue=None, key=None, timestamp=None, severity=None):  # noqa: E501
        """Ledger - a model defined in Swagger"""  # noqa: E501
        self._commoditymarketvalue = None
        self._futuremarketvalue = None
        self._settledcash = None
        self._exchangerate = None
        self._sessionid = None
        self._cashbalance = None
        self._corporatebondsmarketvalue = None
        self._warrantsmarketvalue = None
        self._netliquidationvalue = None
        self._interest = None
        self._unrealizedpnl = None
        self._stockmarketvalue = None
        self._moneyfunds = None
        self._currency = None
        self._realizedpnl = None
        self._funds = None
        self._acctcode = None
        self._issueroptionsmarketvalue = None
        self._key = None
        self._timestamp = None
        self._severity = None
        self.discriminator = None
        if commoditymarketvalue is not None:
            self.commoditymarketvalue = commoditymarketvalue
        if futuremarketvalue is not None:
            self.futuremarketvalue = futuremarketvalue
        if settledcash is not None:
            self.settledcash = settledcash
        if exchangerate is not None:
            self.exchangerate = exchangerate
        if sessionid is not None:
            self.sessionid = sessionid
        if cashbalance is not None:
            self.cashbalance = cashbalance
        if corporatebondsmarketvalue is not None:
            self.corporatebondsmarketvalue = corporatebondsmarketvalue
        if warrantsmarketvalue is not None:
            self.warrantsmarketvalue = warrantsmarketvalue
        if netliquidationvalue is not None:
            self.netliquidationvalue = netliquidationvalue
        if interest is not None:
            self.interest = interest
        if unrealizedpnl is not None:
            self.unrealizedpnl = unrealizedpnl
        if stockmarketvalue is not None:
            self.stockmarketvalue = stockmarketvalue
        if moneyfunds is not None:
            self.moneyfunds = moneyfunds
        if currency is not None:
            self.currency = currency
        if realizedpnl is not None:
            self.realizedpnl = realizedpnl
        if funds is not None:
            self.funds = funds
        if acctcode is not None:
            self.acctcode = acctcode
        if issueroptionsmarketvalue is not None:
            self.issueroptionsmarketvalue = issueroptionsmarketvalue
        if key is not None:
            self.key = key
        if timestamp is not None:
            self.timestamp = timestamp
        if severity is not None:
            self.severity = severity

    @property
    def commoditymarketvalue(self):
        """Gets the commoditymarketvalue of this Ledger.  # noqa: E501


        :return: The commoditymarketvalue of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._commoditymarketvalue

    @commoditymarketvalue.setter
    def commoditymarketvalue(self, commoditymarketvalue):
        """Sets the commoditymarketvalue of this Ledger.


        :param commoditymarketvalue: The commoditymarketvalue of this Ledger.  # noqa: E501
        :type: float
        """

        self._commoditymarketvalue = commoditymarketvalue

    @property
    def futuremarketvalue(self):
        """Gets the futuremarketvalue of this Ledger.  # noqa: E501


        :return: The futuremarketvalue of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._futuremarketvalue

    @futuremarketvalue.setter
    def futuremarketvalue(self, futuremarketvalue):
        """Sets the futuremarketvalue of this Ledger.


        :param futuremarketvalue: The futuremarketvalue of this Ledger.  # noqa: E501
        :type: float
        """

        self._futuremarketvalue = futuremarketvalue

    @property
    def settledcash(self):
        """Gets the settledcash of this Ledger.  # noqa: E501


        :return: The settledcash of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._settledcash

    @settledcash.setter
    def settledcash(self, settledcash):
        """Sets the settledcash of this Ledger.


        :param settledcash: The settledcash of this Ledger.  # noqa: E501
        :type: float
        """

        self._settledcash = settledcash

    @property
    def exchangerate(self):
        """Gets the exchangerate of this Ledger.  # noqa: E501


        :return: The exchangerate of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._exchangerate

    @exchangerate.setter
    def exchangerate(self, exchangerate):
        """Sets the exchangerate of this Ledger.


        :param exchangerate: The exchangerate of this Ledger.  # noqa: E501
        :type: float
        """

        self._exchangerate = exchangerate

    @property
    def sessionid(self):
        """Gets the sessionid of this Ledger.  # noqa: E501


        :return: The sessionid of this Ledger.  # noqa: E501
        :rtype: int
        """
        return self._sessionid

    @sessionid.setter
    def sessionid(self, sessionid):
        """Sets the sessionid of this Ledger.


        :param sessionid: The sessionid of this Ledger.  # noqa: E501
        :type: int
        """

        self._sessionid = sessionid

    @property
    def cashbalance(self):
        """Gets the cashbalance of this Ledger.  # noqa: E501


        :return: The cashbalance of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._cashbalance

    @cashbalance.setter
    def cashbalance(self, cashbalance):
        """Sets the cashbalance of this Ledger.


        :param cashbalance: The cashbalance of this Ledger.  # noqa: E501
        :type: float
        """

        self._cashbalance = cashbalance

    @property
    def corporatebondsmarketvalue(self):
        """Gets the corporatebondsmarketvalue of this Ledger.  # noqa: E501


        :return: The corporatebondsmarketvalue of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._corporatebondsmarketvalue

    @corporatebondsmarketvalue.setter
    def corporatebondsmarketvalue(self, corporatebondsmarketvalue):
        """Sets the corporatebondsmarketvalue of this Ledger.


        :param corporatebondsmarketvalue: The corporatebondsmarketvalue of this Ledger.  # noqa: E501
        :type: float
        """

        self._corporatebondsmarketvalue = corporatebondsmarketvalue

    @property
    def warrantsmarketvalue(self):
        """Gets the warrantsmarketvalue of this Ledger.  # noqa: E501


        :return: The warrantsmarketvalue of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._warrantsmarketvalue

    @warrantsmarketvalue.setter
    def warrantsmarketvalue(self, warrantsmarketvalue):
        """Sets the warrantsmarketvalue of this Ledger.


        :param warrantsmarketvalue: The warrantsmarketvalue of this Ledger.  # noqa: E501
        :type: float
        """

        self._warrantsmarketvalue = warrantsmarketvalue

    @property
    def netliquidationvalue(self):
        """Gets the netliquidationvalue of this Ledger.  # noqa: E501


        :return: The netliquidationvalue of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._netliquidationvalue

    @netliquidationvalue.setter
    def netliquidationvalue(self, netliquidationvalue):
        """Sets the netliquidationvalue of this Ledger.


        :param netliquidationvalue: The netliquidationvalue of this Ledger.  # noqa: E501
        :type: float
        """

        self._netliquidationvalue = netliquidationvalue

    @property
    def interest(self):
        """Gets the interest of this Ledger.  # noqa: E501


        :return: The interest of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this Ledger.


        :param interest: The interest of this Ledger.  # noqa: E501
        :type: float
        """

        self._interest = interest

    @property
    def unrealizedpnl(self):
        """Gets the unrealizedpnl of this Ledger.  # noqa: E501


        :return: The unrealizedpnl of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._unrealizedpnl

    @unrealizedpnl.setter
    def unrealizedpnl(self, unrealizedpnl):
        """Sets the unrealizedpnl of this Ledger.


        :param unrealizedpnl: The unrealizedpnl of this Ledger.  # noqa: E501
        :type: float
        """

        self._unrealizedpnl = unrealizedpnl

    @property
    def stockmarketvalue(self):
        """Gets the stockmarketvalue of this Ledger.  # noqa: E501


        :return: The stockmarketvalue of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._stockmarketvalue

    @stockmarketvalue.setter
    def stockmarketvalue(self, stockmarketvalue):
        """Sets the stockmarketvalue of this Ledger.


        :param stockmarketvalue: The stockmarketvalue of this Ledger.  # noqa: E501
        :type: float
        """

        self._stockmarketvalue = stockmarketvalue

    @property
    def moneyfunds(self):
        """Gets the moneyfunds of this Ledger.  # noqa: E501


        :return: The moneyfunds of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._moneyfunds

    @moneyfunds.setter
    def moneyfunds(self, moneyfunds):
        """Sets the moneyfunds of this Ledger.


        :param moneyfunds: The moneyfunds of this Ledger.  # noqa: E501
        :type: float
        """

        self._moneyfunds = moneyfunds

    @property
    def currency(self):
        """Gets the currency of this Ledger.  # noqa: E501


        :return: The currency of this Ledger.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Ledger.


        :param currency: The currency of this Ledger.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def realizedpnl(self):
        """Gets the realizedpnl of this Ledger.  # noqa: E501


        :return: The realizedpnl of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._realizedpnl

    @realizedpnl.setter
    def realizedpnl(self, realizedpnl):
        """Sets the realizedpnl of this Ledger.


        :param realizedpnl: The realizedpnl of this Ledger.  # noqa: E501
        :type: float
        """

        self._realizedpnl = realizedpnl

    @property
    def funds(self):
        """Gets the funds of this Ledger.  # noqa: E501


        :return: The funds of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._funds

    @funds.setter
    def funds(self, funds):
        """Sets the funds of this Ledger.


        :param funds: The funds of this Ledger.  # noqa: E501
        :type: float
        """

        self._funds = funds

    @property
    def acctcode(self):
        """Gets the acctcode of this Ledger.  # noqa: E501


        :return: The acctcode of this Ledger.  # noqa: E501
        :rtype: str
        """
        return self._acctcode

    @acctcode.setter
    def acctcode(self, acctcode):
        """Sets the acctcode of this Ledger.


        :param acctcode: The acctcode of this Ledger.  # noqa: E501
        :type: str
        """

        self._acctcode = acctcode

    @property
    def issueroptionsmarketvalue(self):
        """Gets the issueroptionsmarketvalue of this Ledger.  # noqa: E501


        :return: The issueroptionsmarketvalue of this Ledger.  # noqa: E501
        :rtype: float
        """
        return self._issueroptionsmarketvalue

    @issueroptionsmarketvalue.setter
    def issueroptionsmarketvalue(self, issueroptionsmarketvalue):
        """Sets the issueroptionsmarketvalue of this Ledger.


        :param issueroptionsmarketvalue: The issueroptionsmarketvalue of this Ledger.  # noqa: E501
        :type: float
        """

        self._issueroptionsmarketvalue = issueroptionsmarketvalue

    @property
    def key(self):
        """Gets the key of this Ledger.  # noqa: E501


        :return: The key of this Ledger.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Ledger.


        :param key: The key of this Ledger.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def timestamp(self):
        """Gets the timestamp of this Ledger.  # noqa: E501


        :return: The timestamp of this Ledger.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Ledger.


        :param timestamp: The timestamp of this Ledger.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def severity(self):
        """Gets the severity of this Ledger.  # noqa: E501


        :return: The severity of this Ledger.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Ledger.


        :param severity: The severity of this Ledger.  # noqa: E501
        :type: int
        """

        self._severity = severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ledger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ledger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
