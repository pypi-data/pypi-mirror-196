# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20014(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login_type': 'float',
        'user_name': 'str',
        'user_id': 'float',
        'expire': 'float',
        'result': 'bool',
        'auth_time': 'float'
    }

    attribute_map = {
        'login_type': 'LOGIN_TYPE',
        'user_name': 'USER_NAME',
        'user_id': 'USER_ID',
        'expire': 'expire',
        'result': 'RESULT',
        'auth_time': 'AUTH_TIME'
    }

    def __init__(self, login_type=None, user_name=None, user_id=None, expire=None, result=None, auth_time=None):  # noqa: E501
        """InlineResponse20014 - a model defined in Swagger"""  # noqa: E501
        self._login_type = None
        self._user_name = None
        self._user_id = None
        self._expire = None
        self._result = None
        self._auth_time = None
        self.discriminator = None
        if login_type is not None:
            self.login_type = login_type
        if user_name is not None:
            self.user_name = user_name
        if user_id is not None:
            self.user_id = user_id
        if expire is not None:
            self.expire = expire
        if result is not None:
            self.result = result
        if auth_time is not None:
            self.auth_time = auth_time

    @property
    def login_type(self):
        """Gets the login_type of this InlineResponse20014.  # noqa: E501

        1 for Live, 2 for Paper  # noqa: E501

        :return: The login_type of this InlineResponse20014.  # noqa: E501
        :rtype: float
        """
        return self._login_type

    @login_type.setter
    def login_type(self, login_type):
        """Sets the login_type of this InlineResponse20014.

        1 for Live, 2 for Paper  # noqa: E501

        :param login_type: The login_type of this InlineResponse20014.  # noqa: E501
        :type: float
        """

        self._login_type = login_type

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse20014.  # noqa: E501

        Username  # noqa: E501

        :return: The user_name of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse20014.

        Username  # noqa: E501

        :param user_name: The user_name of this InlineResponse20014.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20014.  # noqa: E501

        User ID  # noqa: E501

        :return: The user_id of this InlineResponse20014.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20014.

        User ID  # noqa: E501

        :param user_id: The user_id of this InlineResponse20014.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    @property
    def expire(self):
        """Gets the expire of this InlineResponse20014.  # noqa: E501

        Time in milliseconds until session expires. Caller needs to call the again to re-validate session  # noqa: E501

        :return: The expire of this InlineResponse20014.  # noqa: E501
        :rtype: float
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this InlineResponse20014.

        Time in milliseconds until session expires. Caller needs to call the again to re-validate session  # noqa: E501

        :param expire: The expire of this InlineResponse20014.  # noqa: E501
        :type: float
        """

        self._expire = expire

    @property
    def result(self):
        """Gets the result of this InlineResponse20014.  # noqa: E501

        true if session was validated; false if not.  # noqa: E501

        :return: The result of this InlineResponse20014.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InlineResponse20014.

        true if session was validated; false if not.  # noqa: E501

        :param result: The result of this InlineResponse20014.  # noqa: E501
        :type: bool
        """

        self._result = result

    @property
    def auth_time(self):
        """Gets the auth_time of this InlineResponse20014.  # noqa: E501

        Time of session validation  # noqa: E501

        :return: The auth_time of this InlineResponse20014.  # noqa: E501
        :rtype: float
        """
        return self._auth_time

    @auth_time.setter
    def auth_time(self, auth_time):
        """Sets the auth_time of this InlineResponse20014.

        Time of session validation  # noqa: E501

        :param auth_time: The auth_time of this InlineResponse20014.  # noqa: E501
        :type: float
        """

        self._auth_time = auth_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20014, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20014):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
