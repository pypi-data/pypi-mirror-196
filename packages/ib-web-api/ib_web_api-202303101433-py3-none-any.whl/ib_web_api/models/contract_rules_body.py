# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractRulesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conid': 'str',
        'is_buy': 'bool'
    }

    attribute_map = {
        'conid': 'conid',
        'is_buy': 'isBuy'
    }

    def __init__(self, conid=None, is_buy=None):  # noqa: E501
        """ContractRulesBody - a model defined in Swagger"""  # noqa: E501
        self._conid = None
        self._is_buy = None
        self.discriminator = None
        self.conid = conid
        self.is_buy = is_buy

    @property
    def conid(self):
        """Gets the conid of this ContractRulesBody.  # noqa: E501

        IBKR contract identifier  # noqa: E501

        :return: The conid of this ContractRulesBody.  # noqa: E501
        :rtype: str
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this ContractRulesBody.

        IBKR contract identifier  # noqa: E501

        :param conid: The conid of this ContractRulesBody.  # noqa: E501
        :type: str
        """
        if conid is None:
            raise ValueError("Invalid value for `conid`, must not be `None`")  # noqa: E501

        self._conid = conid

    @property
    def is_buy(self):
        """Gets the is_buy of this ContractRulesBody.  # noqa: E501

        Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell Orders  # noqa: E501

        :return: The is_buy of this ContractRulesBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_buy

    @is_buy.setter
    def is_buy(self, is_buy):
        """Sets the is_buy of this ContractRulesBody.

        Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell Orders  # noqa: E501

        :param is_buy: The is_buy of this ContractRulesBody.  # noqa: E501
        :type: bool
        """
        if is_buy is None:
            raise ValueError("Invalid value for `is_buy`, must not be `None`")  # noqa: E501

        self._is_buy = is_buy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractRulesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractRulesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
