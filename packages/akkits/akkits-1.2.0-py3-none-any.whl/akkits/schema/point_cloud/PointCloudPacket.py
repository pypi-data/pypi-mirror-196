# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

from akkits.schema.point_cloud.PointCloud import PointCloud

np = import_numpy()


class PointCloudPacket(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PointCloudPacket()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPointCloudPacket(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # PointCloudPacket
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PointCloudPacket
    def FrameId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # PointCloudPacket
    def LidartsMs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PointCloudPacket
    def UnixtsMs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PointCloudPacket
    def PointClouds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = PointCloud()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PointCloudPacket
    def PointCloudsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PointCloudPacket
    def PointCloudsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0


def Start(builder):
    builder.StartObject(4)


def PointCloudPacketStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)


def AddFrameId(builder, frameId):
    builder.PrependUint16Slot(0, frameId, 0)


def PointCloudPacketAddFrameId(builder, frameId):
    """This method is deprecated. Please switch to AddFrameId."""
    return AddFrameId(builder, frameId)


def AddLidartsMs(builder, lidartsMs):
    builder.PrependFloat64Slot(1, lidartsMs, 0.0)


def PointCloudPacketAddLidartsMs(builder, lidartsMs):
    """This method is deprecated. Please switch to AddLidartsMs."""
    return AddLidartsMs(builder, lidartsMs)


def AddUnixtsMs(builder, unixtsMs):
    builder.PrependFloat64Slot(2, unixtsMs, 0.0)


def PointCloudPacketAddUnixtsMs(builder, unixtsMs):
    """This method is deprecated. Please switch to AddUnixtsMs."""
    return AddUnixtsMs(builder, unixtsMs)


def AddPointClouds(builder, pointClouds):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(pointClouds), 0
    )


def PointCloudPacketAddPointClouds(builder, pointClouds):
    """This method is deprecated. Please switch to AddPointClouds."""
    return AddPointClouds(builder, pointClouds)


def StartPointCloudsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def PointCloudPacketStartPointCloudsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPointCloudsVector(builder, numElems)


def End(builder):
    return builder.EndObject()


def PointCloudPacketEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
