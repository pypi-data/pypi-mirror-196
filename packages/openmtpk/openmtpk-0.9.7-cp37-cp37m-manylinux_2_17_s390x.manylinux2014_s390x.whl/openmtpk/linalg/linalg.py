# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _linalg
else:
    import _linalg

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _linalg.delete_SwigPyIterator

    def value(self):
        return _linalg.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _linalg.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _linalg.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _linalg.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _linalg.SwigPyIterator_equal(self, x)

    def copy(self):
        return _linalg.SwigPyIterator_copy(self)

    def next(self):
        return _linalg.SwigPyIterator_next(self)

    def __next__(self):
        return _linalg.SwigPyIterator___next__(self)

    def previous(self):
        return _linalg.SwigPyIterator_previous(self)

    def advance(self, n):
        return _linalg.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _linalg.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _linalg.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _linalg.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _linalg.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _linalg.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _linalg.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _linalg:
_linalg.SwigPyIterator_swigregister(SwigPyIterator)
class Vectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def add(self, a, b):
        return _linalg.Vectors_add(self, a, b)
    __swig_destroy__ = _linalg.delete_Vectors

# Register Vectors in _linalg:
_linalg.Vectors_swigregister(Vectors)
class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cols = property(_linalg.Matrix_cols_get, _linalg.Matrix_cols_set)
    rows = property(_linalg.Matrix_rows_get, _linalg.Matrix_rows_set)
    data = property(_linalg.Matrix_data_get, _linalg.Matrix_data_set)
    dim = property(_linalg.Matrix_dim_get, _linalg.Matrix_dim_set)
    num_elements = property(_linalg.Matrix_num_elements_get, _linalg.Matrix_num_elements_set)

    def __init__(self, *args):
        _linalg.Matrix_swiginit(self, _linalg.new_Matrix(*args))

    def __call__(self, row, col):
        return _linalg.Matrix___call__(self, row, col)

    def mult(self, target):
        return _linalg.Matrix_mult(self, target)

    def scalar_mult(self, scalar):
        return _linalg.Matrix_scalar_mult(self, scalar)

    def hadamard(self, target):
        return _linalg.Matrix_hadamard(self, target)

    def sqr_err(self):
        return _linalg.Matrix_sqr_err(self)

    def add(self, target):
        return _linalg.Matrix_add(self, target)

    def __add__(self, target):
        return _linalg.Matrix___add__(self, target)

    def scalar_add(self, scalar):
        return _linalg.Matrix_scalar_add(self, scalar)

    def __neg__(self):
        return _linalg.Matrix___neg__(self)

    def sub(self, target):
        return _linalg.Matrix_sub(self, target)

    def __sub__(self, target):
        return _linalg.Matrix___sub__(self, target)

    def __eq__(self, target):
        return _linalg.Matrix___eq__(self, target)

    def all(self):
        return _linalg.Matrix_all(self)

    def transpose(self):
        return _linalg.Matrix_transpose(self)

    def T(self):
        return _linalg.Matrix_T(self)

    def sum(self, *args):
        return _linalg.Matrix_sum(self, *args)

    def mean(self, *args):
        return _linalg.Matrix_mean(self, *args)

    def concatenate(self, target, dimension):
        return _linalg.Matrix_concatenate(self, target, dimension)

    def diag(self):
        return _linalg.Matrix_diag(self)

    def apply_func(self, function):
        return _linalg.Matrix_apply_func(self, function)

    def print_shape(self):
        return _linalg.Matrix_print_shape(self)

    def print_mtx(self):
        return _linalg.Matrix_print_mtx(self)

    def fill_index(self, val):
        return _linalg.Matrix_fill_index(self, val)
    __swig_destroy__ = _linalg.delete_Matrix

# Register Matrix in _linalg:
_linalg.Matrix_swigregister(Matrix)
class MatrixI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cols = property(_linalg.MatrixI_cols_get, _linalg.MatrixI_cols_set)
    rows = property(_linalg.MatrixI_rows_get, _linalg.MatrixI_rows_set)
    data = property(_linalg.MatrixI_data_get, _linalg.MatrixI_data_set)
    dim = property(_linalg.MatrixI_dim_get, _linalg.MatrixI_dim_set)
    num_elements = property(_linalg.MatrixI_num_elements_get, _linalg.MatrixI_num_elements_set)

    def __init__(self, *args):
        _linalg.MatrixI_swiginit(self, _linalg.new_MatrixI(*args))

    def __call__(self, row, col):
        return _linalg.MatrixI___call__(self, row, col)

    def mult(self, target):
        return _linalg.MatrixI_mult(self, target)

    def scalar_mult(self, scalar):
        return _linalg.MatrixI_scalar_mult(self, scalar)

    def hadamard(self, target):
        return _linalg.MatrixI_hadamard(self, target)

    def sqr_err(self):
        return _linalg.MatrixI_sqr_err(self)

    def add(self, target):
        return _linalg.MatrixI_add(self, target)

    def __add__(self, target):
        return _linalg.MatrixI___add__(self, target)

    def scalar_add(self, scalar):
        return _linalg.MatrixI_scalar_add(self, scalar)

    def __neg__(self):
        return _linalg.MatrixI___neg__(self)

    def sub(self, target):
        return _linalg.MatrixI_sub(self, target)

    def __sub__(self, target):
        return _linalg.MatrixI___sub__(self, target)

    def __eq__(self, target):
        return _linalg.MatrixI___eq__(self, target)

    def all(self):
        return _linalg.MatrixI_all(self)

    def transpose(self):
        return _linalg.MatrixI_transpose(self)

    def T(self):
        return _linalg.MatrixI_T(self)

    def sum(self, *args):
        return _linalg.MatrixI_sum(self, *args)

    def mean(self, *args):
        return _linalg.MatrixI_mean(self, *args)

    def concatenate(self, target, dimension):
        return _linalg.MatrixI_concatenate(self, target, dimension)

    def diag(self):
        return _linalg.MatrixI_diag(self)

    def apply_func(self, function):
        return _linalg.MatrixI_apply_func(self, function)

    def print_shape(self):
        return _linalg.MatrixI_print_shape(self)

    def print_mtx(self):
        return _linalg.MatrixI_print_mtx(self)

    def fill_index(self, val):
        return _linalg.MatrixI_fill_index(self, val)
    __swig_destroy__ = _linalg.delete_MatrixI

# Register MatrixI in _linalg:
_linalg.MatrixI_swigregister(MatrixI)
class mtx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def zeros(rows, cols):
        return _linalg.mtx_zeros(rows, cols)

    @staticmethod
    def ones(rows, cols):
        return _linalg.mtx_ones(rows, cols)

    @staticmethod
    def randn(rows, cols):
        return _linalg.mtx_randn(rows, cols)

    @staticmethod
    def rand(rows, cols):
        return _linalg.mtx_rand(rows, cols)
    __swig_destroy__ = _linalg.delete_mtx

# Register mtx in _linalg:
_linalg.mtx_swigregister(mtx)

