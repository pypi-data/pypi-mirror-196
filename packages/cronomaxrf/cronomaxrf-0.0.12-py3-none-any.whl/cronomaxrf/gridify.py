# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/30_Gridify-by-selection.ipynb.

# %% auto 0
__all__ = ['gridify', 'plot_the_problem']

# %% ../notebooks/30_Gridify-by-selection.ipynb 26
# python package for reading hdf5 files 
import h5py 

# python package for processing too-big-for-memory data 
import dask 
import dask.array as da  
#import dask_ndfilters 
from dask.diagnostics import ProgressBar 

# standard imports  
import re 
import os 

from . import read_datasets

import matplotlib.pyplot as plt 
import numpy as np 


def gridify(crono_filename, overwrite=False): 
    '''Export Crono maxrf file spectral data into regular spectral image hdf5 file. '''
    
    # Datamunger should be able to read these 
    MAXRF_IMAGE = '/spectra'
    MAXRF_ENERGIES = '/energies' 

    with h5py.File(crono_filename, mode='r') as fh: 

        # read spectra and energies from hdf5 dataset into (lazy) dask arrays  
        spectra = fh['/XRF/Spectra']
        dask_spectra = da.from_array(spectra) 
        energies = fh['/XRF/EnergyVector']
        dask_energies = da.from_array(energies)

        # load selected indices into memory as numpy array 
        selected = fh['/XRF/SpectraSelectedIndex'][:,:,0]  
        dask_gridified = dask_spectra.vindex[selected] # dask (lazy) fancy indexing 

        # create filename for saving to 
        ptrn = '\.[^\.]*$'  
        repl = '_GRIDIFIED.HDF5'
        gridified_filename = re.sub(ptrn, repl, crono_filename)
        
        # if file exists already 
        if os.path.exists(gridified_filename): 
            print(f'Overwriting existing file: {gridified_filename}...\n')
            os.remove(gridified_filename)

        # write gridified spectral image to hdf5 file 
        print(f'Converting \'{crono_filename}\':\n')
        
        print(f'(1/2) Writing dataset \'{MAXRF_IMAGE}\' with shape {dask_gridified.shape} to hdf5 file...') 
        with ProgressBar(): 
            dask_gridified.to_hdf5(gridified_filename, MAXRF_IMAGE)

        # also write channel energies to hdf5 file 
        print(f'(2/2) Writing dataset \'{MAXRF_ENERGIES}\' with shape {dask_energies.shape} to hdf5 file...')
        with ProgressBar(): 
            dask_energies.to_hdf5(gridified_filename, MAXRF_ENERGIES)
            
        filesize_MB = os.path.getsize(gridified_filename) // 1e6
        print(f'File size: {filesize_MB} MB') 
        
        # close input file handle (should not be necessa)
        fh.close()
            
        return gridified_filename

    
def plot_the_problem(crono_filename): 
    '''Create a plot that displays the (wobbly) motor positions of the scan. 
    
    Selected spectra that will be used for export to a regular grid are colored red. 
    '''
    
    
    datasets = read_datasets(crono_filename)

    #for i, d in enumerate(datasets):   
    #    star = ' '
    #    if i in [14, 17, 26, 28]: 
    #        star = '*'
    #        print(f' {star}[{i}] {d.name}')
#
    x, y, z = datasets[17][...].T 
    selected_array = datasets[28][...]
    selected_array = selected_array[:,:,0] 
    selected = selected_array.flatten()

    spectra = datasets[26][...]
    n_spectra, n_channels = spectra.shape

    height, width = selected_array.shape[0:2] 
    n_sel_spectra = height * width

    fig, ax = plt.subplots(figsize=[10, 10])
    
    ax.scatter(x, y, c='b', alpha=0.4, label=f'measured ({n_spectra} spectra)')
    ax.scatter(x[selected], y[selected], color='r', label=f'selected ({len(selected)} spectra)')
    ax.set_xlabel('X motor position (steps)')
    ax.set_ylabel('Y motor position (steps)')
    ax.legend(bbox_to_anchor=(1,1.04), loc="lower right")
    ax.set_title(f'Motor positions \n{crono_filename}') 
    
    plt.show()
    
   
