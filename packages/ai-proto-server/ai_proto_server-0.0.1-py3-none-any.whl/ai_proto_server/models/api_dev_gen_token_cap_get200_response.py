# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ai_proto_server.models.base_model_ import Model
from ai_proto_server.models.lang import Lang
from ai_proto_server import util

from ai_proto_server.models.lang import Lang  # noqa: E501

class ApiDevGenTokenCapGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complete_lang_list=None, gen_test_lang_list=None, convert_lang_list=None, explain_lang_list=None, fix_error_lang_list=None):  # noqa: E501
        """ApiDevGenTokenCapGet200Response - a model defined in OpenAPI

        :param complete_lang_list: The complete_lang_list of this ApiDevGenTokenCapGet200Response.  # noqa: E501
        :type complete_lang_list: List[Lang]
        :param gen_test_lang_list: The gen_test_lang_list of this ApiDevGenTokenCapGet200Response.  # noqa: E501
        :type gen_test_lang_list: List[Lang]
        :param convert_lang_list: The convert_lang_list of this ApiDevGenTokenCapGet200Response.  # noqa: E501
        :type convert_lang_list: List[Lang]
        :param explain_lang_list: The explain_lang_list of this ApiDevGenTokenCapGet200Response.  # noqa: E501
        :type explain_lang_list: List[Lang]
        :param fix_error_lang_list: The fix_error_lang_list of this ApiDevGenTokenCapGet200Response.  # noqa: E501
        :type fix_error_lang_list: List[Lang]
        """
        self.openapi_types = {
            'complete_lang_list': List[Lang],
            'gen_test_lang_list': List[Lang],
            'convert_lang_list': List[Lang],
            'explain_lang_list': List[Lang],
            'fix_error_lang_list': List[Lang]
        }

        self.attribute_map = {
            'complete_lang_list': 'completeLangList',
            'gen_test_lang_list': 'genTestLangList',
            'convert_lang_list': 'convertLangList',
            'explain_lang_list': 'explainLangList',
            'fix_error_lang_list': 'fixErrorLangList'
        }

        self._complete_lang_list = complete_lang_list
        self._gen_test_lang_list = gen_test_lang_list
        self._convert_lang_list = convert_lang_list
        self._explain_lang_list = explain_lang_list
        self._fix_error_lang_list = fix_error_lang_list

    @classmethod
    def from_dict(cls, dikt) -> 'ApiDevGenTokenCapGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _api_dev_genToken_cap_get_200_response of this ApiDevGenTokenCapGet200Response.  # noqa: E501
        :rtype: ApiDevGenTokenCapGet200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complete_lang_list(self):
        """Gets the complete_lang_list of this ApiDevGenTokenCapGet200Response.

        代码补全支持的编程语言列表  # noqa: E501

        :return: The complete_lang_list of this ApiDevGenTokenCapGet200Response.
        :rtype: List[Lang]
        """
        return self._complete_lang_list

    @complete_lang_list.setter
    def complete_lang_list(self, complete_lang_list):
        """Sets the complete_lang_list of this ApiDevGenTokenCapGet200Response.

        代码补全支持的编程语言列表  # noqa: E501

        :param complete_lang_list: The complete_lang_list of this ApiDevGenTokenCapGet200Response.
        :type complete_lang_list: List[Lang]
        """
        if complete_lang_list is None:
            raise ValueError("Invalid value for `complete_lang_list`, must not be `None`")  # noqa: E501

        self._complete_lang_list = complete_lang_list

    @property
    def gen_test_lang_list(self):
        """Gets the gen_test_lang_list of this ApiDevGenTokenCapGet200Response.

        生成测试代码支持的编程语言列表  # noqa: E501

        :return: The gen_test_lang_list of this ApiDevGenTokenCapGet200Response.
        :rtype: List[Lang]
        """
        return self._gen_test_lang_list

    @gen_test_lang_list.setter
    def gen_test_lang_list(self, gen_test_lang_list):
        """Sets the gen_test_lang_list of this ApiDevGenTokenCapGet200Response.

        生成测试代码支持的编程语言列表  # noqa: E501

        :param gen_test_lang_list: The gen_test_lang_list of this ApiDevGenTokenCapGet200Response.
        :type gen_test_lang_list: List[Lang]
        """
        if gen_test_lang_list is None:
            raise ValueError("Invalid value for `gen_test_lang_list`, must not be `None`")  # noqa: E501

        self._gen_test_lang_list = gen_test_lang_list

    @property
    def convert_lang_list(self):
        """Gets the convert_lang_list of this ApiDevGenTokenCapGet200Response.

        转换编程语言的支持列表  # noqa: E501

        :return: The convert_lang_list of this ApiDevGenTokenCapGet200Response.
        :rtype: List[Lang]
        """
        return self._convert_lang_list

    @convert_lang_list.setter
    def convert_lang_list(self, convert_lang_list):
        """Sets the convert_lang_list of this ApiDevGenTokenCapGet200Response.

        转换编程语言的支持列表  # noqa: E501

        :param convert_lang_list: The convert_lang_list of this ApiDevGenTokenCapGet200Response.
        :type convert_lang_list: List[Lang]
        """
        if convert_lang_list is None:
            raise ValueError("Invalid value for `convert_lang_list`, must not be `None`")  # noqa: E501

        self._convert_lang_list = convert_lang_list

    @property
    def explain_lang_list(self):
        """Gets the explain_lang_list of this ApiDevGenTokenCapGet200Response.

        代码解释支持的编程语言列表  # noqa: E501

        :return: The explain_lang_list of this ApiDevGenTokenCapGet200Response.
        :rtype: List[Lang]
        """
        return self._explain_lang_list

    @explain_lang_list.setter
    def explain_lang_list(self, explain_lang_list):
        """Sets the explain_lang_list of this ApiDevGenTokenCapGet200Response.

        代码解释支持的编程语言列表  # noqa: E501

        :param explain_lang_list: The explain_lang_list of this ApiDevGenTokenCapGet200Response.
        :type explain_lang_list: List[Lang]
        """
        if explain_lang_list is None:
            raise ValueError("Invalid value for `explain_lang_list`, must not be `None`")  # noqa: E501

        self._explain_lang_list = explain_lang_list

    @property
    def fix_error_lang_list(self):
        """Gets the fix_error_lang_list of this ApiDevGenTokenCapGet200Response.

        根据错误提示给出修复方案支持的编程语言列表  # noqa: E501

        :return: The fix_error_lang_list of this ApiDevGenTokenCapGet200Response.
        :rtype: List[Lang]
        """
        return self._fix_error_lang_list

    @fix_error_lang_list.setter
    def fix_error_lang_list(self, fix_error_lang_list):
        """Sets the fix_error_lang_list of this ApiDevGenTokenCapGet200Response.

        根据错误提示给出修复方案支持的编程语言列表  # noqa: E501

        :param fix_error_lang_list: The fix_error_lang_list of this ApiDevGenTokenCapGet200Response.
        :type fix_error_lang_list: List[Lang]
        """
        if fix_error_lang_list is None:
            raise ValueError("Invalid value for `fix_error_lang_list`, must not be `None`")  # noqa: E501

        self._fix_error_lang_list = fix_error_lang_list
