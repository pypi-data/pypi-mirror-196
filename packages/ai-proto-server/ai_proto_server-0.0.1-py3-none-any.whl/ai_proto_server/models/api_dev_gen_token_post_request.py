# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ai_proto_server.models.base_model_ import Model
from ai_proto_server import util


class ApiDevGenTokenPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_value=None, random_str=None, secret=None):  # noqa: E501
        """ApiDevGenTokenPostRequest - a model defined in OpenAPI

        :param context_value: The context_value of this ApiDevGenTokenPostRequest.  # noqa: E501
        :type context_value: str
        :param random_str: The random_str of this ApiDevGenTokenPostRequest.  # noqa: E501
        :type random_str: str
        :param secret: The secret of this ApiDevGenTokenPostRequest.  # noqa: E501
        :type secret: str
        """
        self.openapi_types = {
            'context_value': str,
            'random_str': str,
            'secret': str
        }

        self.attribute_map = {
            'context_value': 'contextValue',
            'random_str': 'randomStr',
            'secret': 'secret'
        }

        self._context_value = context_value
        self._random_str = random_str
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt) -> 'ApiDevGenTokenPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiDevGenTokenPost_request of this ApiDevGenTokenPostRequest.  # noqa: E501
        :rtype: ApiDevGenTokenPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_value(self):
        """Gets the context_value of this ApiDevGenTokenPostRequest.

        上下文信息  # noqa: E501

        :return: The context_value of this ApiDevGenTokenPostRequest.
        :rtype: str
        """
        return self._context_value

    @context_value.setter
    def context_value(self, context_value):
        """Sets the context_value of this ApiDevGenTokenPostRequest.

        上下文信息  # noqa: E501

        :param context_value: The context_value of this ApiDevGenTokenPostRequest.
        :type context_value: str
        """
        if context_value is None:
            raise ValueError("Invalid value for `context_value`, must not be `None`")  # noqa: E501

        self._context_value = context_value

    @property
    def random_str(self):
        """Gets the random_str of this ApiDevGenTokenPostRequest.

        随机字符串，加密因子。需要32位长度以上  # noqa: E501

        :return: The random_str of this ApiDevGenTokenPostRequest.
        :rtype: str
        """
        return self._random_str

    @random_str.setter
    def random_str(self, random_str):
        """Sets the random_str of this ApiDevGenTokenPostRequest.

        随机字符串，加密因子。需要32位长度以上  # noqa: E501

        :param random_str: The random_str of this ApiDevGenTokenPostRequest.
        :type random_str: str
        """
        if random_str is None:
            raise ValueError("Invalid value for `random_str`, must not be `None`")  # noqa: E501

        self._random_str = random_str

    @property
    def secret(self):
        """Gets the secret of this ApiDevGenTokenPostRequest.

        共享密钥  # noqa: E501

        :return: The secret of this ApiDevGenTokenPostRequest.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ApiDevGenTokenPostRequest.

        共享密钥  # noqa: E501

        :param secret: The secret of this ApiDevGenTokenPostRequest.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret
