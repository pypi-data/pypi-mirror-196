# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ai_proto_server.models.base_model_ import Model
from ai_proto_server import util


class ApiDevGenTokenPost200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token=None):  # noqa: E501
        """ApiDevGenTokenPost200Response - a model defined in OpenAPI

        :param token: The token of this ApiDevGenTokenPost200Response.  # noqa: E501
        :type token: str
        """
        self.openapi_types = {
            'token': str
        }

        self.attribute_map = {
            'token': 'token'
        }

        self._token = token

    @classmethod
    def from_dict(cls, dikt) -> 'ApiDevGenTokenPost200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiDevGenTokenPost_200_response of this ApiDevGenTokenPost200Response.  # noqa: E501
        :rtype: ApiDevGenTokenPost200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this ApiDevGenTokenPost200Response.

        登录凭证  # noqa: E501

        :return: The token of this ApiDevGenTokenPost200Response.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ApiDevGenTokenPost200Response.

        登录凭证  # noqa: E501

        :param token: The token of this ApiDevGenTokenPost200Response.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token
