from typing import Optional, Dict, Union
from devcontainer_contrib.models.devcontainer_feature import FeatureOption
from easyfs import File
from devcontainer_contrib.models.devcontainer_feature_definition import (
    FeatureDependencies,
    FeatureDependency,
)

FEATMAKE_LINK = (
    "https://github.com/devcontainers-contrib/cli/releases/download/v0.0.19/featmake"
)
CHECKSUM_LINK = "https://github.com/devcontainers-contrib/cli/releases/download/v0.0.19/checksums.txt"

HEADER = """#!/usr/bin/env bash
# This code was generated by the devconainer-contrib cli 
# For more information: https://github.com/devcontainers-contrib/cli 

set -e

ensure_curl () {{
    if ! type curl >/dev/null 2>&1; then
        apt-get update -y && apt-get -y install --no-install-recommends curl ca-certificates
    fi 
}}


ensure_featmake () {{
    if ! type featmake > /dev/null 2>&1; then
        temp_dir=/tmp/featmake-download
        mkdir -p $temp_dir

        curl -sSL -o $temp_dir/featmake {featmake_link} 
        curl -sSL -o $temp_dir/checksums.txt {checksums_link}

        (cd $temp_dir ; sha256sum --check --strict $temp_dir/checksums.txt)

        chmod a+x $temp_dir/featmake
        mv -f $temp_dir/featmake /usr/local/bin/featmake

        rm -rf $temp_dir
    fi
}}

ensure_curl

ensure_featmake

# refresh PATH 
PS1='\\s-\\v\\$' source /etc/profile

{dependency_installation_lines}
"""

SINGLE_DEPENDENCY = """# installing {feature_oci}
featmake "{feature_oci}" {stringified_envs_args} 
"""


class DependenciesSH(File):
    REF_PREFIX = "$options."

    def __init__(
        self,
        dependencies: Optional[FeatureDependencies],
        options: Optional[Dict[str, FeatureOption]],
    ) -> None:
        self.dependencies = dependencies
        self.options = options
        super().__init__(content=self.to_str().encode())

    @staticmethod
    def _escape_qoutes(value: str) -> str:
        return value.replace('"', '\\"')

    @staticmethod
    def is_param_ref(param_value: str) -> bool:
        return param_value.startswith(DependenciesSH.REF_PREFIX)

    def create_install_command(
        self, feature_oci: str, params: Dict[str, Union[str, bool]]
    ) -> str:
        envs = {}
        for param_name, param_value in params.items():
            if isinstance(param_value, str):
                envs[param_name.upper()] = param_value
            else:
                envs[param_name.upper()] = str(param_value).lower()

        stringified_envs_args = " ".join(
            [
                f'-{env} "{DependenciesSH._escape_qoutes(val)}"'
                for env, val in envs.items()
            ]
        )

        return SINGLE_DEPENDENCY.format(
            stringified_envs_args=stringified_envs_args, feature_oci=feature_oci
        )

    @staticmethod
    def resolve_param_ref(
        param_ref: str, options: Optional[Dict[str, FeatureOption]]
    ) -> str:
        if options is None:
            raise ValueError(
                f"option reference was given: '{param_ref}' but no options exists"
            )

        option_name = param_ref.replace(DependenciesSH.REF_PREFIX, "")

        option = options.get(option_name, None)
        if option is None:
            raise ValueError(
                f"could not resolve option reference: '{param_ref}' please ensure you spelled the option name right ({option})"
            )
        return f"${option_name}".upper()

    def to_str(self) -> str:
        if self.dependencies is None or len(self.dependencies) == 0:
            return ""

        installation_lines = []
        for feature_dependency in self.dependencies:
            feature_dependency: FeatureDependency
            resolved_params = {}
            for param_name, param_value in feature_dependency.options.items():
                if isinstance(param_value, str):
                    if DependenciesSH.is_param_ref(param_value):
                        param_value = DependenciesSH.resolve_param_ref(
                            param_value, self.options
                        )

                resolved_params[param_name] = param_value
            installation_lines.append(
                self.create_install_command(feature_dependency.feature, resolved_params)
            )

        return HEADER.format(
            dependency_installation_lines="\n# refresh PATH\nPS1='\\s-\\v\\$' source /etc/profile\n".join(
                installation_lines
            ),
            featmake_link=FEATMAKE_LINK,
            checksums_link=CHECKSUM_LINK,
        )
