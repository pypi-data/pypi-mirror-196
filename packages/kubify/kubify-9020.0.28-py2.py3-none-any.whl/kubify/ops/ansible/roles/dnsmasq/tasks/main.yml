---


- name: check if running in wsl2
  shell: cat /proc/version | grep -i microsoft
  register: check_if_running_in_wsl2
  ignore_errors: true

- name: check dnsmasq location - Linux
  stat:
    path: /etc/NetworkManager/dnsmasq.d
  register: dnsmasq_linux_is_in_network_manager

- set_fact:
    dir_dnsmasq_linux: "{{ '/etc/NetworkManager' if dnsmasq_linux_is_in_network_manager.stat.exists else '/etc' }}"
    linux_dir_dnsmasq: "{{ '/etc/NetworkManager/dnsmasq.d' if dnsmasq_linux_is_in_network_manager.stat.exists else '/etc' }}"

- set_fact:
    dir_dnsmasq: "{{ '/usr/local/etc' if ansible_os_family == 'Darwin' else linux_dir_dnsmasq }}"
    file_dnsmasq: "{{ 'dnsmasq.conf' if ansible_os_family == 'Darwin' else 'kubify.conf' }}"

# TODO: what about when there is no networkmanager, make sure all edge cases are tested and stable..
- name: create NetworkManager dnsmasq config for Kubify
  become: yes
  file:
    path: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
    state: touch
  when: ansible_os_family == "Debian"

################################################################################
# This part is configured in `kubify install` for Linux
################################################################################
#TODO (more urgent for WSL2): Do we need the linux versions of these?
- name: Add *.{{ local_domain }} resolver port
  become: yes
  lineinfile:
    state: present
    line: port 5354
    create: yes
    dest: /etc/resolver/{{ local_domain }}
    owner: root
    group: wheel
  when: ansible_os_family == "Darwin"

  
- name: Add *.{{ local_domain }} resolver address
  become: yes
  lineinfile:
    state: present
    line: nameserver 127.0.0.1
    create: yes
    dest: /etc/resolver/{{ local_domain }}
    owner: root
    group: wheel
  when: ansible_os_family == "Darwin"

- name: Add listen address config
  become: yes
  lineinfile:
    state: present
    line: listen-address=127.0.0.1
    create: yes
    dest: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
    owner: root
    group: wheel
  when: ansible_os_family == "Darwin"

- name: Add listen port config
  become: yes
  lineinfile:
    state: present
    line: port=5354
    create: yes
    dest: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
    owner: root
    group: wheel
  when: ansible_os_family == "Darwin"


# # When debugging dnsmasq: You might have to turn this service back on..
# - name: stop & disable systemd-resolved service
#   become: yes
#   systemd:
#     name: systemd-resolved
#     state: stopped
#     enabled: no
#   when: ansible_os_family != "Darwin"

# dnsmasq is included/bundled in network-manager, so commenting next lines
# - name: start & enable dnsmasq service
#   become: yes
#   systemd:
#     name: dnsmasq
#     state: started
#     enabled: yes
#   when: ansible_os_family != "Darwin"

- name: set dnsmasq as default dns in NetworkManager
  become: yes
  lineinfile:
    path: "{{ dir_dnsmasq_linux }}/NetworkManager.conf"
    regexp: 'dns*'
    insertafter: '\[main\]'
    line: "dns=dnsmasq"
  when: nm_conf.stat.exists
  register: dnsmasq_update
  when: 
    - ansible_os_family != "Darwin"
    - check_if_running_in_wsl2 is failed


- name: restart NetworkManager
  become: yes
  systemd:
    name: NetworkManager
    state: restarted
  when: dnsmasq_update.changed
  register: nm_restart
  ignore_errors: True
  when: 
    - ansible_os_family != "Darwin"
    - check_if_running_in_wsl2 is failed

  #
################################################################################

- name: Remove stale resolver entries for *.{{ local_domain }}
  become: yes
  lineinfile:
    state: absent
    regexp: ^address=/\.{{ local_domain | replace(".", "\.") }}/.*
    create: no
    dest: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
  register: config_change_1

- name: Resolve *.{{ local_domain }} to Cluster IP
  become: yes
  lineinfile:
    state: present
    line: address=/.{{ local_domain }}/{{ cluster_ip }}
    create: yes
    dest: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
  register: config_change_2

- name: Get dnsmasq PID
  shell: "ps -ef | grep -v grep | grep /dnsmasq | awk '{print $2}'"
  register: running_processes
  when: ansible_os_family == "Darwin"

- name: Kill dnsmasq
  shell: "kill {{ item }}"
  become: yes
  with_items: "{{ running_processes.stdout_lines }}"
  when: ansible_os_family == "Darwin"

- name: Wait for dnsmasq to terminate
  wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  with_items: "{{ running_processes.stdout_lines }}"
  ignore_errors: true
  register: killed_processes
  when: ansible_os_family == "Darwin"

- name: Ensure dnsmasq is really killed
  become: yes
  shell: "kill -9 {{ item }}"
  with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
  when: ansible_os_family == "Darwin"

# - name: Workaround Mac Git M1 Folder Random Create
#   become: no
#   command: mv ~/.gitconfig ~/.gitconfig_BACKUP
#   ignore_errors: true

- name: Restart dnsmasq as user (for running)
  become: no
  command: brew services restart dnsmasq
  when: ansible_os_family == "Darwin"

- name: Restart dnsmasq as sudo (to also enable start on boot)
  become: yes
  command: brew services restart dnsmasq
  when: ansible_os_family == "Darwin"

- name: restart NetworkManager (dnsmasq) for Ubuntu
  become: yes
  systemd:
    name: NetworkManager
    state: restarted
  register: dnsmasq_update
  when:
    - ansible_os_family != "Darwin"
    - check_if_running_in_wsl2 is failed
  ignore_errors: true

# - name: Make sure Dnsmasq is running
#   service:
#     name: dnsmasq
#     state: started
#     enabled: yes
#   tags: dnsmasq
#   when:
#     - ansible_os_family != "Darwin"
#     - check_if_running_in_wsl2 is failed

- name: restart NetworkManager again
  become: yes
  systemd:
    name: NetworkManager
    state: restarted
  when: dnsmasq_update.changed
  register: nm_restart
  when: 
    - ansible_os_family != "Darwin"
    - check_if_running_in_wsl2 is failed
  ignore_errors: true

# # This tries to open an internet connection for up to 30 seconds before failure.
# - name: wait for network connection to come back up and test dns
#   wait_for:
#     host: kubify.com
#     port: 53
#     timeout: 30
#     msg: |
#       "Waiting for (up to 30s) for Internet to come back up. Please check"
#       "README.md for troubleshooting steps if you see this"
#   when: dnsmasq_update.changed
