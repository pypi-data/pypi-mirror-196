# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['cincodex']
setup_kwargs = {
    'name': 'cincodex',
    'version': '0.1.0',
    'description': 'Simple, flexible, and unopinionated plugin system for Python projects.',
    'long_description': '# cincodex\n\n[![Build Status](https://gitlab.com/ameily/cincodex/badges/main/pipeline.svg)](https://gitlab.com/ameily/cincodex/-/pipelines/main/latest)\n[![Test Coverage](https://gitlab.com/ameily/cincodex/badges/main/coverage.svg)](https://gitlab.com/ameily/cincodex/-/pipelines/main/latest)\n[![Read The Docs](https://readthedocs.org/projects/cincodex/badge/?version=latest&style=flat)](https://cincodex.readthedocs.io/en/latest/)\n[![Latest Release](https://gitlab.com/ameily/cincodex/-/badges/release.svg)](https://gitlab.com/ameily/cincodex/-/releases)\n[![Python Version](https://img.shields.io/badge/python-3.10%2B-blueviolet)](https://www.python.org/downloads/release/python-31010/)\n[![MIT License](https://img.shields.io/badge/license-MIT-9cf)](/ameily/cincodex/-/blob/main/LICENSE)\n\nCincodex is a simple, flexible, and unopinionated plugin system for Python projects. Cincodex is designed for both applications and libraries that wish to be extensible at runtime. Plugins can be any Python object including a class, a function, or an instance of an object. The following is a very basic example showing that the application creates a Codex, which is the plugin system, then discovers all available plugins within the `./plugins` directory, and the `./plugins/foo/bar.py` source file registers a function with the codex.\n\n```python\n# app.py\nfrom cincodex import Codex, register_codex\n\ncodex = Codex(\'my_app\')\nregister_codex(codex)\n\n# discover all plugins\ncodex.discover_plugins(\'./plugins\')\n\n# after this, the `foo.bar` plugin is available and we can call it.\nplugin = codex.get(\'foo.bar\')\nplugin()\n# \'Hello world!\'\n\n\n# ./plugins/foo/bar.py\nfrom app import codex\n\n@codex.register\n@codex.metadata(id=\'foo.bar\')\ndef foo_bar_plugin():\n    print(\'Hello world!\')\n```\n\nCincodex has been tested on Linux and Windows systems but should support other operating systems as well. Cincodex supports Python 3.10 and newer.\n\n## Installation\n\n```bash\npip install cincodex\n```\n\n## Features\n\n* Cincodex is designed to work with multiple Python packages within a single project. For example, an application can have its own plugin system a multiple dependencies can have their own plugin system and they will not interfere with each other.\n* Cincodex automatically discovers and registers all available plugins within one or more root directories.\n* The method of finding and loading plugins and registering their metadata are all extensible within cincodex. Easily customize the plugin metadata and change how plugins are loaded.\n* The `import` statement and machinery continues to work properly for discovered plugins, supporting both relative and absolute imports within plugins.\n* A plugin is anything: a class, a function, or an object instance. Cincodex works seamlessly with all plugin types.\n\n### A more complete example\n\nThe following is a cincodex plugin system where:\n\n* A plugin base class that all plugin must implement. Each plugin says "hello" in a different language.\n* A custom plugin metadata class\n* Loading plugin from multiple directories\n\n**`hello.py`**\n\nThis module defines the plugin metadata, plugin base class, and codex.\n\n```python\n#\n# hello.py\n#\nfrom cincodex import Codex, PluginMetadata, register_codex\n\n\n# First we create a custom plugin metadata class, inheriting from cincodex `PluginMetadata`\nclass HelloPluginMetadata(PluginMetadata):\n    def __init__(self, id: str, *, lang: str):\n        super().__init__(id)\n        self.lang = lang\n\n\n# Our plugin system will be class based. So, next we create a base class that all plugins must\n# inherit from and implement the `say_hello` method.\nclass HelloPlugin:\n    # __plugin_metadata__ is always set by cincodex with the call to `Codex.register`. We include\n    # the field here so that the IDE / type checking knows that __plugin_metadata__ is a class\n    # attribute.\n    __plugin_metadata__: HelloPluginMetadata\n\n    def say_hello(self) -> None:\n        raise NotImplementedError()\n\n\n# Create and register the codex\ncodex: Codex[type[HelloPlugin], HelloPluginMetadata] = Codex(\'hello\', HelloPluginMetadata)\nregister_codex(codex)\n```\n\n**`builtin_plugins/english.py`**\n\nDefines a plugin that says "hello" in English.\n\n```python\n#\n# ./builtin_plugins/english.py\n#\nfrom hello import HelloPlugin, codex\n\n\n@codex.register\n@codex.metadata(\'lang.english\', lang=\'en-us\')\nclass EnglishHello(HelloPlugin):\n    def say_hello(self):\n        name = input(\'What is your name? > \')\n        print(\'Hello,\', name)\n```\n\n**`./contrib_plugins/german.py`**\n\nDefines a plugin that says "hello" in German.\n\n```python\n#\n# ./contrib_plugins/german.py\n#\nfrom hello import HelloPlugin\n\nfrom cincodex import get_codex\n\n# We registered the codex so we don\'t technically need to import it\ncodex = get_codex(\'hello\')\n\n\n@codex.register\n@codex.metadata(\'lang.german\', lang=\'de\')\nclass GermanLang(HelloPlugin):\n    def say_hello(self):\n        name = input(\'Wie heissen sie? > \')\n        print(\'Guten tag,\', name)\n```\n\n**`app.py`**\n\nApplication script that discovers both builtin and contributed plugins and runs each sequentially.\n\n```python\n#\n# app.py\n#\nif __name__ == \'__main__\':\n    from hello import HelloPluginMetadata, codex\n\n    # Discover builtin and contributed plugins\n    codex.discover_plugins(\'./builtin_plugins\')\n    codex.discover_plugins(\'./contrib_plugins\')\n\n    # iterate over all available plugins\n    for plugin_cls in codex:\n        # `plugin_cls` is a type[HelloPlugin]\n        # get the plugin metadata\n        metadata = HelloPluginMetadata.get(plugin_cls)\n        # our codex registers plugin *classes*, so we need to first instantiate an instance of this\n        # plugin\n        plugin = plugin_cls()\n        print(f\'Running plugin: {metadata.id} (lang: {metadata.lang})\')\n        plugin.say_hello()\n        print()\n\n```\n\nIn this example, running `python app.py` will output the following:\n\n```\n$ python app.py\n\nRunning plugin: lang.english (lang: en-us)\nWhat is your name? > Adam\nHello, Adam\n\nRunning plugin: lang.german (lang: de)\nWie heissen sie? > Wolfgang\nGuten tag, Wolfgang\n```\n\nThis example is available in the `example_app` directory.\n\n### API Documentation\n\nCincodex API documentation is generated by Sphinx and hosted on [Read the Docs](https://cincodex.readthedocs.io/en/latest/). The API documentation includes more detailed and complex examples and information on how to extend cincodex.\n\n## License\n\nCincodex is licensed under the MIT permissive license.\n\n<!--\ncspell:ignore heissen Guten\n-->\n',
    'author': 'Adam Meily',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://gitlab.com/ameily/cincodex',
    'py_modules': modules,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
