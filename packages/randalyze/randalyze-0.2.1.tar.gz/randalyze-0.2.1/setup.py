# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['randalyze', 'randalyze.analyzers', 'randalyze.generators']

package_data = \
{'': ['*']}

entry_points = \
{'console_scripts': ['randalyze = randalyze.__main__:main']}

setup_kwargs = {
    'name': 'randalyze',
    'version': '0.2.1',
    'description': 'Create series of random numbers fitting a specified distribution, and then analyze them.',
    'long_description': '# Randalyze - Random Number Generator And Analyzer\n\n## What Does Randalyze Do?\n\nRandalyze is a Python module that you can import or use directly from the command line to generate a set of random numbers. These numbers will fit a specified distribution, rather than just being evenly distributed.\n\nIt also allows you to analyze a set of numbers, to see which distribution they match.\n\nAt the moment, the only distribution that Randalyze handles is Benford\'s Law. It\'s a counter-intuitive distribution that numbers from the real world tend to follow. So, if you want to see whether invoice totals, numbers of incidents, traffic counts, etc. are realistic, analyze them using Randalyze. Checking against Benford\'s Law is good enough for auditors, so there\'s definitely something to it!\n\n## Installation\n\nRandalyze supports Python 3.8 and later, so you can install it on Windows 7 if you want. It doesn\'t support Python 2.7.\n\nTo install Randalyze, create a virtual environment and use `pip`:\n\n```bash\npip install randalyze\n```\n\n## Usage\n\n### Command Line Usage\n\n#### Generating Random Numbers\n\nThe `generate` command creates a number of random numbers. The type of generator must be specified - currently the only option is `benford`, and the number (or count) of numbers generated is specified with the `-c` option.\n\nFor example, to generate 100 random numbers with a Benford distribution, the following command line can be used:\n\n```bash\nrandalyze generate -c 100 benford\n```\n\nor, if you\'re not using an active virtual environment:\n\n```bash\npython -m randalyze generate -c 100 benford\n```\n\nFor detailled parameter descriptions, use:\n\n```bash\nrandalyze --help\nrandalyze generate --help\n```\n\nOne parameter worth noting is `-a`, or `--adjustments`. Benford\'s Law applies when a quantity of individual numbers are combined, for example in a votes across a number of regions, an invoice, or a number of individuals infected with a disease on particular date. The value of the `adjustments` parameter corresponds with how many numbers are combined to produce the final result. The higher this value, the more closely the generated numbers are likely to correspond to Benford\'s Law, but the longer it will take to generate the numbers. A lower number of adjustments will produce faster results, but they may not adhere as closely to Benford\'s Law.\n\n##### Output Format\n\nRandalyzer sends all of its output to `stdout`, to allow the output to be piped to other processes. It can output the numbers it generates in any of the following formats:\n\n###### Plain Text\n\nThis is an ideal format to pipe to other processes, including `randalyze analyze`. Numbers are separated by a newline character, e.g.:\n\n```text\n0.02983916017598411\n0.013551386905062924\n0.00024998215041082837\n0.005491804395091004\n0.02466273019653459\n0.0063846564027225435\n0.0016043375532727268\n0.0026923403623502775\n0.024469531291955015\n0.003059618929054221\n0.046573520246102486\n0.0007443706751732054\n6.522095130906779e-06\n0.03635226424464967\n0.0013066769632407483\n0.008161073155635998\n0.0382949028445558\n0.007312698653941686\n0.0028210034630940573\n0.022493548691029038\n```\n\nYou can also use the `-w` / `--whole-digits` and `-d` / `--fraction-digits` to specify the maximum number of digit in the whole and fraction part of the numbers respectively. For example:\n\n```bash\nrandalyze generate benford -c 10 -w 7 -d 2\n```\n\nwill output a list of 10 numbers, with a maximum of 7 digits before the decimal point and 2 afterwards, e.g.:\n\n```text\n20199.5\n207302.05\n183079.86\n307597.46\n1516574.65\n1029.38\n1442196.64\n374390.6\n91128.55\n33184.82\n```\n\n###### JSON\n\nIf you\'re passing the data around between processes and straightforward piping is not the answer, JSON format can be produced instead:\n\n```json\n[0.021875574255089396,0.01363138644672022,0.04880603372115697,0.00044507604221987146,0.0276700261238657,0.03214714230191736,0.02915457360778051,0.04708394499413024,0.0001520800546499388,0.0008435362137085937,0.008981908758960934,0.025213372748772594,0.2523350721739971,0.001618197247836204,0.009578408659261814,0.02682977173023309,0.043980297143841836,0.010087407530137727,0.022770430657528977,0.007422951888962673]\n```\n\n###### CSV\n\nIf you want to import the generated data into a process that requires CSV data, generate it in CSV format:\n\n```csv\nnumbers,\n0.046614057519653466,\n0.03791869719865344,\n0.0384657633546525,\n2.855767617145996e-05,\n0.01146753335163042,\n0.03691158797807547,\n0.003926152675269877,\n0.05987977588577215,\n0.03282925392769393,\n0.03005755057310207,\n2.597019093156996e-05,\n0.009355992571839502,\n9.107989223269995e-05,\n0.0025864757492692577,\n0.0008046680877702718,\n0.003676954411104498,\n0.0023820723499611567,\n0.004461646162414915,\n0.012232037104772345,\n0.08673320229596392\n```\n\n#### Analyzing Numbers\n\nIf you have a set of numbers, `randalyze` can analyze them and tell you how close to a Benford distribution they are. These numbers may have been generated by `randalyze`, or maybe obtained from somewhere else - it really doesn\'t matter.\n\nSo, to analyze an output of 10,000 numbers from the `randalyze generate` command, and see whether it matches a Benford distribution to within 10%, use:\n\n```bash\nrandalyze generate benford -c 10000 | randalyze analyze -t 10 benford\n```\n\nAnd to ensure the numbers in a text file `numbers.txt`, with one number per line, fit a Benford distribution:\n\n```bash\ncat numbers.txt | randalyze analyze -t 10 benford\n```\n\nor use the `FILE` parameter:\n\n```bash\nrandalyze analyze -t 10 benford numbers.txt\n```\n\nAnd to produce the output in JSON format:\n\n```bash\nrandalyze analyze -t 10 --format json benford numbers.txt\n```\n\n##### Ouput Format\n\nLike its generated data, Randalyzer sends all of its analysis details to `stdout`. You can choose from a couple of formats:\n\n###### Text Format\n\nPlain text format analyses are in the following format:\n\n```text\nBenford Analysis Result\nFirst Digits Expected vs Actual:\n1        3010  :    3139  ->    4.3%\n2        1760  :    1755  ->   -0.3%\n3        1249  :    1220  ->   -2.4%\n4         969  :     912  ->   -5.9%\n5         791  :     773  ->   -2.4%\n6         669  :     650  ->   -2.9%\n7         579  :     613  ->    5.7%\n8         511  :     504  ->   -1.5%\n9         457  :     434  ->   -5.2%\n\nMaximum difference: 5.9%\nBenford (tolerance 10.0%)? True\n```\n\nThe expected digit count is calculated from Benford\'s law and rounded to the nearest integer. The actual number of occurences of the digit is in the next column, and the percentage difference between the two is in the last column.\n\n###### JSON\n\nRandalyze\'s analyser JSON output is in the following format:\n\n```json\n{\n    "distributions": [\n        {\n            "name": "benford",\n            "matches": true,\n            "first_digit": {\n                "distribution": {\n                    "0": 0.0,\n                    "1": 0.30246,\n                    "2": 0.17439,\n                    "3": 0.12504,\n                    "4": 0.09564,\n                    "5": 0.07993,\n                    "6": 0.06695,\n                    "7": 0.05743,\n                    "8": 0.05178,\n                    "9": 0.04638\n                },\n                "counts": {\n                    "0": 0,\n                    "1": 30246,\n                    "2": 17439,\n                    "3": 12504,\n                    "4": 9564,\n                    "5": 7993,\n                    "6": 6695,\n                    "7": 5743,\n                    "8": 5178,\n                    "9": 4638\n                }\n            }\n        }\n    ]\n}\n```\n\nThe `distribution` dictionary contains the fraction of the total numbers that started with each digit. The `counts` dictionary contains the count of each number that started with each digit.\n\n#### Self Testing\n\nYou can use `randalyze` to analyze the numbers it creates by piping the output of the `generate` command into the `analyze` command. For example, to check whether 10,000 generated numbers are wihin 10% of a Benford distribution, use:\n\n```bash\nrandalyze generate benford -c 10000 | randalyze analyze -t 10 benford\n```\n\n## Download Statistics\n[![Downloads](https://static.pepy.tech/badge/randalyze)](https://pepy.tech/project/randalyze)\n[![Downloads](https://static.pepy.tech/badge/randalyze/month)](https://pepy.tech/project/randalyze)\n[![Downloads](https://static.pepy.tech/badge/randalyze/week)](https://pepy.tech/project/randalyze)\n',
    'author': 'Jason Ross (big-jr)',
    'author_email': 'jason@softwarepragmatism.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
