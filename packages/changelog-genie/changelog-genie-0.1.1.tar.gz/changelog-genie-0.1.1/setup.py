# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['changelog_genie']

package_data = \
{'': ['*']}

entry_points = \
{'console_scripts': ['changelog_genie = changelog_genie.cli:cli']}

setup_kwargs = {
    'name': 'changelog-genie',
    'version': '0.1.1',
    'description': 'Generate changelogs for GitHub projects efficiently',
    'long_description': '# Changelog Genie\n\n![](changelog-genie.png)\n\nImage Credit: DALL-E\n\n## Overview\n\nChangelog Genie is a simple and pragmatic changelog generator, implemented in Python, that utilizes both the Git CLI \nand the GitHub REST API to produce changelog content very efficiently, avoiding GitHub API rate limits. It was built \nout of necessity as a replacement for [github-changelog-generator](https://github.com/github-changelog-generator/github-changelog-generator),\nwhich served well for many Apache Arrow projects for a long time but eventually became unworkable as the number of \nissues and pull requests continued to grow.\n\nRoadmap/Status:\n\n- [x] Basic functionality in place\n- [ ] Make sections and labels configurable\n- [ ] Support reading [github-changelog-generator](https://github.com/github-changelog-generator/github-changelog-generator) configuration files\n- [ ] Write the content into an existing changelog file\n\n## Installation\n\n```pip3 install changelog-genie```\n\n## Usage\n\n```shell\n$ changelog_genie --help\nusage: changelog_genie [-h] project commits\n\npositional arguments:\n  project     The project name e.g. andygrove/changelog_genie\n  commits     The filename containing Git hashes generated by a git log command\n\noptions:\n  -h, --help  show this help message and exit\n```\n\nThere is currently a three-step process for generating a changelog. This will be improved in a future release.\n\n### Step 1: Generate a list of commit hashes\n\nFrom the working directory of the project that contains commits to be documented, run a `git log` command to generate \na list of commit hashes to be documented. For example, to list commits between two tagged \nreleases `0.1.0` and `0.2.0`: \n\n```shell\ngit log 0.1.0..0.2.0 --pretty=format:"%H" > commits.txt\n```\n\n### Step 2: Generate changelog contents for this release\n\nRun the ChangeLog Genie script to fetch the commits from GitHub and produce the changelog content. Providing a GitHub token is \nnecessary to achieve a higher rate limit for interaction with the GitHub REST API. \n\n```shell\nGITHUB_TOKEN=<token> changelog_genie andygrove/changelog-genie path/to/commits.txt > partial-changelog.md\n```\n\n### Step 3: Copy and paste into existing changelog\n\nThis will be automated in a future release.\n\n## Contributing\n\n```shell\npython3 -m venv venv\n# activate the venv\nsource venv/bin/activate\n# update pip itself if necessary\npython -m pip install -U pip\n# install dependencies (for Python 3.8+)\npython -m pip install -r requirements.in\n\nPoetry\n\n```shell\nsudo apt install python3-poetry\n```\n\nTesting\n\n```shell\npoetry install\n```\n\n',
    'author': 'Andy Grove',
    'author_email': 'andygrove73@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
