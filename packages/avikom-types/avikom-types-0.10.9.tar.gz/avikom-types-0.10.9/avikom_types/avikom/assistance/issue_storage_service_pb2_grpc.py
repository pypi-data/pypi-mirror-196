# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from avikom.assistance import issue_pb2 as avikom_dot_assistance_dot_issue__pb2
from avikom.assistance import issue_query_pb2 as avikom_dot_assistance_dot_issue__query__pb2
from avikom.generic import result_pb2 as avikom_dot_generic_dot_result__pb2


class IssueStorageServiceStub(object):
    """*
    A database service to create, update and delete issues.
    @author Alexander Neumann <alneuman@techfak.uni-bielefeld.de>
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIssue = channel.unary_unary(
                '/avikom.assistance.IssueStorageService/GetIssue',
                request_serializer=avikom_dot_assistance_dot_issue__query__pb2.IssueQuery.SerializeToString,
                response_deserializer=avikom_dot_assistance_dot_issue__pb2.IssueList.FromString,
                )
        self.CreateIssue = channel.unary_unary(
                '/avikom.assistance.IssueStorageService/CreateIssue',
                request_serializer=avikom_dot_assistance_dot_issue__pb2.Issue.SerializeToString,
                response_deserializer=avikom_dot_generic_dot_result__pb2.Result.FromString,
                )
        self.UpdateIssueStatus = channel.unary_unary(
                '/avikom.assistance.IssueStorageService/UpdateIssueStatus',
                request_serializer=avikom_dot_assistance_dot_issue__query__pb2.IssueQuery.SerializeToString,
                response_deserializer=avikom_dot_generic_dot_result__pb2.Result.FromString,
                )
        self.DeleteIssue = channel.unary_unary(
                '/avikom.assistance.IssueStorageService/DeleteIssue',
                request_serializer=avikom_dot_assistance_dot_issue__query__pb2.IssueQuery.SerializeToString,
                response_deserializer=avikom_dot_generic_dot_result__pb2.Result.FromString,
                )


class IssueStorageServiceServicer(object):
    """*
    A database service to create, update and delete issues.
    @author Alexander Neumann <alneuman@techfak.uni-bielefeld.de>
    """

    def GetIssue(self, request, context):
        """/ Returns a list of issues filtered by `IssueQuery`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIssue(self, request, context):
        """/ Creates a new issue; Issue.id must be set by the caller!
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIssueStatus(self, request, context):
        """/ Updates an exisiting issue. IssueQuery must contain an id and a new status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteIssue(self, request, context):
        """/ Deletes an issue. IssueQuery.id must be set!
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IssueStorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetIssue': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIssue,
                    request_deserializer=avikom_dot_assistance_dot_issue__query__pb2.IssueQuery.FromString,
                    response_serializer=avikom_dot_assistance_dot_issue__pb2.IssueList.SerializeToString,
            ),
            'CreateIssue': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIssue,
                    request_deserializer=avikom_dot_assistance_dot_issue__pb2.Issue.FromString,
                    response_serializer=avikom_dot_generic_dot_result__pb2.Result.SerializeToString,
            ),
            'UpdateIssueStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIssueStatus,
                    request_deserializer=avikom_dot_assistance_dot_issue__query__pb2.IssueQuery.FromString,
                    response_serializer=avikom_dot_generic_dot_result__pb2.Result.SerializeToString,
            ),
            'DeleteIssue': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteIssue,
                    request_deserializer=avikom_dot_assistance_dot_issue__query__pb2.IssueQuery.FromString,
                    response_serializer=avikom_dot_generic_dot_result__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'avikom.assistance.IssueStorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IssueStorageService(object):
    """*
    A database service to create, update and delete issues.
    @author Alexander Neumann <alneuman@techfak.uni-bielefeld.de>
    """

    @staticmethod
    def GetIssue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/avikom.assistance.IssueStorageService/GetIssue',
            avikom_dot_assistance_dot_issue__query__pb2.IssueQuery.SerializeToString,
            avikom_dot_assistance_dot_issue__pb2.IssueList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateIssue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/avikom.assistance.IssueStorageService/CreateIssue',
            avikom_dot_assistance_dot_issue__pb2.Issue.SerializeToString,
            avikom_dot_generic_dot_result__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateIssueStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/avikom.assistance.IssueStorageService/UpdateIssueStatus',
            avikom_dot_assistance_dot_issue__query__pb2.IssueQuery.SerializeToString,
            avikom_dot_generic_dot_result__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteIssue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/avikom.assistance.IssueStorageService/DeleteIssue',
            avikom_dot_assistance_dot_issue__query__pb2.IssueQuery.SerializeToString,
            avikom_dot_generic_dot_result__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
