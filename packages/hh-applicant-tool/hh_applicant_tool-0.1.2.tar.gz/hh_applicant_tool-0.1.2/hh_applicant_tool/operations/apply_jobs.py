# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è –¥—Ä—É–≥–∏—Ö
import argparse
import logging
import random
from typing import TextIO

from ..api import ApiClient, ApiError, BadRequest
from ..main import BaseOperation
from ..main import Namespace as BaseNamespace
from ..types import ApiListResponse, VacancyItem

logger = logging.getLogger(__package__)


class Namespace(BaseNamespace):
    resume_id: str | None
    message_list: TextIO


class Operation(BaseOperation):
    """–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        parser.add_argument("--resume-id", help="–ò–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—é–º–µ")
        parser.add_argument(
            "--message-list",
            help="–ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –í —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã —Ç–∏–ø–∞ %%(name)s",
            type=argparse.FileType(),
        )

    def run(self, args: Namespace) -> None:
        if args.message_list:
            application_messages = list(
                filter(None, map(str.strip, args.message_list))
            )
        else:
            application_messages = [
                "–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è %(name)s",
                "–ü—Ä–æ—à—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é %(name)s",
            ]
        assert args.config["token"]
        api = ApiClient(
            access_token=args.config["token"]["access_token"],
        )
        if not (resume_id := args.resume_id):
            resumes: ApiListResponse = api.get("/resumes/mine")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
            # TODO: —Å–æ–∑–¥–∞—Ç—å 10 —Ä–µ–∑—é–º–µ –∏ —Ä–∞—Å—Å—ã–ª–∞—Ç—å –ø–æ 2000 –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ —Å—É—Ç–∫–∏
            resume_id = resumes["items"][0]["id"]
        self._apply_jobs(api, resume_id, application_messages)
        print("üìù –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!")

    def _get_vacancies(
        self, api: ApiClient, resume_id: str
    ) -> list[VacancyItem]:
        rv = []
        # —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –≥–ª—É–±–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 2000
        # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç 0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 0)
        per_page = 100
        for page in range(20):
            res: ApiListResponse = api.get(
                f"/resumes/{resume_id}/similar_vacancies",
                page=page,
                per_page=per_page,
            )
            rv.extend(res["items"])
            if len(rv) % per_page:
                break
        return rv

    def _apply_jobs(
        self, api: ApiClient, resume_id: str, application_messages: list[str]
    ) -> None:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏
        # –ü—Ä–æ–±–ª–µ–º–∞ —Ç—É—Ç –≤ —Ç–æ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç–∫–ª–∏–º–∫–∞–ª–∏—Å—å –¥–æ–ª–∂–Ω—ã –∏—Å—á–µ–∑–∞—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–æ –û–ù–ò –¢–ê–ú –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢. –¢–∞–∫ –∂–µ –µ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –µ–±—É—á–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –≤–≤–µ—Ä—Ö—É. –í—Ä–æ–¥–µ –º–æ–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ, –∞ –ø–æ—Ç–æ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–æ –æ–Ω –Ω–µ —Ç–æ—á–Ω—ã–π –∏ –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ 5 –º–∏–Ω—É—Ç, –∞ –ø–æ—Ç–æ–º—É —Ç–∞–º –ø–æ–≤—Ç–æ—Ä—ã
        item: VacancyItem
        for item in self._get_vacancies(api, resume_id):
            # –í —Ä–æ—Ç —è –µ–±–∞–ª –≤–∞—Å –∏ –≤–∞—à–∏ —Ç–µ—Å—Ç—ã, –ø–∏–¥–æ—Ä—ã
            if item["has_test"]:
                continue
            # –û—Ç–∫–ª–∏–∫–∞–µ–º—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—á–∏—é
            params = {
                "resume_id": resume_id,
                "vacancy_id": item["id"],
                "message": random.choice(application_messages) % item
                if item["response_letter_required"]
                else "",
            }
            try:
                res = api.post("/negotiations", params)
                assert res == {}
                logger.debug(
                    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é #%s %s",
                    item["id"],
                    item["name"],
                )
            except ApiError as ex:
                logger.warning(ex)
                if isinstance(ex, BadRequest) and ex.limit_exceeded:
                    break
