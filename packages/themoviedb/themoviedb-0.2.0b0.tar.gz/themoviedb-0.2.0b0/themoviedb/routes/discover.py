# -*- coding: utf-8 -*-
from themoviedb import schemas, utils
from themoviedb.routes.base import Base


class Discover(Base):

    async def movie(
        self,
        *,
        page: int = 1,
        sort_by: str = "popularity.desc",
        certification_country: str = None,
        certification: str = None,
        certification__lte: str = None,
        certification__gte: str = None,
        include_adult: bool = None,
        include_video: bool = None,
        primary_release_year: int = None,
        primary_release_date__gte: str = None,
        primary_release_date__lte: str = None,
        release_date__gte: str = None,
        release_date__lte: str = None,
        with_release_type: int = None,
        year: int = None,
        vote_count__gte: int = None,
        vote_count__lte: int = None,
        vote_average__gte: float = None,
        vote_average__lte: float = None,
        with_cast: str = None,
        with_crew: str = None,
        with_people: str = None,
        with_companies: str = None,
        with_genres: str = None,
        without_genres: str = None,
        with_keywords: str = None,
        without_keywords: str = None,
        with_runtime__gte: int = None,
        with_runtime__lte: int = None,
        with_original_language: str = None,
        with_watch_providers: str = None,
        watch_region: str = None,
        with_watch_monetization_types: str = None,
    ) -> schemas.Movies:
        """Discover movies by different types of data.

        See more: https://developers.themoviedb.org/3/discover/movie-discover
        """
        data = await self.request(
            "discover/movie",
            page=page,
            sort_by=sort_by,
            watch_region=watch_region,
            certification_country=certification_country,
            certification=certification,
            certification__lte=certification__lte,
            certification__gte=certification__gte,
            include_adult=include_adult,
            include_video=include_video,
            primary_release_year=primary_release_year,
            primary_release_date__gte=primary_release_date__gte,
            primary_release_date__lte=primary_release_date__lte,
            release_date__gte=release_date__gte,
            release_date__lte=release_date__lte,
            with_release_type=with_release_type,
            year=year,
            vote_count__gte=vote_count__gte,
            vote_count__lte=vote_count__lte,
            vote_average__gte=vote_average__gte,
            vote_average__lte=vote_average__lte,
            with_cast=with_cast,
            with_crew=with_crew,
            with_people=with_people,
            with_companies=with_companies,
            with_genres=with_genres,
            without_genres=without_genres,
            with_keywords=with_keywords,
            without_keywords=without_keywords,
            with_runtime__gte=with_runtime__gte,
            with_runtime__lte=with_runtime__lte,
            with_original_language=with_original_language,
            with_watch_providers=with_watch_providers,
            with_watch_monetization_types=with_watch_monetization_types,
        )
        return utils.as_dataclass(schemas.Movies, data)

    async def tv(
        self,
        *,
        page: int = 1,
        sort_by: str = "popularity.desc",
        air_date__gte: str = None,
        air_date__lte: str = None,
        first_air_date__gte: str = None,
        first_air_date__lte: str = None,
        first_air_date_year: int = None,
        timezone: str = None,
        vote_average__gte: float = None,
        vote_count__gte: int = None,
        with_genres: str = None,
        with_networks: str = None,
        without_genres: str = None,
        with_runtime__gte: int = None,
        with_runtime__lte: int = None,
        include_null_first_air_dates: bool = None,
        with_original_language: str = None,
        without_keywords: str = None,
        screened_theatrically: bool = None,
        with_companies: str = None,
        with_keywords: str = None,
        with_watch_providers: str = None,
        watch_region: str = None,
        with_watch_monetization_types: str = None,
    ) -> schemas.TVs:
        """Discover TV shows by different types of data.

        See more: https://developers.themoviedb.org/3/discover/tv-discover
        """
        data = await self.request(
            "discover/tv",
            page=page,
            sort_by=sort_by,
            watch_region=watch_region,
            air_date__gte=air_date__gte,
            air_date__lte=air_date__lte,
            first_air_date__gte=first_air_date__gte,
            first_air_date__lte=first_air_date__lte,
            first_air_date_year=first_air_date_year,
            timezone=timezone,
            vote_average__gte=vote_average__gte,
            vote_count__gte=vote_count__gte,
            with_genres=with_genres,
            with_networks=with_networks,
            without_genres=without_genres,
            with_runtime__gte=with_runtime__gte,
            with_runtime__lte=with_runtime__lte,
            include_null_first_air_dates=include_null_first_air_dates,
            with_original_language=with_original_language,
            without_keywords=without_keywords,
            screened_theatrically=screened_theatrically,
            with_companies=with_companies,
            with_keywords=with_keywords,
            with_watch_providers=with_watch_providers,
            with_watch_monetization_types=with_watch_monetization_types,
        )
        return utils.as_dataclass(schemas.TVs, data)
