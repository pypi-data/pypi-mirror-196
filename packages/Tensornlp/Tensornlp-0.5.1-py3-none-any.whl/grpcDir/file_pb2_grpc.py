# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpcDir.file_pb2 as file__pb2


class FileServiceStub(object):
    """FileService provides access to files.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFile = channel.unary_unary(
                '/file.FileService/GetFile',
                request_serializer=file__pb2.GetFileRequest.SerializeToString,
                response_deserializer=file__pb2.GetFileResponse.FromString,
                )
        self.ListFiles = channel.unary_unary(
                '/file.FileService/ListFiles',
                request_serializer=file__pb2.ListFilesRequest.SerializeToString,
                response_deserializer=file__pb2.ListFilesResponse.FromString,
                )
        self.CreateFile = channel.stream_unary(
                '/file.FileService/CreateFile',
                request_serializer=file__pb2.CreateFileRequest.SerializeToString,
                response_deserializer=file__pb2.CreateFileResponse.FromString,
                )
        self.ImportFromURL = channel.unary_unary(
                '/file.FileService/ImportFromURL',
                request_serializer=file__pb2.ImportFromURLRequest.SerializeToString,
                response_deserializer=file__pb2.ImportFromURLResponse.FromString,
                )
        self.DeleteFile = channel.unary_unary(
                '/file.FileService/DeleteFile',
                request_serializer=file__pb2.DeleteFileRequest.SerializeToString,
                response_deserializer=file__pb2.DeleteFileResponse.FromString,
                )
        self.UpdateFile = channel.unary_unary(
                '/file.FileService/UpdateFile',
                request_serializer=file__pb2.UpdateFileRequest.SerializeToString,
                response_deserializer=file__pb2.UpdateFileResponse.FromString,
                )
        self.ShareFile = channel.unary_unary(
                '/file.FileService/ShareFile',
                request_serializer=file__pb2.ShareFileRequest.SerializeToString,
                response_deserializer=file__pb2.ShareFileResponse.FromString,
                )
        self.UnshareFile = channel.unary_unary(
                '/file.FileService/UnshareFile',
                request_serializer=file__pb2.UnshareFileRequest.SerializeToString,
                response_deserializer=file__pb2.UnshareFileResponse.FromString,
                )
        self.AttachSync = channel.unary_unary(
                '/file.FileService/AttachSync',
                request_serializer=file__pb2.AttachSyncRequest.SerializeToString,
                response_deserializer=file__pb2.AttachSyncResponse.FromString,
                )
        self.DeleteSync = channel.unary_unary(
                '/file.FileService/DeleteSync',
                request_serializer=file__pb2.DeleteSyncRequest.SerializeToString,
                response_deserializer=file__pb2.DeleteSyncResponse.FromString,
                )


class FileServiceServicer(object):
    """FileService provides access to files.
    """

    def GetFile(self, request, context):
        """GetFile returns a specific file given its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """ListFiles returns a list of files, paginated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFile(self, request_iterator, context):
        """CreateFile creates a new file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportFromURL(self, request, context):
        """// ImportFromURL imports a file from a URL. The file will be downloaded
        Importorts a file from a URL. The file will be downloaded
        and stored under a certain path.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """DeleteFile deletes a file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFile(self, request, context):
        """UpdateFile updates a file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShareFile(self, request, context):
        """ShareFile shares a file with another user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnshareFile(self, request, context):
        """UnshareFile deletes an existing share of a file with another user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AttachSync(self, request, context):
        """AttachSync attaches a Sync to a file.
        If the file isn't a folder, or the folder already has an attached Sync,
        this operation will fail.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSync(self, request, context):
        """DeleteSync deletes an Sync. The file contents of the folder
        will be kept, but no further updates will be made.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=file__pb2.GetFileRequest.FromString,
                    response_serializer=file__pb2.GetFileResponse.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=file__pb2.ListFilesRequest.FromString,
                    response_serializer=file__pb2.ListFilesResponse.SerializeToString,
            ),
            'CreateFile': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateFile,
                    request_deserializer=file__pb2.CreateFileRequest.FromString,
                    response_serializer=file__pb2.CreateFileResponse.SerializeToString,
            ),
            'ImportFromURL': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportFromURL,
                    request_deserializer=file__pb2.ImportFromURLRequest.FromString,
                    response_serializer=file__pb2.ImportFromURLResponse.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=file__pb2.DeleteFileRequest.FromString,
                    response_serializer=file__pb2.DeleteFileResponse.SerializeToString,
            ),
            'UpdateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFile,
                    request_deserializer=file__pb2.UpdateFileRequest.FromString,
                    response_serializer=file__pb2.UpdateFileResponse.SerializeToString,
            ),
            'ShareFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ShareFile,
                    request_deserializer=file__pb2.ShareFileRequest.FromString,
                    response_serializer=file__pb2.ShareFileResponse.SerializeToString,
            ),
            'UnshareFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UnshareFile,
                    request_deserializer=file__pb2.UnshareFileRequest.FromString,
                    response_serializer=file__pb2.UnshareFileResponse.SerializeToString,
            ),
            'AttachSync': grpc.unary_unary_rpc_method_handler(
                    servicer.AttachSync,
                    request_deserializer=file__pb2.AttachSyncRequest.FromString,
                    response_serializer=file__pb2.AttachSyncResponse.SerializeToString,
            ),
            'DeleteSync': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSync,
                    request_deserializer=file__pb2.DeleteSyncRequest.FromString,
                    response_serializer=file__pb2.DeleteSyncResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file.FileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileService(object):
    """FileService provides access to files.
    """

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileService/GetFile',
            file__pb2.GetFileRequest.SerializeToString,
            file__pb2.GetFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileService/ListFiles',
            file__pb2.ListFilesRequest.SerializeToString,
            file__pb2.ListFilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/file.FileService/CreateFile',
            file__pb2.CreateFileRequest.SerializeToString,
            file__pb2.CreateFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportFromURL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileService/ImportFromURL',
            file__pb2.ImportFromURLRequest.SerializeToString,
            file__pb2.ImportFromURLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileService/DeleteFile',
            file__pb2.DeleteFileRequest.SerializeToString,
            file__pb2.DeleteFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileService/UpdateFile',
            file__pb2.UpdateFileRequest.SerializeToString,
            file__pb2.UpdateFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShareFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileService/ShareFile',
            file__pb2.ShareFileRequest.SerializeToString,
            file__pb2.ShareFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnshareFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileService/UnshareFile',
            file__pb2.UnshareFileRequest.SerializeToString,
            file__pb2.UnshareFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AttachSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileService/AttachSync',
            file__pb2.AttachSyncRequest.SerializeToString,
            file__pb2.AttachSyncResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileService/DeleteSync',
            file__pb2.DeleteSyncRequest.SerializeToString,
            file__pb2.DeleteSyncResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
