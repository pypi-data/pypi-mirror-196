# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lodger_pb2 as lodger__pb2


class LodgerServiceStub(object):
    """LodgerService manages the lodgers of the system, i.e. users and groups.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthorizedUser = channel.unary_unary(
                '/lodger.LodgerService/AuthorizedUser',
                request_serializer=lodger__pb2.AuthorizedUserRequest.SerializeToString,
                response_deserializer=lodger__pb2.AuthorizedUserResponse.FromString,
                )
        self.CreateAPIKey = channel.unary_unary(
                '/lodger.LodgerService/CreateAPIKey',
                request_serializer=lodger__pb2.CreateAPIKeyRequest.SerializeToString,
                response_deserializer=lodger__pb2.CreateAPIKeyResponse.FromString,
                )
        self.ListAPIKeys = channel.unary_unary(
                '/lodger.LodgerService/ListAPIKeys',
                request_serializer=lodger__pb2.ListAPIKeysRequest.SerializeToString,
                response_deserializer=lodger__pb2.ListAPIKeysResponse.FromString,
                )
        self.DeleteAPIKey = channel.unary_unary(
                '/lodger.LodgerService/DeleteAPIKey',
                request_serializer=lodger__pb2.DeleteAPIKeyRequest.SerializeToString,
                response_deserializer=lodger__pb2.DeleteAPIKeyResponse.FromString,
                )
        self.OAuthLink = channel.unary_unary(
                '/lodger.LodgerService/OAuthLink',
                request_serializer=lodger__pb2.OAuthLinkRequest.SerializeToString,
                response_deserializer=lodger__pb2.OAuthLinkResponse.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/lodger.LodgerService/UpdateUser',
                request_serializer=lodger__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=lodger__pb2.UpdateUserResponse.FromString,
                )
        self.Usage = channel.unary_unary(
                '/lodger.LodgerService/Usage',
                request_serializer=lodger__pb2.UsageRequest.SerializeToString,
                response_deserializer=lodger__pb2.UsageResponse.FromString,
                )
        self.UpdateSubscription = channel.unary_unary(
                '/lodger.LodgerService/UpdateSubscription',
                request_serializer=lodger__pb2.UpdateSubscriptionRequest.SerializeToString,
                response_deserializer=lodger__pb2.UpdateSubscriptionResponse.FromString,
                )


class LodgerServiceServicer(object):
    """LodgerService manages the lodgers of the system, i.e. users and groups.
    """

    def AuthorizedUser(self, request, context):
        """AuthorizedUser returns the user that's currently authorized.
        This can be used to check if the user is logged in.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAPIKey(self, request, context):
        """CreateAPIKey creates a new API key for the authorized user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAPIKeys(self, request, context):
        """ListAPIKeys lists the API keys for the authorized user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAPIKey(self, request, context):
        """DeleteAPIKey deletes an API key for the authorized user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OAuthLink(self, request, context):
        """OAuthLink allows users to make a number of links to external services.
        For any given provider, this endpoint may return a setup URL that the
        user can visit to authorize the service, or an object describing the
        current state of the link.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """UpdateUser updates the user's profile.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Usage(self, request, context):
        """Usage queries the users usage statistics for the current period.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSubscription(self, request, context):
        """UpdateSubscription updates the user's subscription.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LodgerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthorizedUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizedUser,
                    request_deserializer=lodger__pb2.AuthorizedUserRequest.FromString,
                    response_serializer=lodger__pb2.AuthorizedUserResponse.SerializeToString,
            ),
            'CreateAPIKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAPIKey,
                    request_deserializer=lodger__pb2.CreateAPIKeyRequest.FromString,
                    response_serializer=lodger__pb2.CreateAPIKeyResponse.SerializeToString,
            ),
            'ListAPIKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAPIKeys,
                    request_deserializer=lodger__pb2.ListAPIKeysRequest.FromString,
                    response_serializer=lodger__pb2.ListAPIKeysResponse.SerializeToString,
            ),
            'DeleteAPIKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAPIKey,
                    request_deserializer=lodger__pb2.DeleteAPIKeyRequest.FromString,
                    response_serializer=lodger__pb2.DeleteAPIKeyResponse.SerializeToString,
            ),
            'OAuthLink': grpc.unary_unary_rpc_method_handler(
                    servicer.OAuthLink,
                    request_deserializer=lodger__pb2.OAuthLinkRequest.FromString,
                    response_serializer=lodger__pb2.OAuthLinkResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=lodger__pb2.UpdateUserRequest.FromString,
                    response_serializer=lodger__pb2.UpdateUserResponse.SerializeToString,
            ),
            'Usage': grpc.unary_unary_rpc_method_handler(
                    servicer.Usage,
                    request_deserializer=lodger__pb2.UsageRequest.FromString,
                    response_serializer=lodger__pb2.UsageResponse.SerializeToString,
            ),
            'UpdateSubscription': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSubscription,
                    request_deserializer=lodger__pb2.UpdateSubscriptionRequest.FromString,
                    response_serializer=lodger__pb2.UpdateSubscriptionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lodger.LodgerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LodgerService(object):
    """LodgerService manages the lodgers of the system, i.e. users and groups.
    """

    @staticmethod
    def AuthorizedUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lodger.LodgerService/AuthorizedUser',
            lodger__pb2.AuthorizedUserRequest.SerializeToString,
            lodger__pb2.AuthorizedUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAPIKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lodger.LodgerService/CreateAPIKey',
            lodger__pb2.CreateAPIKeyRequest.SerializeToString,
            lodger__pb2.CreateAPIKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAPIKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lodger.LodgerService/ListAPIKeys',
            lodger__pb2.ListAPIKeysRequest.SerializeToString,
            lodger__pb2.ListAPIKeysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAPIKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lodger.LodgerService/DeleteAPIKey',
            lodger__pb2.DeleteAPIKeyRequest.SerializeToString,
            lodger__pb2.DeleteAPIKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OAuthLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lodger.LodgerService/OAuthLink',
            lodger__pb2.OAuthLinkRequest.SerializeToString,
            lodger__pb2.OAuthLinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lodger.LodgerService/UpdateUser',
            lodger__pb2.UpdateUserRequest.SerializeToString,
            lodger__pb2.UpdateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Usage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lodger.LodgerService/Usage',
            lodger__pb2.UsageRequest.SerializeToString,
            lodger__pb2.UsageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSubscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lodger.LodgerService/UpdateSubscription',
            lodger__pb2.UpdateSubscriptionRequest.SerializeToString,
            lodger__pb2.UpdateSubscriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
