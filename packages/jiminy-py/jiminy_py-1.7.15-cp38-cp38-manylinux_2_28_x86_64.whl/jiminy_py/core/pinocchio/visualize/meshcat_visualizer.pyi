from . import BaseVisualizer
from _typeshed import Incomplete

class MeshcatVisualizer(BaseVisualizer):
    def getViewerNodeName(self, geometry_object, geometry_type): ...
    viewer: Incomplete
    def initViewer(self, viewer: Incomplete | None = ..., open: bool = ..., loadModel: bool = ...) -> None: ...
    def loadPrimitive(self, geometry_object): ...
    def loadMesh(self, geometry_object): ...
    def loadViewerGeometryObject(self, geometry_object, geometry_type, color: Incomplete | None = ...) -> None: ...
    viewerRootNodeName: Incomplete
    viewerCollisionGroupName: Incomplete
    viewerVisualGroupName: Incomplete
    def loadViewerModel(self, rootNodeName: str = ..., color: Incomplete | None = ...) -> None: ...
    def reload(self, new_geometry_object, geometry_type: Incomplete | None = ...) -> None: ...
    def clean(self) -> None: ...
    def delete(self, geometry_object, geometry_type) -> None: ...
    def display(self, q: Incomplete | None = ...) -> None: ...
    def updatePlacements(self, geometry_type) -> None: ...
    def captureImage(self): ...
    display_collisions: bool
    def displayCollisions(self, visibility) -> None: ...
    display_visuals: bool
    def displayVisuals(self, visibility) -> None: ...
