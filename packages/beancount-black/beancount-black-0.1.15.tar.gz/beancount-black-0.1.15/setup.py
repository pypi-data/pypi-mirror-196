# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['beancount_black']

package_data = \
{'': ['*']}

install_requires = \
['beancount-parser>=0.1.23,<0.2.0', 'click>=7.0.0,<9.0.0']

entry_points = \
{'console_scripts': ['bean-black = beancount_black.main:main']}

setup_kwargs = {
    'name': 'beancount-black',
    'version': '0.1.15',
    'description': "Opinioned code formatter, just like Python's black code formatter but for Beancount",
    'long_description': '# beancount-black [![CircleCI](https://circleci.com/gh/LaunchPlatform/beancount-black/tree/master.svg?style=svg)](https://circleci.com/gh/LaunchPlatform/beancount-black/tree/master)\nOpinionated code formatter, just like Python\'s [black](https://pypi.org/project/black/) code formatter but for Beancount\n\nTry it out online [here](https://app.beanhub.io/tools/beancount-formatter)\n\n## Features\n\n- **MIT licensed** - based on [beancount-parser](https://github.com/LaunchPlatform/beancount-parser), a [Lark](https://github.com/lark-parser/lark) based LALR(1) Beancount syntax parser\n- **Extremely fast** - 5K+ lines file generated by `bean-example` can be formatted in around 1 second\n- **Section awareness** - entries separated by Emac org symbol mark `*` will be formatted in groups without changing the overall structure\n- **Comment preserving** - comments are preserved and will be formatted as well\n- **Auto column width** - calculate maximum column width and adjust accordingly\n- **Valid beancount file assumed** - please notice that the formatter assumes the given beacnount file is valid, it doesn\'t not perform any kind of validation\n\n# Sponsor\n\nThe original project beancount-black was meant to be an internal tool built by [Launch Platform LLC](https://launchplatform.com) for \n\n<p align="center">\n  <a href="https://beanhub.io"><img src="https://github.com/LaunchPlatform/beancount-black/raw/master/assets/beanhub.svg?raw=true" alt="BeanHub logo" /></a>\n</p>\n\nA modern accounting book service based on the most popular open source version control system [Git](https://git-scm.com/) and text-based double entry accounting book software [Beancount](https://beancount.github.io/docs/index.html).\nWe realized adding new entries with BeanHub automatically over time makes beancount file a mess.\nSo obviously, a strong code formatter is needed.\nWhile SaaS businesses won\'t be required to open source an internal tool like this, we still love that the service is only possible because of the open-source tool we are using.\nWe think it would be greatly beneficial for the community to access a tool like this, so we\'ve decided to open source it under MIT license, hope you find this tool useful ðŸ˜„\n\n## Install\n\nTo install the formatter, simply run\n\n```bash\npip install beancount-black\n```\n\n## Usage\n\nRun\n\n```bash\nbean-black /path/to/file.bean\n```\n\nThen the file will be formatted.\nSince this tool is still in its early stage, a backup file at `<filepath>.backup` will be created automatically by default just in case.\nThe creation of backup files can be disabled by passing `-n` or `--no-backup` like this\n\n```bash\nbean-black -n /path/to/file.bean\n```\n\nIt\'s highly recommended to use [BeanHub](https://beanhub.io), Git or other version control system to track your Beancount book files before running the formatter against them without a backup.\n\nIf you want to run the formatter programmatically, you can do this\n\n```python\nimport io\n\nfrom beancount_parser.parser import make_parser\nfrom beancount_black.formatter import Formatter\n\nparser = make_parser()\nformatter = Formatter()\n\ntree = parser.parse(beancount_content)\noutput_file = io.StringIO()\nformatter.format(tree, output_file)\n```\n\n## Stdin mode\n\nYou can run the formatter in STDIN mode by passing `-s` or `--stdin-mode` argument like this:\n\n```bash\nbean-black -s\n```\n\n## Debug\n\nSometimes you might encounter problems when formatting some beancount files.\nTo debug and better understand which line is causing the problem, you can change the log level by passing `-l` argument with `debug` or `verbose`.\nFor example:\n\n```bash\nbean-black -n /path/to/file.bean -l verbose\n```\n\nWith `verbose`, details of the parsed object will be printed.\nWith `debug`, only the line number and type of entry will be printed.\nYou can also use `LOG_LEVEL` environment variable as well.\nThe available log level options are:\n\n- verbose\n- debug\n- info (default)\n- error\n- warning\n- fatal\n\n## Future features\n\n- Add argument for renaming account and commodity\n- Add argument for following other files from `include` statements and also format those files\n \nFeedbacks, bugs reporting or feature requests are welcome ðŸ™Œ, just please open an issue.\nNo guarantee we have time to deal with them, but will see what we can do.\n',
    'author': 'Fang-Pen Lin',
    'author_email': 'fangpen@launchplatform.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/LaunchPlatform/beancount-black',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
